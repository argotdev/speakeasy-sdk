/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsArchiveProject } from "../funcs/projectsArchiveProject.js";
import { projectsCreateProject } from "../funcs/projectsCreateProject.js";
import { projectsCreateProjectServiceAccount } from "../funcs/projectsCreateProjectServiceAccount.js";
import { projectsCreateProjectUser } from "../funcs/projectsCreateProjectUser.js";
import { projectsDeleteProjectApiKey } from "../funcs/projectsDeleteProjectApiKey.js";
import { projectsDeleteProjectServiceAccount } from "../funcs/projectsDeleteProjectServiceAccount.js";
import { projectsDeleteProjectUser } from "../funcs/projectsDeleteProjectUser.js";
import { projectsListProjectApiKeys } from "../funcs/projectsListProjectApiKeys.js";
import { projectsListProjects } from "../funcs/projectsListProjects.js";
import { projectsListProjectServiceAccounts } from "../funcs/projectsListProjectServiceAccounts.js";
import { projectsListProjectUsers } from "../funcs/projectsListProjectUsers.js";
import { projectsModifyProject } from "../funcs/projectsModifyProject.js";
import { projectsModifyProjectUser } from "../funcs/projectsModifyProjectUser.js";
import { projectsRetrieveProject } from "../funcs/projectsRetrieveProject.js";
import { projectsRetrieveProjectApiKey } from "../funcs/projectsRetrieveProjectApiKey.js";
import { projectsRetrieveProjectServiceAccount } from "../funcs/projectsRetrieveProjectServiceAccount.js";
import { projectsRetrieveProjectUser } from "../funcs/projectsRetrieveProjectUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Projects extends ClientSDK {
  /**
   * Returns a list of projects.
   */
  async listProjects(
    request: operations.ListProjectsRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectListResponse> {
    return unwrapAsync(projectsListProjects(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
   */
  async createProject(
    request: components.ProjectCreateRequest,
    options?: RequestOptions,
  ): Promise<components.Project> {
    return unwrapAsync(projectsCreateProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a project.
   */
  async retrieveProject(
    request: operations.RetrieveProjectRequest,
    options?: RequestOptions,
  ): Promise<components.Project> {
    return unwrapAsync(projectsRetrieveProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies a project in the organization.
   */
  async modifyProject(
    request: operations.ModifyProjectRequest,
    options?: RequestOptions,
  ): Promise<components.Project> {
    return unwrapAsync(projectsModifyProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Archives a project in the organization. Archived projects cannot be used or updated.
   */
  async archiveProject(
    request: operations.ArchiveProjectRequest,
    options?: RequestOptions,
  ): Promise<components.Project> {
    return unwrapAsync(projectsArchiveProject(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of users in the project.
   */
  async listProjectUsers(
    request: operations.ListProjectUsersRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUserListResponse> {
    return unwrapAsync(projectsListProjectUsers(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a user to the project. Users must already be members of the organization to be added to a project.
   */
  async createProjectUser(
    request: operations.CreateProjectUserRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUser> {
    return unwrapAsync(projectsCreateProjectUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a user in the project.
   */
  async retrieveProjectUser(
    request: operations.RetrieveProjectUserRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUser> {
    return unwrapAsync(projectsRetrieveProjectUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies a user's role in the project.
   */
  async modifyProjectUser(
    request: operations.ModifyProjectUserRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUser> {
    return unwrapAsync(projectsModifyProjectUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a user from the project.
   */
  async deleteProjectUser(
    request: operations.DeleteProjectUserRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectUserDeleteResponse> {
    return unwrapAsync(projectsDeleteProjectUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of service accounts in the project.
   */
  async listProjectServiceAccounts(
    request: operations.ListProjectServiceAccountsRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectServiceAccountListResponse> {
    return unwrapAsync(projectsListProjectServiceAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * Creates a new service account in the project. This also returns an unredacted API key for the service account.
   */
  async createProjectServiceAccount(
    request: operations.CreateProjectServiceAccountRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectServiceAccountCreateResponse> {
    return unwrapAsync(projectsCreateProjectServiceAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a service account in the project.
   */
  async retrieveProjectServiceAccount(
    request: operations.RetrieveProjectServiceAccountRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectServiceAccount> {
    return unwrapAsync(projectsRetrieveProjectServiceAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a service account from the project.
   */
  async deleteProjectServiceAccount(
    request: operations.DeleteProjectServiceAccountRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectServiceAccountDeleteResponse> {
    return unwrapAsync(projectsDeleteProjectServiceAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of API keys in the project.
   */
  async listProjectApiKeys(
    request: operations.ListProjectApiKeysRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectApiKeyListResponse> {
    return unwrapAsync(projectsListProjectApiKeys(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves an API key in the project.
   */
  async retrieveProjectApiKey(
    request: operations.RetrieveProjectApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectApiKey> {
    return unwrapAsync(projectsRetrieveProjectApiKey(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes an API key from the project.
   */
  async deleteProjectApiKey(
    request: operations.DeleteProjectApiKeyRequest,
    options?: RequestOptions,
  ): Promise<components.ProjectApiKeyDeleteResponse> {
    return unwrapAsync(projectsDeleteProjectApiKey(
      this,
      request,
      options,
    ));
  }
}
