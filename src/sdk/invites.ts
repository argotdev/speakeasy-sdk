/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { invitesDeleteInvite } from "../funcs/invitesDeleteInvite.js";
import { invitesInviteUser } from "../funcs/invitesInviteUser.js";
import { invitesListInvites } from "../funcs/invitesListInvites.js";
import { invitesRetrieveInvite } from "../funcs/invitesRetrieveInvite.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Invites extends ClientSDK {
  /**
   * Returns a list of invites in the organization.
   */
  async listInvites(
    request: operations.ListInvitesRequest,
    options?: RequestOptions,
  ): Promise<components.InviteListResponse> {
    return unwrapAsync(invitesListInvites(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
   */
  async inviteUser(
    request: components.InviteRequest,
    options?: RequestOptions,
  ): Promise<components.Invite> {
    return unwrapAsync(invitesInviteUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves an invite.
   */
  async retrieveInvite(
    request: operations.RetrieveInviteRequest,
    options?: RequestOptions,
  ): Promise<components.Invite> {
    return unwrapAsync(invitesRetrieveInvite(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an invite. If the invite has already been accepted, it cannot be deleted.
   */
  async deleteInvite(
    request: operations.DeleteInviteRequest,
    options?: RequestOptions,
  ): Promise<components.InviteDeleteResponse> {
    return unwrapAsync(invitesDeleteInvite(
      this,
      request,
      options,
    ));
  }
}
