/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assistantsCancelRun } from "../funcs/assistantsCancelRun.js";
import { assistantsCreateAssistant } from "../funcs/assistantsCreateAssistant.js";
import { assistantsCreateMessage } from "../funcs/assistantsCreateMessage.js";
import { assistantsCreateRun } from "../funcs/assistantsCreateRun.js";
import { assistantsCreateThread } from "../funcs/assistantsCreateThread.js";
import { assistantsCreateThreadAndRun } from "../funcs/assistantsCreateThreadAndRun.js";
import { assistantsDeleteAssistant } from "../funcs/assistantsDeleteAssistant.js";
import { assistantsDeleteMessage } from "../funcs/assistantsDeleteMessage.js";
import { assistantsDeleteThread } from "../funcs/assistantsDeleteThread.js";
import { assistantsGetAssistant } from "../funcs/assistantsGetAssistant.js";
import { assistantsGetMessage } from "../funcs/assistantsGetMessage.js";
import { assistantsGetRun } from "../funcs/assistantsGetRun.js";
import { assistantsGetRunStep } from "../funcs/assistantsGetRunStep.js";
import { assistantsGetThread } from "../funcs/assistantsGetThread.js";
import { assistantsListAssistants } from "../funcs/assistantsListAssistants.js";
import { assistantsListMessages } from "../funcs/assistantsListMessages.js";
import { assistantsListRuns } from "../funcs/assistantsListRuns.js";
import { assistantsListRunSteps } from "../funcs/assistantsListRunSteps.js";
import { assistantsModifyAssistant } from "../funcs/assistantsModifyAssistant.js";
import { assistantsModifyMessage } from "../funcs/assistantsModifyMessage.js";
import { assistantsModifyRun } from "../funcs/assistantsModifyRun.js";
import { assistantsModifyThread } from "../funcs/assistantsModifyThread.js";
import { assistantsSubmitToolOuputsToRun } from "../funcs/assistantsSubmitToolOuputsToRun.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Assistants extends ClientSDK {
  /**
   * Returns a list of assistants.
   */
  async listAssistants(
    request: operations.ListAssistantsRequest,
    options?: RequestOptions,
  ): Promise<components.ListAssistantsResponse> {
    return unwrapAsync(assistantsListAssistants(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an assistant with a model and instructions.
   */
  async createAssistant(
    request: components.CreateAssistantRequest,
    options?: RequestOptions,
  ): Promise<components.AssistantObject> {
    return unwrapAsync(assistantsCreateAssistant(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves an assistant.
   */
  async getAssistant(
    request: operations.GetAssistantRequest,
    options?: RequestOptions,
  ): Promise<components.AssistantObject> {
    return unwrapAsync(assistantsGetAssistant(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies an assistant.
   */
  async modifyAssistant(
    request: operations.ModifyAssistantRequest,
    options?: RequestOptions,
  ): Promise<components.AssistantObject> {
    return unwrapAsync(assistantsModifyAssistant(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an assistant.
   */
  async deleteAssistant(
    request: operations.DeleteAssistantRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteAssistantResponse> {
    return unwrapAsync(assistantsDeleteAssistant(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a thread.
   */
  async createThread(
    request?: components.CreateThreadRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.ThreadObject> {
    return unwrapAsync(assistantsCreateThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a thread.
   */
  async getThread(
    request: operations.GetThreadRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadObject> {
    return unwrapAsync(assistantsGetThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies a thread.
   */
  async modifyThread(
    request: operations.ModifyThreadRequest,
    options?: RequestOptions,
  ): Promise<components.ThreadObject> {
    return unwrapAsync(assistantsModifyThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a thread.
   */
  async deleteThread(
    request: operations.DeleteThreadRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteThreadResponse> {
    return unwrapAsync(assistantsDeleteThread(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of messages for a given thread.
   */
  async listMessages(
    request: operations.ListMessagesRequest,
    options?: RequestOptions,
  ): Promise<components.ListMessagesResponse> {
    return unwrapAsync(assistantsListMessages(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a message.
   */
  async createMessage(
    request: operations.CreateMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageObject> {
    return unwrapAsync(assistantsCreateMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a message.
   */
  async getMessage(
    request: operations.GetMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageObject> {
    return unwrapAsync(assistantsGetMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies a message.
   */
  async modifyMessage(
    request: operations.ModifyMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageObject> {
    return unwrapAsync(assistantsModifyMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Deletes a message.
   */
  async deleteMessage(
    request: operations.DeleteMessageRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteMessageResponse> {
    return unwrapAsync(assistantsDeleteMessage(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a thread and run it in one request.
   */
  async createThreadAndRun(
    request: components.CreateThreadAndRunRequest,
    options?: RequestOptions,
  ): Promise<components.RunObject> {
    return unwrapAsync(assistantsCreateThreadAndRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of runs belonging to a thread.
   */
  async listRuns(
    request: operations.ListRunsRequest,
    options?: RequestOptions,
  ): Promise<components.ListRunsResponse> {
    return unwrapAsync(assistantsListRuns(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a run.
   */
  async createRun(
    request: operations.CreateRunRequest,
    options?: RequestOptions,
  ): Promise<components.RunObject> {
    return unwrapAsync(assistantsCreateRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a run.
   */
  async getRun(
    request: operations.GetRunRequest,
    options?: RequestOptions,
  ): Promise<components.RunObject> {
    return unwrapAsync(assistantsGetRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Modifies a run.
   */
  async modifyRun(
    request: operations.ModifyRunRequest,
    options?: RequestOptions,
  ): Promise<components.RunObject> {
    return unwrapAsync(assistantsModifyRun(
      this,
      request,
      options,
    ));
  }

  /**
   * When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
   */
  async submitToolOuputsToRun(
    request: operations.SubmitToolOuputsToRunRequest,
    options?: RequestOptions,
  ): Promise<components.RunObject> {
    return unwrapAsync(assistantsSubmitToolOuputsToRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancels a run that is `in_progress`.
   */
  async cancelRun(
    request: operations.CancelRunRequest,
    options?: RequestOptions,
  ): Promise<components.RunObject> {
    return unwrapAsync(assistantsCancelRun(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns a list of run steps belonging to a run.
   */
  async listRunSteps(
    request: operations.ListRunStepsRequest,
    options?: RequestOptions,
  ): Promise<components.ListRunStepsResponse> {
    return unwrapAsync(assistantsListRunSteps(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a run step.
   */
  async getRunStep(
    request: operations.GetRunStepRequest,
    options?: RequestOptions,
  ): Promise<components.RunStepObject> {
    return unwrapAsync(assistantsGetRunStep(
      this,
      request,
      options,
    ));
  }
}
