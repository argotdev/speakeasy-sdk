/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { batchCancelBatch } from "../funcs/batchCancelBatch.js";
import { batchCreateBatch } from "../funcs/batchCreateBatch.js";
import { batchListBatches } from "../funcs/batchListBatches.js";
import { batchRetrieveBatch } from "../funcs/batchRetrieveBatch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Batch extends ClientSDK {
  /**
   * Creates and executes a batch from an uploaded file of requests
   */
  async createBatch(
    request: operations.CreateBatchRequestBody,
    options?: RequestOptions,
  ): Promise<components.Batch> {
    return unwrapAsync(batchCreateBatch(
      this,
      request,
      options,
    ));
  }

  /**
   * List your organization's batches.
   */
  async listBatches(
    request: operations.ListBatchesRequest,
    options?: RequestOptions,
  ): Promise<components.ListBatchesResponse> {
    return unwrapAsync(batchListBatches(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieves a batch.
   */
  async retrieveBatch(
    request: operations.RetrieveBatchRequest,
    options?: RequestOptions,
  ): Promise<components.Batch> {
    return unwrapAsync(batchRetrieveBatch(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
   */
  async cancelBatch(
    request: operations.CancelBatchRequest,
    options?: RequestOptions,
  ): Promise<components.Batch> {
    return unwrapAsync(batchCancelBatch(
      this,
      request,
      options,
    ));
  }
}
