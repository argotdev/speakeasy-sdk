/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { filesCreateFile } from "../funcs/filesCreateFile.js";
import { filesDeleteFile } from "../funcs/filesDeleteFile.js";
import { filesDownloadFile } from "../funcs/filesDownloadFile.js";
import { filesListFiles } from "../funcs/filesListFiles.js";
import { filesRetrieveFile } from "../funcs/filesRetrieveFile.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Files extends ClientSDK {
  /**
   * Returns a list of files that belong to the user's organization.
   */
  async listFiles(
    request: operations.ListFilesRequest,
    options?: RequestOptions,
  ): Promise<components.ListFilesResponse> {
    return unwrapAsync(filesListFiles(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
   *
   * The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.
   *
   * The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.
   *
   * The Batch API only supports `.jsonl` files up to 100 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).
   *
   * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
   */
  async createFile(
    request: components.CreateFileRequest,
    options?: RequestOptions,
  ): Promise<components.OpenAIFile> {
    return unwrapAsync(filesCreateFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a file.
   */
  async deleteFile(
    request: operations.DeleteFileRequest,
    options?: RequestOptions,
  ): Promise<components.DeleteFileResponse> {
    return unwrapAsync(filesDeleteFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns information about a specific file.
   */
  async retrieveFile(
    request: operations.RetrieveFileRequest,
    options?: RequestOptions,
  ): Promise<components.OpenAIFile> {
    return unwrapAsync(filesRetrieveFile(
      this,
      request,
      options,
    ));
  }

  /**
   * Returns the contents of the specified file.
   */
  async downloadFile(
    request: operations.DownloadFileRequest,
    options?: RequestOptions,
  ): Promise<string> {
    return unwrapAsync(filesDownloadFile(
      this,
      request,
      options,
    ));
  }
}
