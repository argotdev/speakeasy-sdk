/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uploadsAddUploadPart } from "../funcs/uploadsAddUploadPart.js";
import { uploadsCancelUpload } from "../funcs/uploadsCancelUpload.js";
import { uploadsCompleteUpload } from "../funcs/uploadsCompleteUpload.js";
import { uploadsCreateUpload } from "../funcs/uploadsCreateUpload.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Uploads extends ClientSDK {
  /**
   * Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.
   *
   * Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.
   *
   * For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case:
   * - [Assistants](/docs/assistants/tools/file-search/supported-files)
   *
   * For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create).
   */
  async createUpload(
    request: components.CreateUploadRequest,
    options?: RequestOptions,
  ): Promise<components.Upload> {
    return unwrapAsync(uploadsCreateUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.
   *
   * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
   *
   * It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).
   */
  async addUploadPart(
    request: operations.AddUploadPartRequest,
    options?: RequestOptions,
  ): Promise<components.UploadPart> {
    return unwrapAsync(uploadsAddUploadPart(
      this,
      request,
      options,
    ));
  }

  /**
   * Completes the [Upload](/docs/api-reference/uploads/object).
   *
   * Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.
   *
   * You can specify the order of the Parts by passing in an ordered list of the Part IDs.
   *
   * The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.
   */
  async completeUpload(
    request: operations.CompleteUploadRequest,
    options?: RequestOptions,
  ): Promise<components.Upload> {
    return unwrapAsync(uploadsCompleteUpload(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancels the Upload. No Parts may be added after an Upload is cancelled.
   */
  async cancelUpload(
    request: operations.CancelUploadRequest,
    options?: RequestOptions,
  ): Promise<components.Upload> {
    return unwrapAsync(uploadsCancelUpload(
      this,
      request,
      options,
    ));
  }
}
