/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRunRequest = {
  /**
   * The ID of the [thread](/docs/api-reference/threads) that was run.
   */
  threadId: string;
  /**
   * The ID of the run to retrieve.
   */
  runId: string;
};

/** @internal */
export const GetRunRequest$inboundSchema: z.ZodType<
  GetRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  thread_id: z.string(),
  run_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "thread_id": "threadId",
    "run_id": "runId",
  });
});

/** @internal */
export type GetRunRequest$Outbound = {
  thread_id: string;
  run_id: string;
};

/** @internal */
export const GetRunRequest$outboundSchema: z.ZodType<
  GetRunRequest$Outbound,
  z.ZodTypeDef,
  GetRunRequest
> = z.object({
  threadId: z.string(),
  runId: z.string(),
}).transform((v) => {
  return remap$(v, {
    threadId: "thread_id",
    runId: "run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRunRequest$ {
  /** @deprecated use `GetRunRequest$inboundSchema` instead. */
  export const inboundSchema = GetRunRequest$inboundSchema;
  /** @deprecated use `GetRunRequest$outboundSchema` instead. */
  export const outboundSchema = GetRunRequest$outboundSchema;
  /** @deprecated use `GetRunRequest$Outbound` instead. */
  export type Outbound = GetRunRequest$Outbound;
}

export function getRunRequestToJSON(getRunRequest: GetRunRequest): string {
  return JSON.stringify(GetRunRequest$outboundSchema.parse(getRunRequest));
}

export function getRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRunRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRunRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRunRequest' from JSON`,
  );
}
