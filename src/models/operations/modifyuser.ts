/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModifyUserRequest = {
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The new user role to modify. This must be one of `owner` or `member`.
   */
  userRoleUpdateRequest: components.UserRoleUpdateRequest;
};

/** @internal */
export const ModifyUserRequest$inboundSchema: z.ZodType<
  ModifyUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user_id: z.string(),
  UserRoleUpdateRequest: components.UserRoleUpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "user_id": "userId",
    "UserRoleUpdateRequest": "userRoleUpdateRequest",
  });
});

/** @internal */
export type ModifyUserRequest$Outbound = {
  user_id: string;
  UserRoleUpdateRequest: components.UserRoleUpdateRequest$Outbound;
};

/** @internal */
export const ModifyUserRequest$outboundSchema: z.ZodType<
  ModifyUserRequest$Outbound,
  z.ZodTypeDef,
  ModifyUserRequest
> = z.object({
  userId: z.string(),
  userRoleUpdateRequest: components.UserRoleUpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    userId: "user_id",
    userRoleUpdateRequest: "UserRoleUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyUserRequest$ {
  /** @deprecated use `ModifyUserRequest$inboundSchema` instead. */
  export const inboundSchema = ModifyUserRequest$inboundSchema;
  /** @deprecated use `ModifyUserRequest$outboundSchema` instead. */
  export const outboundSchema = ModifyUserRequest$outboundSchema;
  /** @deprecated use `ModifyUserRequest$Outbound` instead. */
  export type Outbound = ModifyUserRequest$Outbound;
}

export function modifyUserRequestToJSON(
  modifyUserRequest: ModifyUserRequest,
): string {
  return JSON.stringify(
    ModifyUserRequest$outboundSchema.parse(modifyUserRequest),
  );
}

export function modifyUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModifyUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModifyUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModifyUserRequest' from JSON`,
  );
}
