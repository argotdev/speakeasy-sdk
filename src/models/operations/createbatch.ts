/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
 */
export const Endpoint = {
  RootV1ChatCompletions: "/v1/chat/completions",
  RootV1Embeddings: "/v1/embeddings",
  RootV1Completions: "/v1/completions",
} as const;
/**
 * The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
 */
export type Endpoint = ClosedEnum<typeof Endpoint>;

/**
 * The time frame within which the batch should be processed. Currently only `24h` is supported.
 */
export const CompletionWindow = {
  TwentyFourh: "24h",
} as const;
/**
 * The time frame within which the batch should be processed. Currently only `24h` is supported.
 */
export type CompletionWindow = ClosedEnum<typeof CompletionWindow>;

export type CreateBatchRequestBody = {
  /**
   * The ID of an uploaded file that contains requests for the new batch.
   *
   * @remarks
   *
   * See [upload file](/docs/api-reference/files/create) for how to upload a file.
   *
   * Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 100 MB in size.
   */
  inputFileId: string;
  /**
   * The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
   */
  endpoint: Endpoint;
  /**
   * The time frame within which the batch should be processed. Currently only `24h` is supported.
   */
  completionWindow: CompletionWindow;
  /**
   * Optional custom metadata for the batch.
   */
  metadata?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const Endpoint$inboundSchema: z.ZodNativeEnum<typeof Endpoint> = z
  .nativeEnum(Endpoint);

/** @internal */
export const Endpoint$outboundSchema: z.ZodNativeEnum<typeof Endpoint> =
  Endpoint$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Endpoint$ {
  /** @deprecated use `Endpoint$inboundSchema` instead. */
  export const inboundSchema = Endpoint$inboundSchema;
  /** @deprecated use `Endpoint$outboundSchema` instead. */
  export const outboundSchema = Endpoint$outboundSchema;
}

/** @internal */
export const CompletionWindow$inboundSchema: z.ZodNativeEnum<
  typeof CompletionWindow
> = z.nativeEnum(CompletionWindow);

/** @internal */
export const CompletionWindow$outboundSchema: z.ZodNativeEnum<
  typeof CompletionWindow
> = CompletionWindow$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionWindow$ {
  /** @deprecated use `CompletionWindow$inboundSchema` instead. */
  export const inboundSchema = CompletionWindow$inboundSchema;
  /** @deprecated use `CompletionWindow$outboundSchema` instead. */
  export const outboundSchema = CompletionWindow$outboundSchema;
}

/** @internal */
export const CreateBatchRequestBody$inboundSchema: z.ZodType<
  CreateBatchRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  input_file_id: z.string(),
  endpoint: Endpoint$inboundSchema,
  completion_window: CompletionWindow$inboundSchema,
  metadata: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "input_file_id": "inputFileId",
    "completion_window": "completionWindow",
  });
});

/** @internal */
export type CreateBatchRequestBody$Outbound = {
  input_file_id: string;
  endpoint: string;
  completion_window: string;
  metadata?: { [k: string]: string } | null | undefined;
};

/** @internal */
export const CreateBatchRequestBody$outboundSchema: z.ZodType<
  CreateBatchRequestBody$Outbound,
  z.ZodTypeDef,
  CreateBatchRequestBody
> = z.object({
  inputFileId: z.string(),
  endpoint: Endpoint$outboundSchema,
  completionWindow: CompletionWindow$outboundSchema,
  metadata: z.nullable(z.record(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    inputFileId: "input_file_id",
    completionWindow: "completion_window",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateBatchRequestBody$ {
  /** @deprecated use `CreateBatchRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateBatchRequestBody$inboundSchema;
  /** @deprecated use `CreateBatchRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateBatchRequestBody$outboundSchema;
  /** @deprecated use `CreateBatchRequestBody$Outbound` instead. */
  export type Outbound = CreateBatchRequestBody$Outbound;
}

export function createBatchRequestBodyToJSON(
  createBatchRequestBody: CreateBatchRequestBody,
): string {
  return JSON.stringify(
    CreateBatchRequestBody$outboundSchema.parse(createBatchRequestBody),
  );
}

export function createBatchRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateBatchRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateBatchRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateBatchRequestBody' from JSON`,
  );
}
