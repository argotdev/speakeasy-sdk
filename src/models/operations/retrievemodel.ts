/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveModelRequest = {
  /**
   * The ID of the model to use for this request
   */
  model: string;
};

/** @internal */
export const RetrieveModelRequest$inboundSchema: z.ZodType<
  RetrieveModelRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
});

/** @internal */
export type RetrieveModelRequest$Outbound = {
  model: string;
};

/** @internal */
export const RetrieveModelRequest$outboundSchema: z.ZodType<
  RetrieveModelRequest$Outbound,
  z.ZodTypeDef,
  RetrieveModelRequest
> = z.object({
  model: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveModelRequest$ {
  /** @deprecated use `RetrieveModelRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveModelRequest$inboundSchema;
  /** @deprecated use `RetrieveModelRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveModelRequest$outboundSchema;
  /** @deprecated use `RetrieveModelRequest$Outbound` instead. */
  export type Outbound = RetrieveModelRequest$Outbound;
}

export function retrieveModelRequestToJSON(
  retrieveModelRequest: RetrieveModelRequest,
): string {
  return JSON.stringify(
    RetrieveModelRequest$outboundSchema.parse(retrieveModelRequest),
  );
}

export function retrieveModelRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveModelRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveModelRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveModelRequest' from JSON`,
  );
}
