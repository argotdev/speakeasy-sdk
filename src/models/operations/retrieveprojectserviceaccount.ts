/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveProjectServiceAccountRequest = {
  /**
   * The ID of the project.
   */
  projectId: string;
  /**
   * The ID of the service account.
   */
  serviceAccountId: string;
};

/** @internal */
export const RetrieveProjectServiceAccountRequest$inboundSchema: z.ZodType<
  RetrieveProjectServiceAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  service_account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "service_account_id": "serviceAccountId",
  });
});

/** @internal */
export type RetrieveProjectServiceAccountRequest$Outbound = {
  project_id: string;
  service_account_id: string;
};

/** @internal */
export const RetrieveProjectServiceAccountRequest$outboundSchema: z.ZodType<
  RetrieveProjectServiceAccountRequest$Outbound,
  z.ZodTypeDef,
  RetrieveProjectServiceAccountRequest
> = z.object({
  projectId: z.string(),
  serviceAccountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    serviceAccountId: "service_account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveProjectServiceAccountRequest$ {
  /** @deprecated use `RetrieveProjectServiceAccountRequest$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveProjectServiceAccountRequest$inboundSchema;
  /** @deprecated use `RetrieveProjectServiceAccountRequest$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveProjectServiceAccountRequest$outboundSchema;
  /** @deprecated use `RetrieveProjectServiceAccountRequest$Outbound` instead. */
  export type Outbound = RetrieveProjectServiceAccountRequest$Outbound;
}

export function retrieveProjectServiceAccountRequestToJSON(
  retrieveProjectServiceAccountRequest: RetrieveProjectServiceAccountRequest,
): string {
  return JSON.stringify(
    RetrieveProjectServiceAccountRequest$outboundSchema.parse(
      retrieveProjectServiceAccountRequest,
    ),
  );
}

export function retrieveProjectServiceAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveProjectServiceAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveProjectServiceAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveProjectServiceAccountRequest' from JSON`,
  );
}
