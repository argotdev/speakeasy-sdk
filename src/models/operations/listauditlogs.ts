/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Return only events whose `effective_at` (Unix seconds) is in this range.
 */
export type EffectiveAt = {
  /**
   * Return only events whose `effective_at` (Unix seconds) is greater than this value.
   */
  gt?: number | undefined;
  /**
   * Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
   */
  gte?: number | undefined;
  /**
   * Return only events whose `effective_at` (Unix seconds) is less than this value.
   */
  lt?: number | undefined;
  /**
   * Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
   */
  lte?: number | undefined;
};

export type ListAuditLogsRequest = {
  /**
   * Return only events whose `effective_at` (Unix seconds) is in this range.
   */
  effectiveAt?: EffectiveAt | undefined;
  /**
   * Return only events for these projects.
   */
  projectIds?: Array<string> | undefined;
  /**
   * Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
   */
  eventTypes?: Array<components.AuditLogEventType> | undefined;
  /**
   * Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
   */
  actorIds?: Array<string> | undefined;
  /**
   * Return only events performed by users with these emails.
   */
  actorEmails?: Array<string> | undefined;
  /**
   * Return only events performed on these targets. For example, a project ID updated.
   */
  resourceIds?: Array<string> | undefined;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
   *
   * @remarks
   */
  limit?: number | undefined;
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
   *
   * @remarks
   */
  after?: string | undefined;
  /**
   * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
   *
   * @remarks
   */
  before?: string | undefined;
};

/** @internal */
export const EffectiveAt$inboundSchema: z.ZodType<
  EffectiveAt,
  z.ZodTypeDef,
  unknown
> = z.object({
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
});

/** @internal */
export type EffectiveAt$Outbound = {
  gt?: number | undefined;
  gte?: number | undefined;
  lt?: number | undefined;
  lte?: number | undefined;
};

/** @internal */
export const EffectiveAt$outboundSchema: z.ZodType<
  EffectiveAt$Outbound,
  z.ZodTypeDef,
  EffectiveAt
> = z.object({
  gt: z.number().int().optional(),
  gte: z.number().int().optional(),
  lt: z.number().int().optional(),
  lte: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EffectiveAt$ {
  /** @deprecated use `EffectiveAt$inboundSchema` instead. */
  export const inboundSchema = EffectiveAt$inboundSchema;
  /** @deprecated use `EffectiveAt$outboundSchema` instead. */
  export const outboundSchema = EffectiveAt$outboundSchema;
  /** @deprecated use `EffectiveAt$Outbound` instead. */
  export type Outbound = EffectiveAt$Outbound;
}

export function effectiveAtToJSON(effectiveAt: EffectiveAt): string {
  return JSON.stringify(EffectiveAt$outboundSchema.parse(effectiveAt));
}

export function effectiveAtFromJSON(
  jsonString: string,
): SafeParseResult<EffectiveAt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EffectiveAt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EffectiveAt' from JSON`,
  );
}

/** @internal */
export const ListAuditLogsRequest$inboundSchema: z.ZodType<
  ListAuditLogsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  effective_at: z.lazy(() => EffectiveAt$inboundSchema).optional(),
  "project_ids[]": z.array(z.string()).optional(),
  "event_types[]": z.array(components.AuditLogEventType$inboundSchema)
    .optional(),
  "actor_ids[]": z.array(z.string()).optional(),
  "actor_emails[]": z.array(z.string()).optional(),
  "resource_ids[]": z.array(z.string()).optional(),
  limit: z.number().int().default(20),
  after: z.string().optional(),
  before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_at": "effectiveAt",
    "project_ids[]": "projectIds",
    "event_types[]": "eventTypes",
    "actor_ids[]": "actorIds",
    "actor_emails[]": "actorEmails",
    "resource_ids[]": "resourceIds",
  });
});

/** @internal */
export type ListAuditLogsRequest$Outbound = {
  effective_at?: EffectiveAt$Outbound | undefined;
  "project_ids[]"?: Array<string> | undefined;
  "event_types[]"?: Array<string> | undefined;
  "actor_ids[]"?: Array<string> | undefined;
  "actor_emails[]"?: Array<string> | undefined;
  "resource_ids[]"?: Array<string> | undefined;
  limit: number;
  after?: string | undefined;
  before?: string | undefined;
};

/** @internal */
export const ListAuditLogsRequest$outboundSchema: z.ZodType<
  ListAuditLogsRequest$Outbound,
  z.ZodTypeDef,
  ListAuditLogsRequest
> = z.object({
  effectiveAt: z.lazy(() => EffectiveAt$outboundSchema).optional(),
  projectIds: z.array(z.string()).optional(),
  eventTypes: z.array(components.AuditLogEventType$outboundSchema).optional(),
  actorIds: z.array(z.string()).optional(),
  actorEmails: z.array(z.string()).optional(),
  resourceIds: z.array(z.string()).optional(),
  limit: z.number().int().default(20),
  after: z.string().optional(),
  before: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveAt: "effective_at",
    projectIds: "project_ids[]",
    eventTypes: "event_types[]",
    actorIds: "actor_ids[]",
    actorEmails: "actor_emails[]",
    resourceIds: "resource_ids[]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAuditLogsRequest$ {
  /** @deprecated use `ListAuditLogsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAuditLogsRequest$inboundSchema;
  /** @deprecated use `ListAuditLogsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAuditLogsRequest$outboundSchema;
  /** @deprecated use `ListAuditLogsRequest$Outbound` instead. */
  export type Outbound = ListAuditLogsRequest$Outbound;
}

export function listAuditLogsRequestToJSON(
  listAuditLogsRequest: ListAuditLogsRequest,
): string {
  return JSON.stringify(
    ListAuditLogsRequest$outboundSchema.parse(listAuditLogsRequest),
  );
}

export function listAuditLogsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAuditLogsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAuditLogsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAuditLogsRequest' from JSON`,
  );
}
