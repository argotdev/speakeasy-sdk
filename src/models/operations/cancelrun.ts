/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelRunRequest = {
  /**
   * The ID of the thread to which this run belongs.
   */
  threadId: string;
  /**
   * The ID of the run to cancel.
   */
  runId: string;
};

/** @internal */
export const CancelRunRequest$inboundSchema: z.ZodType<
  CancelRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  thread_id: z.string(),
  run_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "thread_id": "threadId",
    "run_id": "runId",
  });
});

/** @internal */
export type CancelRunRequest$Outbound = {
  thread_id: string;
  run_id: string;
};

/** @internal */
export const CancelRunRequest$outboundSchema: z.ZodType<
  CancelRunRequest$Outbound,
  z.ZodTypeDef,
  CancelRunRequest
> = z.object({
  threadId: z.string(),
  runId: z.string(),
}).transform((v) => {
  return remap$(v, {
    threadId: "thread_id",
    runId: "run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelRunRequest$ {
  /** @deprecated use `CancelRunRequest$inboundSchema` instead. */
  export const inboundSchema = CancelRunRequest$inboundSchema;
  /** @deprecated use `CancelRunRequest$outboundSchema` instead. */
  export const outboundSchema = CancelRunRequest$outboundSchema;
  /** @deprecated use `CancelRunRequest$Outbound` instead. */
  export type Outbound = CancelRunRequest$Outbound;
}

export function cancelRunRequestToJSON(
  cancelRunRequest: CancelRunRequest,
): string {
  return JSON.stringify(
    CancelRunRequest$outboundSchema.parse(cancelRunRequest),
  );
}

export function cancelRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelRunRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelRunRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelRunRequest' from JSON`,
  );
}
