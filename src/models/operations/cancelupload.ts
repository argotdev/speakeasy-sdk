/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CancelUploadRequest = {
  /**
   * The ID of the Upload.
   *
   * @remarks
   */
  uploadId: string;
};

/** @internal */
export const CancelUploadRequest$inboundSchema: z.ZodType<
  CancelUploadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  upload_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "upload_id": "uploadId",
  });
});

/** @internal */
export type CancelUploadRequest$Outbound = {
  upload_id: string;
};

/** @internal */
export const CancelUploadRequest$outboundSchema: z.ZodType<
  CancelUploadRequest$Outbound,
  z.ZodTypeDef,
  CancelUploadRequest
> = z.object({
  uploadId: z.string(),
}).transform((v) => {
  return remap$(v, {
    uploadId: "upload_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelUploadRequest$ {
  /** @deprecated use `CancelUploadRequest$inboundSchema` instead. */
  export const inboundSchema = CancelUploadRequest$inboundSchema;
  /** @deprecated use `CancelUploadRequest$outboundSchema` instead. */
  export const outboundSchema = CancelUploadRequest$outboundSchema;
  /** @deprecated use `CancelUploadRequest$Outbound` instead. */
  export type Outbound = CancelUploadRequest$Outbound;
}

export function cancelUploadRequestToJSON(
  cancelUploadRequest: CancelUploadRequest,
): string {
  return JSON.stringify(
    CancelUploadRequest$outboundSchema.parse(cancelUploadRequest),
  );
}

export function cancelUploadRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelUploadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelUploadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelUploadRequest' from JSON`,
  );
}
