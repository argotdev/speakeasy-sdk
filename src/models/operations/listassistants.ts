/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
 *
 * @remarks
 */
export const Order = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
 *
 * @remarks
 */
export type Order = ClosedEnum<typeof Order>;

export type ListAssistantsRequest = {
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
   *
   * @remarks
   */
  limit?: number | undefined;
  /**
   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
   *
   * @remarks
   */
  order?: Order | undefined;
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
   *
   * @remarks
   */
  after?: string | undefined;
  /**
   * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
   *
   * @remarks
   */
  before?: string | undefined;
};

/** @internal */
export const Order$inboundSchema: z.ZodNativeEnum<typeof Order> = z.nativeEnum(
  Order,
);

/** @internal */
export const Order$outboundSchema: z.ZodNativeEnum<typeof Order> =
  Order$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Order$ {
  /** @deprecated use `Order$inboundSchema` instead. */
  export const inboundSchema = Order$inboundSchema;
  /** @deprecated use `Order$outboundSchema` instead. */
  export const outboundSchema = Order$outboundSchema;
}

/** @internal */
export const ListAssistantsRequest$inboundSchema: z.ZodType<
  ListAssistantsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(20),
  order: Order$inboundSchema.default("desc"),
  after: z.string().optional(),
  before: z.string().optional(),
});

/** @internal */
export type ListAssistantsRequest$Outbound = {
  limit: number;
  order: string;
  after?: string | undefined;
  before?: string | undefined;
};

/** @internal */
export const ListAssistantsRequest$outboundSchema: z.ZodType<
  ListAssistantsRequest$Outbound,
  z.ZodTypeDef,
  ListAssistantsRequest
> = z.object({
  limit: z.number().int().default(20),
  order: Order$outboundSchema.default("desc"),
  after: z.string().optional(),
  before: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAssistantsRequest$ {
  /** @deprecated use `ListAssistantsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAssistantsRequest$inboundSchema;
  /** @deprecated use `ListAssistantsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAssistantsRequest$outboundSchema;
  /** @deprecated use `ListAssistantsRequest$Outbound` instead. */
  export type Outbound = ListAssistantsRequest$Outbound;
}

export function listAssistantsRequestToJSON(
  listAssistantsRequest: ListAssistantsRequest,
): string {
  return JSON.stringify(
    ListAssistantsRequest$outboundSchema.parse(listAssistantsRequest),
  );
}

export function listAssistantsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAssistantsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAssistantsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAssistantsRequest' from JSON`,
  );
}
