/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteAssistantRequest = {
  /**
   * The ID of the assistant to delete.
   */
  assistantId: string;
};

/** @internal */
export const DeleteAssistantRequest$inboundSchema: z.ZodType<
  DeleteAssistantRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assistant_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "assistant_id": "assistantId",
  });
});

/** @internal */
export type DeleteAssistantRequest$Outbound = {
  assistant_id: string;
};

/** @internal */
export const DeleteAssistantRequest$outboundSchema: z.ZodType<
  DeleteAssistantRequest$Outbound,
  z.ZodTypeDef,
  DeleteAssistantRequest
> = z.object({
  assistantId: z.string(),
}).transform((v) => {
  return remap$(v, {
    assistantId: "assistant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteAssistantRequest$ {
  /** @deprecated use `DeleteAssistantRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteAssistantRequest$inboundSchema;
  /** @deprecated use `DeleteAssistantRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteAssistantRequest$outboundSchema;
  /** @deprecated use `DeleteAssistantRequest$Outbound` instead. */
  export type Outbound = DeleteAssistantRequest$Outbound;
}

export function deleteAssistantRequestToJSON(
  deleteAssistantRequest: DeleteAssistantRequest,
): string {
  return JSON.stringify(
    DeleteAssistantRequest$outboundSchema.parse(deleteAssistantRequest),
  );
}

export function deleteAssistantRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteAssistantRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteAssistantRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteAssistantRequest' from JSON`,
  );
}
