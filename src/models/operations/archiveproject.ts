/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ArchiveProjectRequest = {
  /**
   * The ID of the project.
   */
  projectId: string;
};

/** @internal */
export const ArchiveProjectRequest$inboundSchema: z.ZodType<
  ArchiveProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type ArchiveProjectRequest$Outbound = {
  project_id: string;
};

/** @internal */
export const ArchiveProjectRequest$outboundSchema: z.ZodType<
  ArchiveProjectRequest$Outbound,
  z.ZodTypeDef,
  ArchiveProjectRequest
> = z.object({
  projectId: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ArchiveProjectRequest$ {
  /** @deprecated use `ArchiveProjectRequest$inboundSchema` instead. */
  export const inboundSchema = ArchiveProjectRequest$inboundSchema;
  /** @deprecated use `ArchiveProjectRequest$outboundSchema` instead. */
  export const outboundSchema = ArchiveProjectRequest$outboundSchema;
  /** @deprecated use `ArchiveProjectRequest$Outbound` instead. */
  export type Outbound = ArchiveProjectRequest$Outbound;
}

export function archiveProjectRequestToJSON(
  archiveProjectRequest: ArchiveProjectRequest,
): string {
  return JSON.stringify(
    ArchiveProjectRequest$outboundSchema.parse(archiveProjectRequest),
  );
}

export function archiveProjectRequestFromJSON(
  jsonString: string,
): SafeParseResult<ArchiveProjectRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ArchiveProjectRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ArchiveProjectRequest' from JSON`,
  );
}
