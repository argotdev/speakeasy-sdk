/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModifyVectorStoreRequest = {
  /**
   * The ID of the vector store to modify.
   */
  vectorStoreId: string;
  updateVectorStoreRequest: components.UpdateVectorStoreRequest;
};

/** @internal */
export const ModifyVectorStoreRequest$inboundSchema: z.ZodType<
  ModifyVectorStoreRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_id: z.string(),
  UpdateVectorStoreRequest: components.UpdateVectorStoreRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "vector_store_id": "vectorStoreId",
    "UpdateVectorStoreRequest": "updateVectorStoreRequest",
  });
});

/** @internal */
export type ModifyVectorStoreRequest$Outbound = {
  vector_store_id: string;
  UpdateVectorStoreRequest: components.UpdateVectorStoreRequest$Outbound;
};

/** @internal */
export const ModifyVectorStoreRequest$outboundSchema: z.ZodType<
  ModifyVectorStoreRequest$Outbound,
  z.ZodTypeDef,
  ModifyVectorStoreRequest
> = z.object({
  vectorStoreId: z.string(),
  updateVectorStoreRequest: components.UpdateVectorStoreRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    vectorStoreId: "vector_store_id",
    updateVectorStoreRequest: "UpdateVectorStoreRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyVectorStoreRequest$ {
  /** @deprecated use `ModifyVectorStoreRequest$inboundSchema` instead. */
  export const inboundSchema = ModifyVectorStoreRequest$inboundSchema;
  /** @deprecated use `ModifyVectorStoreRequest$outboundSchema` instead. */
  export const outboundSchema = ModifyVectorStoreRequest$outboundSchema;
  /** @deprecated use `ModifyVectorStoreRequest$Outbound` instead. */
  export type Outbound = ModifyVectorStoreRequest$Outbound;
}

export function modifyVectorStoreRequestToJSON(
  modifyVectorStoreRequest: ModifyVectorStoreRequest,
): string {
  return JSON.stringify(
    ModifyVectorStoreRequest$outboundSchema.parse(modifyVectorStoreRequest),
  );
}

export function modifyVectorStoreRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModifyVectorStoreRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModifyVectorStoreRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModifyVectorStoreRequest' from JSON`,
  );
}
