/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveInviteRequest = {
  /**
   * The ID of the invite to retrieve.
   */
  inviteId: string;
};

/** @internal */
export const RetrieveInviteRequest$inboundSchema: z.ZodType<
  RetrieveInviteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  invite_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "invite_id": "inviteId",
  });
});

/** @internal */
export type RetrieveInviteRequest$Outbound = {
  invite_id: string;
};

/** @internal */
export const RetrieveInviteRequest$outboundSchema: z.ZodType<
  RetrieveInviteRequest$Outbound,
  z.ZodTypeDef,
  RetrieveInviteRequest
> = z.object({
  inviteId: z.string(),
}).transform((v) => {
  return remap$(v, {
    inviteId: "invite_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveInviteRequest$ {
  /** @deprecated use `RetrieveInviteRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveInviteRequest$inboundSchema;
  /** @deprecated use `RetrieveInviteRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveInviteRequest$outboundSchema;
  /** @deprecated use `RetrieveInviteRequest$Outbound` instead. */
  export type Outbound = RetrieveInviteRequest$Outbound;
}

export function retrieveInviteRequestToJSON(
  retrieveInviteRequest: RetrieveInviteRequest,
): string {
  return JSON.stringify(
    RetrieveInviteRequest$outboundSchema.parse(retrieveInviteRequest),
  );
}

export function retrieveInviteRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveInviteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveInviteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveInviteRequest' from JSON`,
  );
}
