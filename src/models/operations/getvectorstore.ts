/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetVectorStoreRequest = {
  /**
   * The ID of the vector store to retrieve.
   */
  vectorStoreId: string;
};

/** @internal */
export const GetVectorStoreRequest$inboundSchema: z.ZodType<
  GetVectorStoreRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_id": "vectorStoreId",
  });
});

/** @internal */
export type GetVectorStoreRequest$Outbound = {
  vector_store_id: string;
};

/** @internal */
export const GetVectorStoreRequest$outboundSchema: z.ZodType<
  GetVectorStoreRequest$Outbound,
  z.ZodTypeDef,
  GetVectorStoreRequest
> = z.object({
  vectorStoreId: z.string(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreId: "vector_store_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVectorStoreRequest$ {
  /** @deprecated use `GetVectorStoreRequest$inboundSchema` instead. */
  export const inboundSchema = GetVectorStoreRequest$inboundSchema;
  /** @deprecated use `GetVectorStoreRequest$outboundSchema` instead. */
  export const outboundSchema = GetVectorStoreRequest$outboundSchema;
  /** @deprecated use `GetVectorStoreRequest$Outbound` instead. */
  export type Outbound = GetVectorStoreRequest$Outbound;
}

export function getVectorStoreRequestToJSON(
  getVectorStoreRequest: GetVectorStoreRequest,
): string {
  return JSON.stringify(
    GetVectorStoreRequest$outboundSchema.parse(getVectorStoreRequest),
  );
}

export function getVectorStoreRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVectorStoreRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVectorStoreRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVectorStoreRequest' from JSON`,
  );
}
