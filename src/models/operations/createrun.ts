/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Include = {
  StepDetailsToolCallsWildcardFileSearchResultsWildcardContent:
    "step_details.tool_calls[*].file_search.results[*].content",
} as const;
export type Include = ClosedEnum<typeof Include>;

export type CreateRunRequest = {
  /**
   * The ID of the thread to run.
   */
  threadId: string;
  /**
   * A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.
   *
   * @remarks
   *
   * See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.
   */
  include?: Array<Include> | undefined;
  createRunRequest: components.CreateRunRequest;
};

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const CreateRunRequest$inboundSchema: z.ZodType<
  CreateRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  thread_id: z.string(),
  "include[]": z.array(Include$inboundSchema).optional(),
  CreateRunRequest: components.CreateRunRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "thread_id": "threadId",
    "include[]": "include",
    "CreateRunRequest": "createRunRequest",
  });
});

/** @internal */
export type CreateRunRequest$Outbound = {
  thread_id: string;
  "include[]"?: Array<string> | undefined;
  CreateRunRequest: components.CreateRunRequest$Outbound;
};

/** @internal */
export const CreateRunRequest$outboundSchema: z.ZodType<
  CreateRunRequest$Outbound,
  z.ZodTypeDef,
  CreateRunRequest
> = z.object({
  threadId: z.string(),
  include: z.array(Include$outboundSchema).optional(),
  createRunRequest: components.CreateRunRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    threadId: "thread_id",
    include: "include[]",
    createRunRequest: "CreateRunRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateRunRequest$ {
  /** @deprecated use `CreateRunRequest$inboundSchema` instead. */
  export const inboundSchema = CreateRunRequest$inboundSchema;
  /** @deprecated use `CreateRunRequest$outboundSchema` instead. */
  export const outboundSchema = CreateRunRequest$outboundSchema;
  /** @deprecated use `CreateRunRequest$Outbound` instead. */
  export type Outbound = CreateRunRequest$Outbound;
}

export function createRunRequestToJSON(
  createRunRequest: CreateRunRequest,
): string {
  return JSON.stringify(
    CreateRunRequest$outboundSchema.parse(createRunRequest),
  );
}

export function createRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateRunRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateRunRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateRunRequest' from JSON`,
  );
}
