/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
 *
 * @remarks
 */
export const ListVectorStoreFilesQueryParamOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
 *
 * @remarks
 */
export type ListVectorStoreFilesQueryParamOrder = ClosedEnum<
  typeof ListVectorStoreFilesQueryParamOrder
>;

/**
 * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
 */
export const Filter = {
  InProgress: "in_progress",
  Completed: "completed",
  Failed: "failed",
  Cancelled: "cancelled",
} as const;
/**
 * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
 */
export type Filter = ClosedEnum<typeof Filter>;

export type ListVectorStoreFilesRequest = {
  /**
   * The ID of the vector store that the files belong to.
   */
  vectorStoreId: string;
  /**
   * A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.
   *
   * @remarks
   */
  limit?: number | undefined;
  /**
   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.
   *
   * @remarks
   */
  order?: ListVectorStoreFilesQueryParamOrder | undefined;
  /**
   * A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.
   *
   * @remarks
   */
  after?: string | undefined;
  /**
   * A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.
   *
   * @remarks
   */
  before?: string | undefined;
  /**
   * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
   */
  filter?: Filter | undefined;
};

/** @internal */
export const ListVectorStoreFilesQueryParamOrder$inboundSchema: z.ZodNativeEnum<
  typeof ListVectorStoreFilesQueryParamOrder
> = z.nativeEnum(ListVectorStoreFilesQueryParamOrder);

/** @internal */
export const ListVectorStoreFilesQueryParamOrder$outboundSchema:
  z.ZodNativeEnum<typeof ListVectorStoreFilesQueryParamOrder> =
    ListVectorStoreFilesQueryParamOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVectorStoreFilesQueryParamOrder$ {
  /** @deprecated use `ListVectorStoreFilesQueryParamOrder$inboundSchema` instead. */
  export const inboundSchema =
    ListVectorStoreFilesQueryParamOrder$inboundSchema;
  /** @deprecated use `ListVectorStoreFilesQueryParamOrder$outboundSchema` instead. */
  export const outboundSchema =
    ListVectorStoreFilesQueryParamOrder$outboundSchema;
}

/** @internal */
export const Filter$inboundSchema: z.ZodNativeEnum<typeof Filter> = z
  .nativeEnum(Filter);

/** @internal */
export const Filter$outboundSchema: z.ZodNativeEnum<typeof Filter> =
  Filter$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
}

/** @internal */
export const ListVectorStoreFilesRequest$inboundSchema: z.ZodType<
  ListVectorStoreFilesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_id: z.string(),
  limit: z.number().int().default(20),
  order: ListVectorStoreFilesQueryParamOrder$inboundSchema.default("desc"),
  after: z.string().optional(),
  before: z.string().optional(),
  filter: Filter$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_id": "vectorStoreId",
  });
});

/** @internal */
export type ListVectorStoreFilesRequest$Outbound = {
  vector_store_id: string;
  limit: number;
  order: string;
  after?: string | undefined;
  before?: string | undefined;
  filter?: string | undefined;
};

/** @internal */
export const ListVectorStoreFilesRequest$outboundSchema: z.ZodType<
  ListVectorStoreFilesRequest$Outbound,
  z.ZodTypeDef,
  ListVectorStoreFilesRequest
> = z.object({
  vectorStoreId: z.string(),
  limit: z.number().int().default(20),
  order: ListVectorStoreFilesQueryParamOrder$outboundSchema.default("desc"),
  after: z.string().optional(),
  before: z.string().optional(),
  filter: Filter$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreId: "vector_store_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVectorStoreFilesRequest$ {
  /** @deprecated use `ListVectorStoreFilesRequest$inboundSchema` instead. */
  export const inboundSchema = ListVectorStoreFilesRequest$inboundSchema;
  /** @deprecated use `ListVectorStoreFilesRequest$outboundSchema` instead. */
  export const outboundSchema = ListVectorStoreFilesRequest$outboundSchema;
  /** @deprecated use `ListVectorStoreFilesRequest$Outbound` instead. */
  export type Outbound = ListVectorStoreFilesRequest$Outbound;
}
