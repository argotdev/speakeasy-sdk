/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ModifyProjectUserRequest = {
  /**
   * The ID of the project.
   */
  projectId: string;
  /**
   * The ID of the user.
   */
  userId: string;
  /**
   * The project user update request payload.
   */
  projectUserUpdateRequest: components.ProjectUserUpdateRequest;
};

/** @internal */
export const ModifyProjectUserRequest$inboundSchema: z.ZodType<
  ModifyProjectUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  user_id: z.string(),
  ProjectUserUpdateRequest: components.ProjectUserUpdateRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "user_id": "userId",
    "ProjectUserUpdateRequest": "projectUserUpdateRequest",
  });
});

/** @internal */
export type ModifyProjectUserRequest$Outbound = {
  project_id: string;
  user_id: string;
  ProjectUserUpdateRequest: components.ProjectUserUpdateRequest$Outbound;
};

/** @internal */
export const ModifyProjectUserRequest$outboundSchema: z.ZodType<
  ModifyProjectUserRequest$Outbound,
  z.ZodTypeDef,
  ModifyProjectUserRequest
> = z.object({
  projectId: z.string(),
  userId: z.string(),
  projectUserUpdateRequest: components.ProjectUserUpdateRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    userId: "user_id",
    projectUserUpdateRequest: "ProjectUserUpdateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyProjectUserRequest$ {
  /** @deprecated use `ModifyProjectUserRequest$inboundSchema` instead. */
  export const inboundSchema = ModifyProjectUserRequest$inboundSchema;
  /** @deprecated use `ModifyProjectUserRequest$outboundSchema` instead. */
  export const outboundSchema = ModifyProjectUserRequest$outboundSchema;
  /** @deprecated use `ModifyProjectUserRequest$Outbound` instead. */
  export type Outbound = ModifyProjectUserRequest$Outbound;
}

export function modifyProjectUserRequestToJSON(
  modifyProjectUserRequest: ModifyProjectUserRequest,
): string {
  return JSON.stringify(
    ModifyProjectUserRequest$outboundSchema.parse(modifyProjectUserRequest),
  );
}

export function modifyProjectUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<ModifyProjectUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModifyProjectUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModifyProjectUserRequest' from JSON`,
  );
}
