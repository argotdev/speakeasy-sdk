/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutoChunkingStrategyRequestParam,
  AutoChunkingStrategyRequestParam$inboundSchema,
  AutoChunkingStrategyRequestParam$Outbound,
  AutoChunkingStrategyRequestParam$outboundSchema,
} from "./autochunkingstrategyrequestparam.js";
import {
  StaticChunkingStrategyRequestParam,
  StaticChunkingStrategyRequestParam$inboundSchema,
  StaticChunkingStrategyRequestParam$Outbound,
  StaticChunkingStrategyRequestParam$outboundSchema,
} from "./staticchunkingstrategyrequestparam.js";

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
 */
export type ChunkingStrategyRequestParam =
  | AutoChunkingStrategyRequestParam
  | StaticChunkingStrategyRequestParam;

/** @internal */
export const ChunkingStrategyRequestParam$inboundSchema: z.ZodType<
  ChunkingStrategyRequestParam,
  z.ZodTypeDef,
  unknown
> = z.union([
  AutoChunkingStrategyRequestParam$inboundSchema,
  StaticChunkingStrategyRequestParam$inboundSchema,
]);

/** @internal */
export type ChunkingStrategyRequestParam$Outbound =
  | AutoChunkingStrategyRequestParam$Outbound
  | StaticChunkingStrategyRequestParam$Outbound;

/** @internal */
export const ChunkingStrategyRequestParam$outboundSchema: z.ZodType<
  ChunkingStrategyRequestParam$Outbound,
  z.ZodTypeDef,
  ChunkingStrategyRequestParam
> = z.union([
  AutoChunkingStrategyRequestParam$outboundSchema,
  StaticChunkingStrategyRequestParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChunkingStrategyRequestParam$ {
  /** @deprecated use `ChunkingStrategyRequestParam$inboundSchema` instead. */
  export const inboundSchema = ChunkingStrategyRequestParam$inboundSchema;
  /** @deprecated use `ChunkingStrategyRequestParam$outboundSchema` instead. */
  export const outboundSchema = ChunkingStrategyRequestParam$outboundSchema;
  /** @deprecated use `ChunkingStrategyRequestParam$Outbound` instead. */
  export type Outbound = ChunkingStrategyRequestParam$Outbound;
}

export function chunkingStrategyRequestParamToJSON(
  chunkingStrategyRequestParam: ChunkingStrategyRequestParam,
): string {
  return JSON.stringify(
    ChunkingStrategyRequestParam$outboundSchema.parse(
      chunkingStrategyRequestParam,
    ),
  );
}

export function chunkingStrategyRequestParamFromJSON(
  jsonString: string,
): SafeParseResult<ChunkingStrategyRequestParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChunkingStrategyRequestParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChunkingStrategyRequestParam' from JSON`,
  );
}
