/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TranscriptionSegment,
  TranscriptionSegment$inboundSchema,
  TranscriptionSegment$Outbound,
  TranscriptionSegment$outboundSchema,
} from "./transcriptionsegment.js";
import {
  TranscriptionWord,
  TranscriptionWord$inboundSchema,
  TranscriptionWord$Outbound,
  TranscriptionWord$outboundSchema,
} from "./transcriptionword.js";

/**
 * Represents a verbose json transcription response returned by model, based on the provided input.
 */
export type CreateTranscriptionResponseVerboseJson = {
  /**
   * The language of the input audio.
   */
  language: string;
  /**
   * The duration of the input audio.
   */
  duration: number;
  /**
   * The transcribed text.
   */
  text: string;
  /**
   * Extracted words and their corresponding timestamps.
   */
  words?: Array<TranscriptionWord> | undefined;
  /**
   * Segments of the transcribed text and their corresponding details.
   */
  segments?: Array<TranscriptionSegment> | undefined;
};

/** @internal */
export const CreateTranscriptionResponseVerboseJson$inboundSchema: z.ZodType<
  CreateTranscriptionResponseVerboseJson,
  z.ZodTypeDef,
  unknown
> = z.object({
  language: z.string(),
  duration: z.number(),
  text: z.string(),
  words: z.array(TranscriptionWord$inboundSchema).optional(),
  segments: z.array(TranscriptionSegment$inboundSchema).optional(),
});

/** @internal */
export type CreateTranscriptionResponseVerboseJson$Outbound = {
  language: string;
  duration: number;
  text: string;
  words?: Array<TranscriptionWord$Outbound> | undefined;
  segments?: Array<TranscriptionSegment$Outbound> | undefined;
};

/** @internal */
export const CreateTranscriptionResponseVerboseJson$outboundSchema: z.ZodType<
  CreateTranscriptionResponseVerboseJson$Outbound,
  z.ZodTypeDef,
  CreateTranscriptionResponseVerboseJson
> = z.object({
  language: z.string(),
  duration: z.number(),
  text: z.string(),
  words: z.array(TranscriptionWord$outboundSchema).optional(),
  segments: z.array(TranscriptionSegment$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTranscriptionResponseVerboseJson$ {
  /** @deprecated use `CreateTranscriptionResponseVerboseJson$inboundSchema` instead. */
  export const inboundSchema =
    CreateTranscriptionResponseVerboseJson$inboundSchema;
  /** @deprecated use `CreateTranscriptionResponseVerboseJson$outboundSchema` instead. */
  export const outboundSchema =
    CreateTranscriptionResponseVerboseJson$outboundSchema;
  /** @deprecated use `CreateTranscriptionResponseVerboseJson$Outbound` instead. */
  export type Outbound = CreateTranscriptionResponseVerboseJson$Outbound;
}

export function createTranscriptionResponseVerboseJsonToJSON(
  createTranscriptionResponseVerboseJson:
    CreateTranscriptionResponseVerboseJson,
): string {
  return JSON.stringify(
    CreateTranscriptionResponseVerboseJson$outboundSchema.parse(
      createTranscriptionResponseVerboseJson,
    ),
  );
}

export function createTranscriptionResponseVerboseJsonFromJSON(
  jsonString: string,
): SafeParseResult<CreateTranscriptionResponseVerboseJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateTranscriptionResponseVerboseJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTranscriptionResponseVerboseJson' from JSON`,
  );
}
