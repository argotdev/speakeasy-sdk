/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssistantsNamedToolChoice,
  AssistantsNamedToolChoice$inboundSchema,
  AssistantsNamedToolChoice$Outbound,
  AssistantsNamedToolChoice$outboundSchema,
} from "./assistantsnamedtoolchoice.js";

/**
 * `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
 *
 * @remarks
 */
export const AssistantsApiToolChoiceOption1 = {
  None: "none",
  Auto: "auto",
  Required: "required",
} as const;
/**
 * `none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.
 *
 * @remarks
 */
export type AssistantsApiToolChoiceOption1 = ClosedEnum<
  typeof AssistantsApiToolChoiceOption1
>;

/**
 * Controls which (if any) tool is called by the model.
 *
 * @remarks
 * `none` means the model will not call any tools and instead generates a message.
 * `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
 * `required` means the model must call one or more tools before responding to the user.
 * Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
 */
export type AssistantsApiToolChoiceOption =
  | AssistantsNamedToolChoice
  | AssistantsApiToolChoiceOption1;

/** @internal */
export const AssistantsApiToolChoiceOption1$inboundSchema: z.ZodNativeEnum<
  typeof AssistantsApiToolChoiceOption1
> = z.nativeEnum(AssistantsApiToolChoiceOption1);

/** @internal */
export const AssistantsApiToolChoiceOption1$outboundSchema: z.ZodNativeEnum<
  typeof AssistantsApiToolChoiceOption1
> = AssistantsApiToolChoiceOption1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantsApiToolChoiceOption1$ {
  /** @deprecated use `AssistantsApiToolChoiceOption1$inboundSchema` instead. */
  export const inboundSchema = AssistantsApiToolChoiceOption1$inboundSchema;
  /** @deprecated use `AssistantsApiToolChoiceOption1$outboundSchema` instead. */
  export const outboundSchema = AssistantsApiToolChoiceOption1$outboundSchema;
}

/** @internal */
export const AssistantsApiToolChoiceOption$inboundSchema: z.ZodType<
  AssistantsApiToolChoiceOption,
  z.ZodTypeDef,
  unknown
> = z.union([
  AssistantsNamedToolChoice$inboundSchema,
  AssistantsApiToolChoiceOption1$inboundSchema,
]);

/** @internal */
export type AssistantsApiToolChoiceOption$Outbound =
  | AssistantsNamedToolChoice$Outbound
  | string;

/** @internal */
export const AssistantsApiToolChoiceOption$outboundSchema: z.ZodType<
  AssistantsApiToolChoiceOption$Outbound,
  z.ZodTypeDef,
  AssistantsApiToolChoiceOption
> = z.union([
  AssistantsNamedToolChoice$outboundSchema,
  AssistantsApiToolChoiceOption1$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantsApiToolChoiceOption$ {
  /** @deprecated use `AssistantsApiToolChoiceOption$inboundSchema` instead. */
  export const inboundSchema = AssistantsApiToolChoiceOption$inboundSchema;
  /** @deprecated use `AssistantsApiToolChoiceOption$outboundSchema` instead. */
  export const outboundSchema = AssistantsApiToolChoiceOption$outboundSchema;
  /** @deprecated use `AssistantsApiToolChoiceOption$Outbound` instead. */
  export type Outbound = AssistantsApiToolChoiceOption$Outbound;
}

export function assistantsApiToolChoiceOptionToJSON(
  assistantsApiToolChoiceOption: AssistantsApiToolChoiceOption,
): string {
  return JSON.stringify(
    AssistantsApiToolChoiceOption$outboundSchema.parse(
      assistantsApiToolChoiceOption,
    ),
  );
}

export function assistantsApiToolChoiceOptionFromJSON(
  jsonString: string,
): SafeParseResult<AssistantsApiToolChoiceOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssistantsApiToolChoiceOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssistantsApiToolChoiceOption' from JSON`,
  );
}
