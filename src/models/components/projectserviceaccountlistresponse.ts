/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProjectServiceAccount,
  ProjectServiceAccount$inboundSchema,
  ProjectServiceAccount$Outbound,
  ProjectServiceAccount$outboundSchema,
} from "./projectserviceaccount.js";

export const ProjectServiceAccountListResponseObject = {
  List: "list",
} as const;
export type ProjectServiceAccountListResponseObject = ClosedEnum<
  typeof ProjectServiceAccountListResponseObject
>;

export type ProjectServiceAccountListResponse = {
  object: ProjectServiceAccountListResponseObject;
  data: Array<ProjectServiceAccount>;
  firstId: string;
  lastId: string;
  hasMore: boolean;
};

/** @internal */
export const ProjectServiceAccountListResponseObject$inboundSchema:
  z.ZodNativeEnum<typeof ProjectServiceAccountListResponseObject> = z
    .nativeEnum(ProjectServiceAccountListResponseObject);

/** @internal */
export const ProjectServiceAccountListResponseObject$outboundSchema:
  z.ZodNativeEnum<typeof ProjectServiceAccountListResponseObject> =
    ProjectServiceAccountListResponseObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectServiceAccountListResponseObject$ {
  /** @deprecated use `ProjectServiceAccountListResponseObject$inboundSchema` instead. */
  export const inboundSchema =
    ProjectServiceAccountListResponseObject$inboundSchema;
  /** @deprecated use `ProjectServiceAccountListResponseObject$outboundSchema` instead. */
  export const outboundSchema =
    ProjectServiceAccountListResponseObject$outboundSchema;
}

/** @internal */
export const ProjectServiceAccountListResponse$inboundSchema: z.ZodType<
  ProjectServiceAccountListResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ProjectServiceAccountListResponseObject$inboundSchema,
  data: z.array(ProjectServiceAccount$inboundSchema),
  first_id: z.string(),
  last_id: z.string(),
  has_more: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "first_id": "firstId",
    "last_id": "lastId",
    "has_more": "hasMore",
  });
});

/** @internal */
export type ProjectServiceAccountListResponse$Outbound = {
  object: string;
  data: Array<ProjectServiceAccount$Outbound>;
  first_id: string;
  last_id: string;
  has_more: boolean;
};

/** @internal */
export const ProjectServiceAccountListResponse$outboundSchema: z.ZodType<
  ProjectServiceAccountListResponse$Outbound,
  z.ZodTypeDef,
  ProjectServiceAccountListResponse
> = z.object({
  object: ProjectServiceAccountListResponseObject$outboundSchema,
  data: z.array(ProjectServiceAccount$outboundSchema),
  firstId: z.string(),
  lastId: z.string(),
  hasMore: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    firstId: "first_id",
    lastId: "last_id",
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectServiceAccountListResponse$ {
  /** @deprecated use `ProjectServiceAccountListResponse$inboundSchema` instead. */
  export const inboundSchema = ProjectServiceAccountListResponse$inboundSchema;
  /** @deprecated use `ProjectServiceAccountListResponse$outboundSchema` instead. */
  export const outboundSchema =
    ProjectServiceAccountListResponse$outboundSchema;
  /** @deprecated use `ProjectServiceAccountListResponse$Outbound` instead. */
  export type Outbound = ProjectServiceAccountListResponse$Outbound;
}

export function projectServiceAccountListResponseToJSON(
  projectServiceAccountListResponse: ProjectServiceAccountListResponse,
): string {
  return JSON.stringify(
    ProjectServiceAccountListResponse$outboundSchema.parse(
      projectServiceAccountListResponse,
    ),
  );
}

export function projectServiceAccountListResponseFromJSON(
  jsonString: string,
): SafeParseResult<ProjectServiceAccountListResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectServiceAccountListResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectServiceAccountListResponse' from JSON`,
  );
}
