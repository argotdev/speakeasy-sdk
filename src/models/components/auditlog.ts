/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  AuditLogActor,
  AuditLogActor$inboundSchema,
  AuditLogActor$Outbound,
  AuditLogActor$outboundSchema,
} from "./auditlogactor.js";
import {
  AuditLogEventType,
  AuditLogEventType$inboundSchema,
  AuditLogEventType$outboundSchema,
} from "./auditlogeventtype.js";

/**
 * The project that the action was scoped to. Absent for actions not scoped to projects.
 */
export type AuditLogProject = {
  /**
   * The project ID.
   */
  id?: string | undefined;
  /**
   * The project title.
   */
  name?: string | undefined;
};

/**
 * The payload used to create the API key.
 */
export type AuditLogData = {
  /**
   * A list of scopes allowed for the API key, e.g. `["api.model.request"]`
   */
  scopes?: Array<string> | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ApiKeyCreated = {
  /**
   * The tracking ID of the API key.
   */
  id?: string | undefined;
  /**
   * The payload used to create the API key.
   */
  data?: AuditLogData | undefined;
};

/**
 * The payload used to update the API key.
 */
export type ChangesRequested = {
  /**
   * A list of scopes allowed for the API key, e.g. `["api.model.request"]`
   */
  scopes?: Array<string> | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ApiKeyUpdated = {
  /**
   * The tracking ID of the API key.
   */
  id?: string | undefined;
  /**
   * The payload used to update the API key.
   */
  changesRequested?: ChangesRequested | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ApiKeyDeleted = {
  /**
   * The tracking ID of the API key.
   */
  id?: string | undefined;
};

/**
 * The payload used to create the invite.
 */
export type AuditLogInviteSentData = {
  /**
   * The email invited to the organization.
   */
  email?: string | undefined;
  /**
   * The role the email was invited to be. Is either `owner` or `member`.
   */
  role?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type InviteSent = {
  /**
   * The ID of the invite.
   */
  id?: string | undefined;
  /**
   * The payload used to create the invite.
   */
  data?: AuditLogInviteSentData | undefined;
};

/**
 * The details for events with this `type`.
 */
export type InviteAccepted = {
  /**
   * The ID of the invite.
   */
  id?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type InviteDeleted = {
  /**
   * The ID of the invite.
   */
  id?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type LoginFailed = {
  /**
   * The error code of the failure.
   */
  errorCode?: string | undefined;
  /**
   * The error message of the failure.
   */
  errorMessage?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type LogoutFailed = {
  /**
   * The error code of the failure.
   */
  errorCode?: string | undefined;
  /**
   * The error message of the failure.
   */
  errorMessage?: string | undefined;
};

export type Settings = {
  /**
   * Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
   */
  threadsUiVisibility?: string | undefined;
  /**
   * Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
   */
  usageDashboardVisibility?: string | undefined;
};

/**
 * The payload used to update the organization settings.
 */
export type AuditLogChangesRequested = {
  /**
   * The organization title.
   */
  title?: string | undefined;
  /**
   * The organization description.
   */
  description?: string | undefined;
  /**
   * The organization name.
   */
  name?: string | undefined;
  settings?: Settings | undefined;
};

/**
 * The details for events with this `type`.
 */
export type OrganizationUpdated = {
  /**
   * The organization ID.
   */
  id?: string | undefined;
  /**
   * The payload used to update the organization settings.
   */
  changesRequested?: AuditLogChangesRequested | undefined;
};

/**
 * The payload used to create the project.
 */
export type AuditLogProjectCreatedData = {
  /**
   * The project name.
   */
  name?: string | undefined;
  /**
   * The title of the project as seen on the dashboard.
   */
  title?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ProjectCreated = {
  /**
   * The project ID.
   */
  id?: string | undefined;
  /**
   * The payload used to create the project.
   */
  data?: AuditLogProjectCreatedData | undefined;
};

/**
 * The payload used to update the project.
 */
export type AuditLogProjectUpdatedChangesRequested = {
  /**
   * The title of the project as seen on the dashboard.
   */
  title?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ProjectUpdated = {
  /**
   * The project ID.
   */
  id?: string | undefined;
  /**
   * The payload used to update the project.
   */
  changesRequested?: AuditLogProjectUpdatedChangesRequested | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ProjectArchived = {
  /**
   * The project ID.
   */
  id?: string | undefined;
};

/**
 * The payload used to create the service account.
 */
export type AuditLogServiceAccountCreatedData = {
  /**
   * The role of the service account. Is either `owner` or `member`.
   */
  role?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ServiceAccountCreated = {
  /**
   * The service account ID.
   */
  id?: string | undefined;
  /**
   * The payload used to create the service account.
   */
  data?: AuditLogServiceAccountCreatedData | undefined;
};

/**
 * The payload used to updated the service account.
 */
export type AuditLogServiceAccountUpdatedChangesRequested = {
  /**
   * The role of the service account. Is either `owner` or `member`.
   */
  role?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ServiceAccountUpdated = {
  /**
   * The service account ID.
   */
  id?: string | undefined;
  /**
   * The payload used to updated the service account.
   */
  changesRequested?: AuditLogServiceAccountUpdatedChangesRequested | undefined;
};

/**
 * The details for events with this `type`.
 */
export type ServiceAccountDeleted = {
  /**
   * The service account ID.
   */
  id?: string | undefined;
};

/**
 * The payload used to add the user to the project.
 */
export type AuditLogUserAddedData = {
  /**
   * The role of the user. Is either `owner` or `member`.
   */
  role?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type UserAdded = {
  /**
   * The user ID.
   */
  id?: string | undefined;
  /**
   * The payload used to add the user to the project.
   */
  data?: AuditLogUserAddedData | undefined;
};

/**
 * The payload used to update the user.
 */
export type AuditLogUserUpdatedChangesRequested = {
  /**
   * The role of the user. Is either `owner` or `member`.
   */
  role?: string | undefined;
};

/**
 * The details for events with this `type`.
 */
export type UserUpdated = {
  /**
   * The project ID.
   */
  id?: string | undefined;
  /**
   * The payload used to update the user.
   */
  changesRequested?: AuditLogUserUpdatedChangesRequested | undefined;
};

/**
 * The details for events with this `type`.
 */
export type UserDeleted = {
  /**
   * The user ID.
   */
  id?: string | undefined;
};

/**
 * A log of a user action or configuration change within this organization.
 */
export type AuditLog = {
  /**
   * The ID of this log.
   */
  id: string;
  /**
   * The event type.
   */
  type: AuditLogEventType;
  /**
   * The Unix timestamp (in seconds) of the event.
   */
  effectiveAt: number;
  /**
   * The project that the action was scoped to. Absent for actions not scoped to projects.
   */
  project?: AuditLogProject | undefined;
  /**
   * The actor who performed the audit logged action.
   */
  actor: AuditLogActor;
  /**
   * The details for events with this `type`.
   */
  apiKeyCreated?: ApiKeyCreated | undefined;
  /**
   * The details for events with this `type`.
   */
  apiKeyUpdated?: ApiKeyUpdated | undefined;
  /**
   * The details for events with this `type`.
   */
  apiKeyDeleted?: ApiKeyDeleted | undefined;
  /**
   * The details for events with this `type`.
   */
  inviteSent?: InviteSent | undefined;
  /**
   * The details for events with this `type`.
   */
  inviteAccepted?: InviteAccepted | undefined;
  /**
   * The details for events with this `type`.
   */
  inviteDeleted?: InviteDeleted | undefined;
  /**
   * The details for events with this `type`.
   */
  loginFailed?: LoginFailed | undefined;
  /**
   * The details for events with this `type`.
   */
  logoutFailed?: LogoutFailed | undefined;
  /**
   * The details for events with this `type`.
   */
  organizationUpdated?: OrganizationUpdated | undefined;
  /**
   * The details for events with this `type`.
   */
  projectCreated?: ProjectCreated | undefined;
  /**
   * The details for events with this `type`.
   */
  projectUpdated?: ProjectUpdated | undefined;
  /**
   * The details for events with this `type`.
   */
  projectArchived?: ProjectArchived | undefined;
  /**
   * The details for events with this `type`.
   */
  serviceAccountCreated?: ServiceAccountCreated | undefined;
  /**
   * The details for events with this `type`.
   */
  serviceAccountUpdated?: ServiceAccountUpdated | undefined;
  /**
   * The details for events with this `type`.
   */
  serviceAccountDeleted?: ServiceAccountDeleted | undefined;
  /**
   * The details for events with this `type`.
   */
  userAdded?: UserAdded | undefined;
  /**
   * The details for events with this `type`.
   */
  userUpdated?: UserUpdated | undefined;
  /**
   * The details for events with this `type`.
   */
  userDeleted?: UserDeleted | undefined;
};

/** @internal */
export const AuditLogProject$inboundSchema: z.ZodType<
  AuditLogProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/** @internal */
export type AuditLogProject$Outbound = {
  id?: string | undefined;
  name?: string | undefined;
};

/** @internal */
export const AuditLogProject$outboundSchema: z.ZodType<
  AuditLogProject$Outbound,
  z.ZodTypeDef,
  AuditLogProject
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogProject$ {
  /** @deprecated use `AuditLogProject$inboundSchema` instead. */
  export const inboundSchema = AuditLogProject$inboundSchema;
  /** @deprecated use `AuditLogProject$outboundSchema` instead. */
  export const outboundSchema = AuditLogProject$outboundSchema;
  /** @deprecated use `AuditLogProject$Outbound` instead. */
  export type Outbound = AuditLogProject$Outbound;
}

/** @internal */
export const AuditLogData$inboundSchema: z.ZodType<
  AuditLogData,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type AuditLogData$Outbound = {
  scopes?: Array<string> | undefined;
};

/** @internal */
export const AuditLogData$outboundSchema: z.ZodType<
  AuditLogData$Outbound,
  z.ZodTypeDef,
  AuditLogData
> = z.object({
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogData$ {
  /** @deprecated use `AuditLogData$inboundSchema` instead. */
  export const inboundSchema = AuditLogData$inboundSchema;
  /** @deprecated use `AuditLogData$outboundSchema` instead. */
  export const outboundSchema = AuditLogData$outboundSchema;
  /** @deprecated use `AuditLogData$Outbound` instead. */
  export type Outbound = AuditLogData$Outbound;
}

/** @internal */
export const ApiKeyCreated$inboundSchema: z.ZodType<
  ApiKeyCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogData$inboundSchema).optional(),
});

/** @internal */
export type ApiKeyCreated$Outbound = {
  id?: string | undefined;
  data?: AuditLogData$Outbound | undefined;
};

/** @internal */
export const ApiKeyCreated$outboundSchema: z.ZodType<
  ApiKeyCreated$Outbound,
  z.ZodTypeDef,
  ApiKeyCreated
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyCreated$ {
  /** @deprecated use `ApiKeyCreated$inboundSchema` instead. */
  export const inboundSchema = ApiKeyCreated$inboundSchema;
  /** @deprecated use `ApiKeyCreated$outboundSchema` instead. */
  export const outboundSchema = ApiKeyCreated$outboundSchema;
  /** @deprecated use `ApiKeyCreated$Outbound` instead. */
  export type Outbound = ApiKeyCreated$Outbound;
}

/** @internal */
export const ChangesRequested$inboundSchema: z.ZodType<
  ChangesRequested,
  z.ZodTypeDef,
  unknown
> = z.object({
  scopes: z.array(z.string()).optional(),
});

/** @internal */
export type ChangesRequested$Outbound = {
  scopes?: Array<string> | undefined;
};

/** @internal */
export const ChangesRequested$outboundSchema: z.ZodType<
  ChangesRequested$Outbound,
  z.ZodTypeDef,
  ChangesRequested
> = z.object({
  scopes: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChangesRequested$ {
  /** @deprecated use `ChangesRequested$inboundSchema` instead. */
  export const inboundSchema = ChangesRequested$inboundSchema;
  /** @deprecated use `ChangesRequested$outboundSchema` instead. */
  export const outboundSchema = ChangesRequested$outboundSchema;
  /** @deprecated use `ChangesRequested$Outbound` instead. */
  export type Outbound = ChangesRequested$Outbound;
}

/** @internal */
export const ApiKeyUpdated$inboundSchema: z.ZodType<
  ApiKeyUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  changes_requested: z.lazy(() => ChangesRequested$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "changes_requested": "changesRequested",
  });
});

/** @internal */
export type ApiKeyUpdated$Outbound = {
  id?: string | undefined;
  changes_requested?: ChangesRequested$Outbound | undefined;
};

/** @internal */
export const ApiKeyUpdated$outboundSchema: z.ZodType<
  ApiKeyUpdated$Outbound,
  z.ZodTypeDef,
  ApiKeyUpdated
> = z.object({
  id: z.string().optional(),
  changesRequested: z.lazy(() => ChangesRequested$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    changesRequested: "changes_requested",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyUpdated$ {
  /** @deprecated use `ApiKeyUpdated$inboundSchema` instead. */
  export const inboundSchema = ApiKeyUpdated$inboundSchema;
  /** @deprecated use `ApiKeyUpdated$outboundSchema` instead. */
  export const outboundSchema = ApiKeyUpdated$outboundSchema;
  /** @deprecated use `ApiKeyUpdated$Outbound` instead. */
  export type Outbound = ApiKeyUpdated$Outbound;
}

/** @internal */
export const ApiKeyDeleted$inboundSchema: z.ZodType<
  ApiKeyDeleted,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type ApiKeyDeleted$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const ApiKeyDeleted$outboundSchema: z.ZodType<
  ApiKeyDeleted$Outbound,
  z.ZodTypeDef,
  ApiKeyDeleted
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApiKeyDeleted$ {
  /** @deprecated use `ApiKeyDeleted$inboundSchema` instead. */
  export const inboundSchema = ApiKeyDeleted$inboundSchema;
  /** @deprecated use `ApiKeyDeleted$outboundSchema` instead. */
  export const outboundSchema = ApiKeyDeleted$outboundSchema;
  /** @deprecated use `ApiKeyDeleted$Outbound` instead. */
  export type Outbound = ApiKeyDeleted$Outbound;
}

/** @internal */
export const AuditLogInviteSentData$inboundSchema: z.ZodType<
  AuditLogInviteSentData,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  role: z.string().optional(),
});

/** @internal */
export type AuditLogInviteSentData$Outbound = {
  email?: string | undefined;
  role?: string | undefined;
};

/** @internal */
export const AuditLogInviteSentData$outboundSchema: z.ZodType<
  AuditLogInviteSentData$Outbound,
  z.ZodTypeDef,
  AuditLogInviteSentData
> = z.object({
  email: z.string().optional(),
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogInviteSentData$ {
  /** @deprecated use `AuditLogInviteSentData$inboundSchema` instead. */
  export const inboundSchema = AuditLogInviteSentData$inboundSchema;
  /** @deprecated use `AuditLogInviteSentData$outboundSchema` instead. */
  export const outboundSchema = AuditLogInviteSentData$outboundSchema;
  /** @deprecated use `AuditLogInviteSentData$Outbound` instead. */
  export type Outbound = AuditLogInviteSentData$Outbound;
}

/** @internal */
export const InviteSent$inboundSchema: z.ZodType<
  InviteSent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogInviteSentData$inboundSchema).optional(),
});

/** @internal */
export type InviteSent$Outbound = {
  id?: string | undefined;
  data?: AuditLogInviteSentData$Outbound | undefined;
};

/** @internal */
export const InviteSent$outboundSchema: z.ZodType<
  InviteSent$Outbound,
  z.ZodTypeDef,
  InviteSent
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogInviteSentData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteSent$ {
  /** @deprecated use `InviteSent$inboundSchema` instead. */
  export const inboundSchema = InviteSent$inboundSchema;
  /** @deprecated use `InviteSent$outboundSchema` instead. */
  export const outboundSchema = InviteSent$outboundSchema;
  /** @deprecated use `InviteSent$Outbound` instead. */
  export type Outbound = InviteSent$Outbound;
}

/** @internal */
export const InviteAccepted$inboundSchema: z.ZodType<
  InviteAccepted,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type InviteAccepted$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const InviteAccepted$outboundSchema: z.ZodType<
  InviteAccepted$Outbound,
  z.ZodTypeDef,
  InviteAccepted
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteAccepted$ {
  /** @deprecated use `InviteAccepted$inboundSchema` instead. */
  export const inboundSchema = InviteAccepted$inboundSchema;
  /** @deprecated use `InviteAccepted$outboundSchema` instead. */
  export const outboundSchema = InviteAccepted$outboundSchema;
  /** @deprecated use `InviteAccepted$Outbound` instead. */
  export type Outbound = InviteAccepted$Outbound;
}

/** @internal */
export const InviteDeleted$inboundSchema: z.ZodType<
  InviteDeleted,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type InviteDeleted$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const InviteDeleted$outboundSchema: z.ZodType<
  InviteDeleted$Outbound,
  z.ZodTypeDef,
  InviteDeleted
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteDeleted$ {
  /** @deprecated use `InviteDeleted$inboundSchema` instead. */
  export const inboundSchema = InviteDeleted$inboundSchema;
  /** @deprecated use `InviteDeleted$outboundSchema` instead. */
  export const outboundSchema = InviteDeleted$outboundSchema;
  /** @deprecated use `InviteDeleted$Outbound` instead. */
  export type Outbound = InviteDeleted$Outbound;
}

/** @internal */
export const LoginFailed$inboundSchema: z.ZodType<
  LoginFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  error_code: z.string().optional(),
  error_message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "error_code": "errorCode",
    "error_message": "errorMessage",
  });
});

/** @internal */
export type LoginFailed$Outbound = {
  error_code?: string | undefined;
  error_message?: string | undefined;
};

/** @internal */
export const LoginFailed$outboundSchema: z.ZodType<
  LoginFailed$Outbound,
  z.ZodTypeDef,
  LoginFailed
> = z.object({
  errorCode: z.string().optional(),
  errorMessage: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    errorCode: "error_code",
    errorMessage: "error_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LoginFailed$ {
  /** @deprecated use `LoginFailed$inboundSchema` instead. */
  export const inboundSchema = LoginFailed$inboundSchema;
  /** @deprecated use `LoginFailed$outboundSchema` instead. */
  export const outboundSchema = LoginFailed$outboundSchema;
  /** @deprecated use `LoginFailed$Outbound` instead. */
  export type Outbound = LoginFailed$Outbound;
}

/** @internal */
export const LogoutFailed$inboundSchema: z.ZodType<
  LogoutFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  error_code: z.string().optional(),
  error_message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "error_code": "errorCode",
    "error_message": "errorMessage",
  });
});

/** @internal */
export type LogoutFailed$Outbound = {
  error_code?: string | undefined;
  error_message?: string | undefined;
};

/** @internal */
export const LogoutFailed$outboundSchema: z.ZodType<
  LogoutFailed$Outbound,
  z.ZodTypeDef,
  LogoutFailed
> = z.object({
  errorCode: z.string().optional(),
  errorMessage: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    errorCode: "error_code",
    errorMessage: "error_message",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogoutFailed$ {
  /** @deprecated use `LogoutFailed$inboundSchema` instead. */
  export const inboundSchema = LogoutFailed$inboundSchema;
  /** @deprecated use `LogoutFailed$outboundSchema` instead. */
  export const outboundSchema = LogoutFailed$outboundSchema;
  /** @deprecated use `LogoutFailed$Outbound` instead. */
  export type Outbound = LogoutFailed$Outbound;
}

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  threads_ui_visibility: z.string().optional(),
  usage_dashboard_visibility: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "threads_ui_visibility": "threadsUiVisibility",
    "usage_dashboard_visibility": "usageDashboardVisibility",
  });
});

/** @internal */
export type Settings$Outbound = {
  threads_ui_visibility?: string | undefined;
  usage_dashboard_visibility?: string | undefined;
};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({
  threadsUiVisibility: z.string().optional(),
  usageDashboardVisibility: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    threadsUiVisibility: "threads_ui_visibility",
    usageDashboardVisibility: "usage_dashboard_visibility",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

/** @internal */
export const AuditLogChangesRequested$inboundSchema: z.ZodType<
  AuditLogChangesRequested,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  name: z.string().optional(),
  settings: z.lazy(() => Settings$inboundSchema).optional(),
});

/** @internal */
export type AuditLogChangesRequested$Outbound = {
  title?: string | undefined;
  description?: string | undefined;
  name?: string | undefined;
  settings?: Settings$Outbound | undefined;
};

/** @internal */
export const AuditLogChangesRequested$outboundSchema: z.ZodType<
  AuditLogChangesRequested$Outbound,
  z.ZodTypeDef,
  AuditLogChangesRequested
> = z.object({
  title: z.string().optional(),
  description: z.string().optional(),
  name: z.string().optional(),
  settings: z.lazy(() => Settings$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogChangesRequested$ {
  /** @deprecated use `AuditLogChangesRequested$inboundSchema` instead. */
  export const inboundSchema = AuditLogChangesRequested$inboundSchema;
  /** @deprecated use `AuditLogChangesRequested$outboundSchema` instead. */
  export const outboundSchema = AuditLogChangesRequested$outboundSchema;
  /** @deprecated use `AuditLogChangesRequested$Outbound` instead. */
  export type Outbound = AuditLogChangesRequested$Outbound;
}

/** @internal */
export const OrganizationUpdated$inboundSchema: z.ZodType<
  OrganizationUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  changes_requested: z.lazy(() => AuditLogChangesRequested$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "changes_requested": "changesRequested",
  });
});

/** @internal */
export type OrganizationUpdated$Outbound = {
  id?: string | undefined;
  changes_requested?: AuditLogChangesRequested$Outbound | undefined;
};

/** @internal */
export const OrganizationUpdated$outboundSchema: z.ZodType<
  OrganizationUpdated$Outbound,
  z.ZodTypeDef,
  OrganizationUpdated
> = z.object({
  id: z.string().optional(),
  changesRequested: z.lazy(() => AuditLogChangesRequested$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    changesRequested: "changes_requested",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationUpdated$ {
  /** @deprecated use `OrganizationUpdated$inboundSchema` instead. */
  export const inboundSchema = OrganizationUpdated$inboundSchema;
  /** @deprecated use `OrganizationUpdated$outboundSchema` instead. */
  export const outboundSchema = OrganizationUpdated$outboundSchema;
  /** @deprecated use `OrganizationUpdated$Outbound` instead. */
  export type Outbound = OrganizationUpdated$Outbound;
}

/** @internal */
export const AuditLogProjectCreatedData$inboundSchema: z.ZodType<
  AuditLogProjectCreatedData,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  title: z.string().optional(),
});

/** @internal */
export type AuditLogProjectCreatedData$Outbound = {
  name?: string | undefined;
  title?: string | undefined;
};

/** @internal */
export const AuditLogProjectCreatedData$outboundSchema: z.ZodType<
  AuditLogProjectCreatedData$Outbound,
  z.ZodTypeDef,
  AuditLogProjectCreatedData
> = z.object({
  name: z.string().optional(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogProjectCreatedData$ {
  /** @deprecated use `AuditLogProjectCreatedData$inboundSchema` instead. */
  export const inboundSchema = AuditLogProjectCreatedData$inboundSchema;
  /** @deprecated use `AuditLogProjectCreatedData$outboundSchema` instead. */
  export const outboundSchema = AuditLogProjectCreatedData$outboundSchema;
  /** @deprecated use `AuditLogProjectCreatedData$Outbound` instead. */
  export type Outbound = AuditLogProjectCreatedData$Outbound;
}

/** @internal */
export const ProjectCreated$inboundSchema: z.ZodType<
  ProjectCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogProjectCreatedData$inboundSchema).optional(),
});

/** @internal */
export type ProjectCreated$Outbound = {
  id?: string | undefined;
  data?: AuditLogProjectCreatedData$Outbound | undefined;
};

/** @internal */
export const ProjectCreated$outboundSchema: z.ZodType<
  ProjectCreated$Outbound,
  z.ZodTypeDef,
  ProjectCreated
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogProjectCreatedData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectCreated$ {
  /** @deprecated use `ProjectCreated$inboundSchema` instead. */
  export const inboundSchema = ProjectCreated$inboundSchema;
  /** @deprecated use `ProjectCreated$outboundSchema` instead. */
  export const outboundSchema = ProjectCreated$outboundSchema;
  /** @deprecated use `ProjectCreated$Outbound` instead. */
  export type Outbound = ProjectCreated$Outbound;
}

/** @internal */
export const AuditLogProjectUpdatedChangesRequested$inboundSchema: z.ZodType<
  AuditLogProjectUpdatedChangesRequested,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
});

/** @internal */
export type AuditLogProjectUpdatedChangesRequested$Outbound = {
  title?: string | undefined;
};

/** @internal */
export const AuditLogProjectUpdatedChangesRequested$outboundSchema: z.ZodType<
  AuditLogProjectUpdatedChangesRequested$Outbound,
  z.ZodTypeDef,
  AuditLogProjectUpdatedChangesRequested
> = z.object({
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogProjectUpdatedChangesRequested$ {
  /** @deprecated use `AuditLogProjectUpdatedChangesRequested$inboundSchema` instead. */
  export const inboundSchema =
    AuditLogProjectUpdatedChangesRequested$inboundSchema;
  /** @deprecated use `AuditLogProjectUpdatedChangesRequested$outboundSchema` instead. */
  export const outboundSchema =
    AuditLogProjectUpdatedChangesRequested$outboundSchema;
  /** @deprecated use `AuditLogProjectUpdatedChangesRequested$Outbound` instead. */
  export type Outbound = AuditLogProjectUpdatedChangesRequested$Outbound;
}

/** @internal */
export const ProjectUpdated$inboundSchema: z.ZodType<
  ProjectUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  changes_requested: z.lazy(() =>
    AuditLogProjectUpdatedChangesRequested$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "changes_requested": "changesRequested",
  });
});

/** @internal */
export type ProjectUpdated$Outbound = {
  id?: string | undefined;
  changes_requested?:
    | AuditLogProjectUpdatedChangesRequested$Outbound
    | undefined;
};

/** @internal */
export const ProjectUpdated$outboundSchema: z.ZodType<
  ProjectUpdated$Outbound,
  z.ZodTypeDef,
  ProjectUpdated
> = z.object({
  id: z.string().optional(),
  changesRequested: z.lazy(() =>
    AuditLogProjectUpdatedChangesRequested$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    changesRequested: "changes_requested",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectUpdated$ {
  /** @deprecated use `ProjectUpdated$inboundSchema` instead. */
  export const inboundSchema = ProjectUpdated$inboundSchema;
  /** @deprecated use `ProjectUpdated$outboundSchema` instead. */
  export const outboundSchema = ProjectUpdated$outboundSchema;
  /** @deprecated use `ProjectUpdated$Outbound` instead. */
  export type Outbound = ProjectUpdated$Outbound;
}

/** @internal */
export const ProjectArchived$inboundSchema: z.ZodType<
  ProjectArchived,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type ProjectArchived$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const ProjectArchived$outboundSchema: z.ZodType<
  ProjectArchived$Outbound,
  z.ZodTypeDef,
  ProjectArchived
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectArchived$ {
  /** @deprecated use `ProjectArchived$inboundSchema` instead. */
  export const inboundSchema = ProjectArchived$inboundSchema;
  /** @deprecated use `ProjectArchived$outboundSchema` instead. */
  export const outboundSchema = ProjectArchived$outboundSchema;
  /** @deprecated use `ProjectArchived$Outbound` instead. */
  export type Outbound = ProjectArchived$Outbound;
}

/** @internal */
export const AuditLogServiceAccountCreatedData$inboundSchema: z.ZodType<
  AuditLogServiceAccountCreatedData,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string().optional(),
});

/** @internal */
export type AuditLogServiceAccountCreatedData$Outbound = {
  role?: string | undefined;
};

/** @internal */
export const AuditLogServiceAccountCreatedData$outboundSchema: z.ZodType<
  AuditLogServiceAccountCreatedData$Outbound,
  z.ZodTypeDef,
  AuditLogServiceAccountCreatedData
> = z.object({
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogServiceAccountCreatedData$ {
  /** @deprecated use `AuditLogServiceAccountCreatedData$inboundSchema` instead. */
  export const inboundSchema = AuditLogServiceAccountCreatedData$inboundSchema;
  /** @deprecated use `AuditLogServiceAccountCreatedData$outboundSchema` instead. */
  export const outboundSchema =
    AuditLogServiceAccountCreatedData$outboundSchema;
  /** @deprecated use `AuditLogServiceAccountCreatedData$Outbound` instead. */
  export type Outbound = AuditLogServiceAccountCreatedData$Outbound;
}

/** @internal */
export const ServiceAccountCreated$inboundSchema: z.ZodType<
  ServiceAccountCreated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogServiceAccountCreatedData$inboundSchema)
    .optional(),
});

/** @internal */
export type ServiceAccountCreated$Outbound = {
  id?: string | undefined;
  data?: AuditLogServiceAccountCreatedData$Outbound | undefined;
};

/** @internal */
export const ServiceAccountCreated$outboundSchema: z.ZodType<
  ServiceAccountCreated$Outbound,
  z.ZodTypeDef,
  ServiceAccountCreated
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogServiceAccountCreatedData$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceAccountCreated$ {
  /** @deprecated use `ServiceAccountCreated$inboundSchema` instead. */
  export const inboundSchema = ServiceAccountCreated$inboundSchema;
  /** @deprecated use `ServiceAccountCreated$outboundSchema` instead. */
  export const outboundSchema = ServiceAccountCreated$outboundSchema;
  /** @deprecated use `ServiceAccountCreated$Outbound` instead. */
  export type Outbound = ServiceAccountCreated$Outbound;
}

/** @internal */
export const AuditLogServiceAccountUpdatedChangesRequested$inboundSchema:
  z.ZodType<
    AuditLogServiceAccountUpdatedChangesRequested,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: z.string().optional(),
  });

/** @internal */
export type AuditLogServiceAccountUpdatedChangesRequested$Outbound = {
  role?: string | undefined;
};

/** @internal */
export const AuditLogServiceAccountUpdatedChangesRequested$outboundSchema:
  z.ZodType<
    AuditLogServiceAccountUpdatedChangesRequested$Outbound,
    z.ZodTypeDef,
    AuditLogServiceAccountUpdatedChangesRequested
  > = z.object({
    role: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogServiceAccountUpdatedChangesRequested$ {
  /** @deprecated use `AuditLogServiceAccountUpdatedChangesRequested$inboundSchema` instead. */
  export const inboundSchema =
    AuditLogServiceAccountUpdatedChangesRequested$inboundSchema;
  /** @deprecated use `AuditLogServiceAccountUpdatedChangesRequested$outboundSchema` instead. */
  export const outboundSchema =
    AuditLogServiceAccountUpdatedChangesRequested$outboundSchema;
  /** @deprecated use `AuditLogServiceAccountUpdatedChangesRequested$Outbound` instead. */
  export type Outbound = AuditLogServiceAccountUpdatedChangesRequested$Outbound;
}

/** @internal */
export const ServiceAccountUpdated$inboundSchema: z.ZodType<
  ServiceAccountUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  changes_requested: z.lazy(() =>
    AuditLogServiceAccountUpdatedChangesRequested$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "changes_requested": "changesRequested",
  });
});

/** @internal */
export type ServiceAccountUpdated$Outbound = {
  id?: string | undefined;
  changes_requested?:
    | AuditLogServiceAccountUpdatedChangesRequested$Outbound
    | undefined;
};

/** @internal */
export const ServiceAccountUpdated$outboundSchema: z.ZodType<
  ServiceAccountUpdated$Outbound,
  z.ZodTypeDef,
  ServiceAccountUpdated
> = z.object({
  id: z.string().optional(),
  changesRequested: z.lazy(() =>
    AuditLogServiceAccountUpdatedChangesRequested$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    changesRequested: "changes_requested",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceAccountUpdated$ {
  /** @deprecated use `ServiceAccountUpdated$inboundSchema` instead. */
  export const inboundSchema = ServiceAccountUpdated$inboundSchema;
  /** @deprecated use `ServiceAccountUpdated$outboundSchema` instead. */
  export const outboundSchema = ServiceAccountUpdated$outboundSchema;
  /** @deprecated use `ServiceAccountUpdated$Outbound` instead. */
  export type Outbound = ServiceAccountUpdated$Outbound;
}

/** @internal */
export const ServiceAccountDeleted$inboundSchema: z.ZodType<
  ServiceAccountDeleted,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type ServiceAccountDeleted$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const ServiceAccountDeleted$outboundSchema: z.ZodType<
  ServiceAccountDeleted$Outbound,
  z.ZodTypeDef,
  ServiceAccountDeleted
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ServiceAccountDeleted$ {
  /** @deprecated use `ServiceAccountDeleted$inboundSchema` instead. */
  export const inboundSchema = ServiceAccountDeleted$inboundSchema;
  /** @deprecated use `ServiceAccountDeleted$outboundSchema` instead. */
  export const outboundSchema = ServiceAccountDeleted$outboundSchema;
  /** @deprecated use `ServiceAccountDeleted$Outbound` instead. */
  export type Outbound = ServiceAccountDeleted$Outbound;
}

/** @internal */
export const AuditLogUserAddedData$inboundSchema: z.ZodType<
  AuditLogUserAddedData,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string().optional(),
});

/** @internal */
export type AuditLogUserAddedData$Outbound = {
  role?: string | undefined;
};

/** @internal */
export const AuditLogUserAddedData$outboundSchema: z.ZodType<
  AuditLogUserAddedData$Outbound,
  z.ZodTypeDef,
  AuditLogUserAddedData
> = z.object({
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogUserAddedData$ {
  /** @deprecated use `AuditLogUserAddedData$inboundSchema` instead. */
  export const inboundSchema = AuditLogUserAddedData$inboundSchema;
  /** @deprecated use `AuditLogUserAddedData$outboundSchema` instead. */
  export const outboundSchema = AuditLogUserAddedData$outboundSchema;
  /** @deprecated use `AuditLogUserAddedData$Outbound` instead. */
  export type Outbound = AuditLogUserAddedData$Outbound;
}

/** @internal */
export const UserAdded$inboundSchema: z.ZodType<
  UserAdded,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogUserAddedData$inboundSchema).optional(),
});

/** @internal */
export type UserAdded$Outbound = {
  id?: string | undefined;
  data?: AuditLogUserAddedData$Outbound | undefined;
};

/** @internal */
export const UserAdded$outboundSchema: z.ZodType<
  UserAdded$Outbound,
  z.ZodTypeDef,
  UserAdded
> = z.object({
  id: z.string().optional(),
  data: z.lazy(() => AuditLogUserAddedData$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserAdded$ {
  /** @deprecated use `UserAdded$inboundSchema` instead. */
  export const inboundSchema = UserAdded$inboundSchema;
  /** @deprecated use `UserAdded$outboundSchema` instead. */
  export const outboundSchema = UserAdded$outboundSchema;
  /** @deprecated use `UserAdded$Outbound` instead. */
  export type Outbound = UserAdded$Outbound;
}

/** @internal */
export const AuditLogUserUpdatedChangesRequested$inboundSchema: z.ZodType<
  AuditLogUserUpdatedChangesRequested,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: z.string().optional(),
});

/** @internal */
export type AuditLogUserUpdatedChangesRequested$Outbound = {
  role?: string | undefined;
};

/** @internal */
export const AuditLogUserUpdatedChangesRequested$outboundSchema: z.ZodType<
  AuditLogUserUpdatedChangesRequested$Outbound,
  z.ZodTypeDef,
  AuditLogUserUpdatedChangesRequested
> = z.object({
  role: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogUserUpdatedChangesRequested$ {
  /** @deprecated use `AuditLogUserUpdatedChangesRequested$inboundSchema` instead. */
  export const inboundSchema =
    AuditLogUserUpdatedChangesRequested$inboundSchema;
  /** @deprecated use `AuditLogUserUpdatedChangesRequested$outboundSchema` instead. */
  export const outboundSchema =
    AuditLogUserUpdatedChangesRequested$outboundSchema;
  /** @deprecated use `AuditLogUserUpdatedChangesRequested$Outbound` instead. */
  export type Outbound = AuditLogUserUpdatedChangesRequested$Outbound;
}

/** @internal */
export const UserUpdated$inboundSchema: z.ZodType<
  UserUpdated,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  changes_requested: z.lazy(() =>
    AuditLogUserUpdatedChangesRequested$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "changes_requested": "changesRequested",
  });
});

/** @internal */
export type UserUpdated$Outbound = {
  id?: string | undefined;
  changes_requested?: AuditLogUserUpdatedChangesRequested$Outbound | undefined;
};

/** @internal */
export const UserUpdated$outboundSchema: z.ZodType<
  UserUpdated$Outbound,
  z.ZodTypeDef,
  UserUpdated
> = z.object({
  id: z.string().optional(),
  changesRequested: z.lazy(() =>
    AuditLogUserUpdatedChangesRequested$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    changesRequested: "changes_requested",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserUpdated$ {
  /** @deprecated use `UserUpdated$inboundSchema` instead. */
  export const inboundSchema = UserUpdated$inboundSchema;
  /** @deprecated use `UserUpdated$outboundSchema` instead. */
  export const outboundSchema = UserUpdated$outboundSchema;
  /** @deprecated use `UserUpdated$Outbound` instead. */
  export type Outbound = UserUpdated$Outbound;
}

/** @internal */
export const UserDeleted$inboundSchema: z.ZodType<
  UserDeleted,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
});

/** @internal */
export type UserDeleted$Outbound = {
  id?: string | undefined;
};

/** @internal */
export const UserDeleted$outboundSchema: z.ZodType<
  UserDeleted$Outbound,
  z.ZodTypeDef,
  UserDeleted
> = z.object({
  id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserDeleted$ {
  /** @deprecated use `UserDeleted$inboundSchema` instead. */
  export const inboundSchema = UserDeleted$inboundSchema;
  /** @deprecated use `UserDeleted$outboundSchema` instead. */
  export const outboundSchema = UserDeleted$outboundSchema;
  /** @deprecated use `UserDeleted$Outbound` instead. */
  export type Outbound = UserDeleted$Outbound;
}

/** @internal */
export const AuditLog$inboundSchema: z.ZodType<
  AuditLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: AuditLogEventType$inboundSchema,
  effective_at: z.number().int(),
  project: z.lazy(() => AuditLogProject$inboundSchema).optional(),
  actor: AuditLogActor$inboundSchema,
  "api_key.created": z.lazy(() => ApiKeyCreated$inboundSchema).optional(),
  "api_key.updated": z.lazy(() => ApiKeyUpdated$inboundSchema).optional(),
  "api_key.deleted": z.lazy(() => ApiKeyDeleted$inboundSchema).optional(),
  "invite.sent": z.lazy(() => InviteSent$inboundSchema).optional(),
  "invite.accepted": z.lazy(() => InviteAccepted$inboundSchema).optional(),
  "invite.deleted": z.lazy(() => InviteDeleted$inboundSchema).optional(),
  "login.failed": z.lazy(() => LoginFailed$inboundSchema).optional(),
  "logout.failed": z.lazy(() => LogoutFailed$inboundSchema).optional(),
  "organization.updated": z.lazy(() => OrganizationUpdated$inboundSchema)
    .optional(),
  "project.created": z.lazy(() => ProjectCreated$inboundSchema).optional(),
  "project.updated": z.lazy(() => ProjectUpdated$inboundSchema).optional(),
  "project.archived": z.lazy(() => ProjectArchived$inboundSchema).optional(),
  "service_account.created": z.lazy(() => ServiceAccountCreated$inboundSchema)
    .optional(),
  "service_account.updated": z.lazy(() => ServiceAccountUpdated$inboundSchema)
    .optional(),
  "service_account.deleted": z.lazy(() => ServiceAccountDeleted$inboundSchema)
    .optional(),
  "user.added": z.lazy(() => UserAdded$inboundSchema).optional(),
  "user.updated": z.lazy(() => UserUpdated$inboundSchema).optional(),
  "user.deleted": z.lazy(() => UserDeleted$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_at": "effectiveAt",
    "api_key.created": "apiKeyCreated",
    "api_key.updated": "apiKeyUpdated",
    "api_key.deleted": "apiKeyDeleted",
    "invite.sent": "inviteSent",
    "invite.accepted": "inviteAccepted",
    "invite.deleted": "inviteDeleted",
    "login.failed": "loginFailed",
    "logout.failed": "logoutFailed",
    "organization.updated": "organizationUpdated",
    "project.created": "projectCreated",
    "project.updated": "projectUpdated",
    "project.archived": "projectArchived",
    "service_account.created": "serviceAccountCreated",
    "service_account.updated": "serviceAccountUpdated",
    "service_account.deleted": "serviceAccountDeleted",
    "user.added": "userAdded",
    "user.updated": "userUpdated",
    "user.deleted": "userDeleted",
  });
});

/** @internal */
export type AuditLog$Outbound = {
  id: string;
  type: string;
  effective_at: number;
  project?: AuditLogProject$Outbound | undefined;
  actor: AuditLogActor$Outbound;
  "api_key.created"?: ApiKeyCreated$Outbound | undefined;
  "api_key.updated"?: ApiKeyUpdated$Outbound | undefined;
  "api_key.deleted"?: ApiKeyDeleted$Outbound | undefined;
  "invite.sent"?: InviteSent$Outbound | undefined;
  "invite.accepted"?: InviteAccepted$Outbound | undefined;
  "invite.deleted"?: InviteDeleted$Outbound | undefined;
  "login.failed"?: LoginFailed$Outbound | undefined;
  "logout.failed"?: LogoutFailed$Outbound | undefined;
  "organization.updated"?: OrganizationUpdated$Outbound | undefined;
  "project.created"?: ProjectCreated$Outbound | undefined;
  "project.updated"?: ProjectUpdated$Outbound | undefined;
  "project.archived"?: ProjectArchived$Outbound | undefined;
  "service_account.created"?: ServiceAccountCreated$Outbound | undefined;
  "service_account.updated"?: ServiceAccountUpdated$Outbound | undefined;
  "service_account.deleted"?: ServiceAccountDeleted$Outbound | undefined;
  "user.added"?: UserAdded$Outbound | undefined;
  "user.updated"?: UserUpdated$Outbound | undefined;
  "user.deleted"?: UserDeleted$Outbound | undefined;
};

/** @internal */
export const AuditLog$outboundSchema: z.ZodType<
  AuditLog$Outbound,
  z.ZodTypeDef,
  AuditLog
> = z.object({
  id: z.string(),
  type: AuditLogEventType$outboundSchema,
  effectiveAt: z.number().int(),
  project: z.lazy(() => AuditLogProject$outboundSchema).optional(),
  actor: AuditLogActor$outboundSchema,
  apiKeyCreated: z.lazy(() => ApiKeyCreated$outboundSchema).optional(),
  apiKeyUpdated: z.lazy(() => ApiKeyUpdated$outboundSchema).optional(),
  apiKeyDeleted: z.lazy(() => ApiKeyDeleted$outboundSchema).optional(),
  inviteSent: z.lazy(() => InviteSent$outboundSchema).optional(),
  inviteAccepted: z.lazy(() => InviteAccepted$outboundSchema).optional(),
  inviteDeleted: z.lazy(() => InviteDeleted$outboundSchema).optional(),
  loginFailed: z.lazy(() => LoginFailed$outboundSchema).optional(),
  logoutFailed: z.lazy(() => LogoutFailed$outboundSchema).optional(),
  organizationUpdated: z.lazy(() => OrganizationUpdated$outboundSchema)
    .optional(),
  projectCreated: z.lazy(() => ProjectCreated$outboundSchema).optional(),
  projectUpdated: z.lazy(() => ProjectUpdated$outboundSchema).optional(),
  projectArchived: z.lazy(() => ProjectArchived$outboundSchema).optional(),
  serviceAccountCreated: z.lazy(() => ServiceAccountCreated$outboundSchema)
    .optional(),
  serviceAccountUpdated: z.lazy(() => ServiceAccountUpdated$outboundSchema)
    .optional(),
  serviceAccountDeleted: z.lazy(() => ServiceAccountDeleted$outboundSchema)
    .optional(),
  userAdded: z.lazy(() => UserAdded$outboundSchema).optional(),
  userUpdated: z.lazy(() => UserUpdated$outboundSchema).optional(),
  userDeleted: z.lazy(() => UserDeleted$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveAt: "effective_at",
    apiKeyCreated: "api_key.created",
    apiKeyUpdated: "api_key.updated",
    apiKeyDeleted: "api_key.deleted",
    inviteSent: "invite.sent",
    inviteAccepted: "invite.accepted",
    inviteDeleted: "invite.deleted",
    loginFailed: "login.failed",
    logoutFailed: "logout.failed",
    organizationUpdated: "organization.updated",
    projectCreated: "project.created",
    projectUpdated: "project.updated",
    projectArchived: "project.archived",
    serviceAccountCreated: "service_account.created",
    serviceAccountUpdated: "service_account.updated",
    serviceAccountDeleted: "service_account.deleted",
    userAdded: "user.added",
    userUpdated: "user.updated",
    userDeleted: "user.deleted",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLog$ {
  /** @deprecated use `AuditLog$inboundSchema` instead. */
  export const inboundSchema = AuditLog$inboundSchema;
  /** @deprecated use `AuditLog$outboundSchema` instead. */
  export const outboundSchema = AuditLog$outboundSchema;
  /** @deprecated use `AuditLog$Outbound` instead. */
  export type Outbound = AuditLog$Outbound;
}
