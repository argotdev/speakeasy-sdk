/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProjectServiceAccount,
  ProjectServiceAccount$inboundSchema,
  ProjectServiceAccount$Outbound,
  ProjectServiceAccount$outboundSchema,
} from "./projectserviceaccount.js";
import {
  ProjectUser,
  ProjectUser$inboundSchema,
  ProjectUser$Outbound,
  ProjectUser$outboundSchema,
} from "./projectuser.js";

/**
 * The object type, which is always `organization.project.api_key`
 */
export const ProjectApiKeyObject = {
  OrganizationProjectApiKey: "organization.project.api_key",
} as const;
/**
 * The object type, which is always `organization.project.api_key`
 */
export type ProjectApiKeyObject = ClosedEnum<typeof ProjectApiKeyObject>;

/**
 * `user` or `service_account`
 */
export const ProjectApiKeyType = {
  User: "user",
  ServiceAccount: "service_account",
} as const;
/**
 * `user` or `service_account`
 */
export type ProjectApiKeyType = ClosedEnum<typeof ProjectApiKeyType>;

export type Owner = {
  /**
   * `user` or `service_account`
   */
  type?: ProjectApiKeyType | undefined;
  /**
   * Represents an individual user in a project.
   */
  user?: ProjectUser | undefined;
  /**
   * Represents an individual service account in a project.
   */
  serviceAccount?: ProjectServiceAccount | undefined;
};

/**
 * Represents an individual API key in a project.
 */
export type ProjectApiKey = {
  /**
   * The object type, which is always `organization.project.api_key`
   */
  object: ProjectApiKeyObject;
  /**
   * The redacted value of the API key
   */
  redactedValue: string;
  /**
   * The name of the API key
   */
  name: string;
  /**
   * The Unix timestamp (in seconds) of when the API key was created
   */
  createdAt: number;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  owner: Owner;
};

/** @internal */
export const ProjectApiKeyObject$inboundSchema: z.ZodNativeEnum<
  typeof ProjectApiKeyObject
> = z.nativeEnum(ProjectApiKeyObject);

/** @internal */
export const ProjectApiKeyObject$outboundSchema: z.ZodNativeEnum<
  typeof ProjectApiKeyObject
> = ProjectApiKeyObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectApiKeyObject$ {
  /** @deprecated use `ProjectApiKeyObject$inboundSchema` instead. */
  export const inboundSchema = ProjectApiKeyObject$inboundSchema;
  /** @deprecated use `ProjectApiKeyObject$outboundSchema` instead. */
  export const outboundSchema = ProjectApiKeyObject$outboundSchema;
}

/** @internal */
export const ProjectApiKeyType$inboundSchema: z.ZodNativeEnum<
  typeof ProjectApiKeyType
> = z.nativeEnum(ProjectApiKeyType);

/** @internal */
export const ProjectApiKeyType$outboundSchema: z.ZodNativeEnum<
  typeof ProjectApiKeyType
> = ProjectApiKeyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectApiKeyType$ {
  /** @deprecated use `ProjectApiKeyType$inboundSchema` instead. */
  export const inboundSchema = ProjectApiKeyType$inboundSchema;
  /** @deprecated use `ProjectApiKeyType$outboundSchema` instead. */
  export const outboundSchema = ProjectApiKeyType$outboundSchema;
}

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
  .object({
    type: ProjectApiKeyType$inboundSchema.optional(),
    user: ProjectUser$inboundSchema.optional(),
    service_account: ProjectServiceAccount$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "service_account": "serviceAccount",
    });
  });

/** @internal */
export type Owner$Outbound = {
  type?: string | undefined;
  user?: ProjectUser$Outbound | undefined;
  service_account?: ProjectServiceAccount$Outbound | undefined;
};

/** @internal */
export const Owner$outboundSchema: z.ZodType<
  Owner$Outbound,
  z.ZodTypeDef,
  Owner
> = z.object({
  type: ProjectApiKeyType$outboundSchema.optional(),
  user: ProjectUser$outboundSchema.optional(),
  serviceAccount: ProjectServiceAccount$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    serviceAccount: "service_account",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
  /** @deprecated use `Owner$inboundSchema` instead. */
  export const inboundSchema = Owner$inboundSchema;
  /** @deprecated use `Owner$outboundSchema` instead. */
  export const outboundSchema = Owner$outboundSchema;
  /** @deprecated use `Owner$Outbound` instead. */
  export type Outbound = Owner$Outbound;
}

export function ownerToJSON(owner: Owner): string {
  return JSON.stringify(Owner$outboundSchema.parse(owner));
}

export function ownerFromJSON(
  jsonString: string,
): SafeParseResult<Owner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Owner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Owner' from JSON`,
  );
}

/** @internal */
export const ProjectApiKey$inboundSchema: z.ZodType<
  ProjectApiKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ProjectApiKeyObject$inboundSchema,
  redacted_value: z.string(),
  name: z.string(),
  created_at: z.number().int(),
  id: z.string(),
  owner: z.lazy(() => Owner$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "redacted_value": "redactedValue",
    "created_at": "createdAt",
  });
});

/** @internal */
export type ProjectApiKey$Outbound = {
  object: string;
  redacted_value: string;
  name: string;
  created_at: number;
  id: string;
  owner: Owner$Outbound;
};

/** @internal */
export const ProjectApiKey$outboundSchema: z.ZodType<
  ProjectApiKey$Outbound,
  z.ZodTypeDef,
  ProjectApiKey
> = z.object({
  object: ProjectApiKeyObject$outboundSchema,
  redactedValue: z.string(),
  name: z.string(),
  createdAt: z.number().int(),
  id: z.string(),
  owner: z.lazy(() => Owner$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    redactedValue: "redacted_value",
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectApiKey$ {
  /** @deprecated use `ProjectApiKey$inboundSchema` instead. */
  export const inboundSchema = ProjectApiKey$inboundSchema;
  /** @deprecated use `ProjectApiKey$outboundSchema` instead. */
  export const outboundSchema = ProjectApiKey$outboundSchema;
  /** @deprecated use `ProjectApiKey$Outbound` instead. */
  export type Outbound = ProjectApiKey$Outbound;
}

export function projectApiKeyToJSON(projectApiKey: ProjectApiKey): string {
  return JSON.stringify(ProjectApiKey$outboundSchema.parse(projectApiKey));
}

export function projectApiKeyFromJSON(
  jsonString: string,
): SafeParseResult<ProjectApiKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectApiKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectApiKey' from JSON`,
  );
}
