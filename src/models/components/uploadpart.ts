/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The object type, which is always `upload.part`.
 */
export const UploadPartObject = {
  UploadPart: "upload.part",
} as const;
/**
 * The object type, which is always `upload.part`.
 */
export type UploadPartObject = ClosedEnum<typeof UploadPartObject>;

/**
 * The upload Part represents a chunk of bytes we can add to an Upload object.
 *
 * @remarks
 */
export type UploadPart = {
  /**
   * The upload Part unique identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the Part was created.
   */
  createdAt: number;
  /**
   * The ID of the Upload object that this Part was added to.
   */
  uploadId: string;
  /**
   * The object type, which is always `upload.part`.
   */
  object: UploadPartObject;
};

/** @internal */
export const UploadPartObject$inboundSchema: z.ZodNativeEnum<
  typeof UploadPartObject
> = z.nativeEnum(UploadPartObject);

/** @internal */
export const UploadPartObject$outboundSchema: z.ZodNativeEnum<
  typeof UploadPartObject
> = UploadPartObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadPartObject$ {
  /** @deprecated use `UploadPartObject$inboundSchema` instead. */
  export const inboundSchema = UploadPartObject$inboundSchema;
  /** @deprecated use `UploadPartObject$outboundSchema` instead. */
  export const outboundSchema = UploadPartObject$outboundSchema;
}

/** @internal */
export const UploadPart$inboundSchema: z.ZodType<
  UploadPart,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.number().int(),
  upload_id: z.string(),
  object: UploadPartObject$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "upload_id": "uploadId",
  });
});

/** @internal */
export type UploadPart$Outbound = {
  id: string;
  created_at: number;
  upload_id: string;
  object: string;
};

/** @internal */
export const UploadPart$outboundSchema: z.ZodType<
  UploadPart$Outbound,
  z.ZodTypeDef,
  UploadPart
> = z.object({
  id: z.string(),
  createdAt: z.number().int(),
  uploadId: z.string(),
  object: UploadPartObject$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    uploadId: "upload_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadPart$ {
  /** @deprecated use `UploadPart$inboundSchema` instead. */
  export const inboundSchema = UploadPart$inboundSchema;
  /** @deprecated use `UploadPart$outboundSchema` instead. */
  export const outboundSchema = UploadPart$outboundSchema;
  /** @deprecated use `UploadPart$Outbound` instead. */
  export type Outbound = UploadPart$Outbound;
}

export function uploadPartToJSON(uploadPart: UploadPart): string {
  return JSON.stringify(UploadPart$outboundSchema.parse(uploadPart));
}

export function uploadPartFromJSON(
  jsonString: string,
): SafeParseResult<UploadPart, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadPart$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadPart' from JSON`,
  );
}
