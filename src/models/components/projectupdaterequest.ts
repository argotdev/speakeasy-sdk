/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ProjectUpdateRequest = {
  /**
   * The updated name of the project, this name appears in reports.
   */
  name: string;
};

/** @internal */
export const ProjectUpdateRequest$inboundSchema: z.ZodType<
  ProjectUpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type ProjectUpdateRequest$Outbound = {
  name: string;
};

/** @internal */
export const ProjectUpdateRequest$outboundSchema: z.ZodType<
  ProjectUpdateRequest$Outbound,
  z.ZodTypeDef,
  ProjectUpdateRequest
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectUpdateRequest$ {
  /** @deprecated use `ProjectUpdateRequest$inboundSchema` instead. */
  export const inboundSchema = ProjectUpdateRequest$inboundSchema;
  /** @deprecated use `ProjectUpdateRequest$outboundSchema` instead. */
  export const outboundSchema = ProjectUpdateRequest$outboundSchema;
  /** @deprecated use `ProjectUpdateRequest$Outbound` instead. */
  export type Outbound = ProjectUpdateRequest$Outbound;
}

export function projectUpdateRequestToJSON(
  projectUpdateRequest: ProjectUpdateRequest,
): string {
  return JSON.stringify(
    ProjectUpdateRequest$outboundSchema.parse(projectUpdateRequest),
  );
}

export function projectUpdateRequestFromJSON(
  jsonString: string,
): SafeParseResult<ProjectUpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectUpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectUpdateRequest' from JSON`,
  );
}
