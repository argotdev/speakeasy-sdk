/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The object type, which is always `organization.project`
 */
export const ProjectObject = {
  OrganizationProject: "organization.project",
} as const;
/**
 * The object type, which is always `organization.project`
 */
export type ProjectObject = ClosedEnum<typeof ProjectObject>;

/**
 * `active` or `archived`
 */
export const ProjectStatus = {
  Active: "active",
  Archived: "archived",
} as const;
/**
 * `active` or `archived`
 */
export type ProjectStatus = ClosedEnum<typeof ProjectStatus>;

/**
 * Represents an individual project.
 */
export type Project = {
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The object type, which is always `organization.project`
   */
  object: ProjectObject;
  /**
   * The name of the project. This appears in reporting.
   */
  name: string;
  /**
   * The Unix timestamp (in seconds) of when the project was created.
   */
  createdAt: number;
  /**
   * The Unix timestamp (in seconds) of when the project was archived or `null`.
   */
  archivedAt?: number | null | undefined;
  /**
   * `active` or `archived`
   */
  status: ProjectStatus;
};

/** @internal */
export const ProjectObject$inboundSchema: z.ZodNativeEnum<
  typeof ProjectObject
> = z.nativeEnum(ProjectObject);

/** @internal */
export const ProjectObject$outboundSchema: z.ZodNativeEnum<
  typeof ProjectObject
> = ProjectObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectObject$ {
  /** @deprecated use `ProjectObject$inboundSchema` instead. */
  export const inboundSchema = ProjectObject$inboundSchema;
  /** @deprecated use `ProjectObject$outboundSchema` instead. */
  export const outboundSchema = ProjectObject$outboundSchema;
}

/** @internal */
export const ProjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof ProjectStatus
> = z.nativeEnum(ProjectStatus);

/** @internal */
export const ProjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof ProjectStatus
> = ProjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectStatus$ {
  /** @deprecated use `ProjectStatus$inboundSchema` instead. */
  export const inboundSchema = ProjectStatus$inboundSchema;
  /** @deprecated use `ProjectStatus$outboundSchema` instead. */
  export const outboundSchema = ProjectStatus$outboundSchema;
}

/** @internal */
export const Project$inboundSchema: z.ZodType<Project, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    object: ProjectObject$inboundSchema,
    name: z.string(),
    created_at: z.number().int(),
    archived_at: z.nullable(z.number().int()).optional(),
    status: ProjectStatus$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "created_at": "createdAt",
      "archived_at": "archivedAt",
    });
  });

/** @internal */
export type Project$Outbound = {
  id: string;
  object: string;
  name: string;
  created_at: number;
  archived_at?: number | null | undefined;
  status: string;
};

/** @internal */
export const Project$outboundSchema: z.ZodType<
  Project$Outbound,
  z.ZodTypeDef,
  Project
> = z.object({
  id: z.string(),
  object: ProjectObject$outboundSchema,
  name: z.string(),
  createdAt: z.number().int(),
  archivedAt: z.nullable(z.number().int()).optional(),
  status: ProjectStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    archivedAt: "archived_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Project$ {
  /** @deprecated use `Project$inboundSchema` instead. */
  export const inboundSchema = Project$inboundSchema;
  /** @deprecated use `Project$outboundSchema` instead. */
  export const outboundSchema = Project$outboundSchema;
  /** @deprecated use `Project$Outbound` instead. */
  export type Outbound = Project$Outbound;
}

export function projectToJSON(project: Project): string {
  return JSON.stringify(Project$outboundSchema.parse(project));
}

export function projectFromJSON(
  jsonString: string,
): SafeParseResult<Project, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Project$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Project' from JSON`,
  );
}
