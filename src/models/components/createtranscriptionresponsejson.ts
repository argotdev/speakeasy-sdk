/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents a transcription response returned by model, based on the provided input.
 */
export type CreateTranscriptionResponseJson = {
  /**
   * The transcribed text.
   */
  text: string;
};

/** @internal */
export const CreateTranscriptionResponseJson$inboundSchema: z.ZodType<
  CreateTranscriptionResponseJson,
  z.ZodTypeDef,
  unknown
> = z.object({
  text: z.string(),
});

/** @internal */
export type CreateTranscriptionResponseJson$Outbound = {
  text: string;
};

/** @internal */
export const CreateTranscriptionResponseJson$outboundSchema: z.ZodType<
  CreateTranscriptionResponseJson$Outbound,
  z.ZodTypeDef,
  CreateTranscriptionResponseJson
> = z.object({
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTranscriptionResponseJson$ {
  /** @deprecated use `CreateTranscriptionResponseJson$inboundSchema` instead. */
  export const inboundSchema = CreateTranscriptionResponseJson$inboundSchema;
  /** @deprecated use `CreateTranscriptionResponseJson$outboundSchema` instead. */
  export const outboundSchema = CreateTranscriptionResponseJson$outboundSchema;
  /** @deprecated use `CreateTranscriptionResponseJson$Outbound` instead. */
  export type Outbound = CreateTranscriptionResponseJson$Outbound;
}

export function createTranscriptionResponseJsonToJSON(
  createTranscriptionResponseJson: CreateTranscriptionResponseJson,
): string {
  return JSON.stringify(
    CreateTranscriptionResponseJson$outboundSchema.parse(
      createTranscriptionResponseJson,
    ),
  );
}

export function createTranscriptionResponseJsonFromJSON(
  jsonString: string,
): SafeParseResult<CreateTranscriptionResponseJson, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTranscriptionResponseJson$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTranscriptionResponseJson' from JSON`,
  );
}
