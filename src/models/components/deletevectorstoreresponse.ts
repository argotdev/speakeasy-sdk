/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeleteVectorStoreResponseObject = {
  VectorStoreDeleted: "vector_store.deleted",
} as const;
export type DeleteVectorStoreResponseObject = ClosedEnum<
  typeof DeleteVectorStoreResponseObject
>;

export type DeleteVectorStoreResponse = {
  id: string;
  deleted: boolean;
  object: DeleteVectorStoreResponseObject;
};

/** @internal */
export const DeleteVectorStoreResponseObject$inboundSchema: z.ZodNativeEnum<
  typeof DeleteVectorStoreResponseObject
> = z.nativeEnum(DeleteVectorStoreResponseObject);

/** @internal */
export const DeleteVectorStoreResponseObject$outboundSchema: z.ZodNativeEnum<
  typeof DeleteVectorStoreResponseObject
> = DeleteVectorStoreResponseObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteVectorStoreResponseObject$ {
  /** @deprecated use `DeleteVectorStoreResponseObject$inboundSchema` instead. */
  export const inboundSchema = DeleteVectorStoreResponseObject$inboundSchema;
  /** @deprecated use `DeleteVectorStoreResponseObject$outboundSchema` instead. */
  export const outboundSchema = DeleteVectorStoreResponseObject$outboundSchema;
}

/** @internal */
export const DeleteVectorStoreResponse$inboundSchema: z.ZodType<
  DeleteVectorStoreResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  deleted: z.boolean(),
  object: DeleteVectorStoreResponseObject$inboundSchema,
});

/** @internal */
export type DeleteVectorStoreResponse$Outbound = {
  id: string;
  deleted: boolean;
  object: string;
};

/** @internal */
export const DeleteVectorStoreResponse$outboundSchema: z.ZodType<
  DeleteVectorStoreResponse$Outbound,
  z.ZodTypeDef,
  DeleteVectorStoreResponse
> = z.object({
  id: z.string(),
  deleted: z.boolean(),
  object: DeleteVectorStoreResponseObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteVectorStoreResponse$ {
  /** @deprecated use `DeleteVectorStoreResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteVectorStoreResponse$inboundSchema;
  /** @deprecated use `DeleteVectorStoreResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteVectorStoreResponse$outboundSchema;
  /** @deprecated use `DeleteVectorStoreResponse$Outbound` instead. */
  export type Outbound = DeleteVectorStoreResponse$Outbound;
}

export function deleteVectorStoreResponseToJSON(
  deleteVectorStoreResponse: DeleteVectorStoreResponse,
): string {
  return JSON.stringify(
    DeleteVectorStoreResponse$outboundSchema.parse(deleteVectorStoreResponse),
  );
}

export function deleteVectorStoreResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteVectorStoreResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteVectorStoreResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteVectorStoreResponse' from JSON`,
  );
}
