/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
 *
 * @remarks
 */
export type Input =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

export const CreateEmbeddingRequestModel2 = {
  TextEmbeddingAda002: "text-embedding-ada-002",
  TextEmbedding3Small: "text-embedding-3-small",
  TextEmbedding3Large: "text-embedding-3-large",
} as const;
export type CreateEmbeddingRequestModel2 = ClosedEnum<
  typeof CreateEmbeddingRequestModel2
>;

/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
 *
 * @remarks
 */
export type CreateEmbeddingRequestModel = string | CreateEmbeddingRequestModel2;

/**
 * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
 */
export const EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
 */
export type EncodingFormat = ClosedEnum<typeof EncodingFormat>;

export type CreateEmbeddingRequest = {
  /**
   * Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
   *
   * @remarks
   */
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  /**
   * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
   *
   * @remarks
   */
  model: string | CreateEmbeddingRequestModel2;
  /**
   * The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
   */
  encodingFormat?: EncodingFormat | undefined;
  /**
   * The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
   *
   * @remarks
   */
  dimensions?: number | undefined;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
   *
   * @remarks
   */
  user?: string | undefined;
};

/** @internal */
export const Input$inboundSchema: z.ZodType<Input, z.ZodTypeDef, unknown> = z
  .union([
    z.string(),
    z.array(z.string()),
    z.array(z.number().int()),
    z.array(z.array(z.number().int())),
  ]);

/** @internal */
export type Input$Outbound =
  | string
  | Array<string>
  | Array<number>
  | Array<Array<number>>;

/** @internal */
export const Input$outboundSchema: z.ZodType<
  Input$Outbound,
  z.ZodTypeDef,
  Input
> = z.union([
  z.string(),
  z.array(z.string()),
  z.array(z.number().int()),
  z.array(z.array(z.number().int())),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Input$ {
  /** @deprecated use `Input$inboundSchema` instead. */
  export const inboundSchema = Input$inboundSchema;
  /** @deprecated use `Input$outboundSchema` instead. */
  export const outboundSchema = Input$outboundSchema;
  /** @deprecated use `Input$Outbound` instead. */
  export type Outbound = Input$Outbound;
}

/** @internal */
export const CreateEmbeddingRequestModel2$inboundSchema: z.ZodNativeEnum<
  typeof CreateEmbeddingRequestModel2
> = z.nativeEnum(CreateEmbeddingRequestModel2);

/** @internal */
export const CreateEmbeddingRequestModel2$outboundSchema: z.ZodNativeEnum<
  typeof CreateEmbeddingRequestModel2
> = CreateEmbeddingRequestModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmbeddingRequestModel2$ {
  /** @deprecated use `CreateEmbeddingRequestModel2$inboundSchema` instead. */
  export const inboundSchema = CreateEmbeddingRequestModel2$inboundSchema;
  /** @deprecated use `CreateEmbeddingRequestModel2$outboundSchema` instead. */
  export const outboundSchema = CreateEmbeddingRequestModel2$outboundSchema;
}

/** @internal */
export const CreateEmbeddingRequestModel$inboundSchema: z.ZodType<
  CreateEmbeddingRequestModel,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateEmbeddingRequestModel2$inboundSchema]);

/** @internal */
export type CreateEmbeddingRequestModel$Outbound = string | string;

/** @internal */
export const CreateEmbeddingRequestModel$outboundSchema: z.ZodType<
  CreateEmbeddingRequestModel$Outbound,
  z.ZodTypeDef,
  CreateEmbeddingRequestModel
> = z.union([z.string(), CreateEmbeddingRequestModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmbeddingRequestModel$ {
  /** @deprecated use `CreateEmbeddingRequestModel$inboundSchema` instead. */
  export const inboundSchema = CreateEmbeddingRequestModel$inboundSchema;
  /** @deprecated use `CreateEmbeddingRequestModel$outboundSchema` instead. */
  export const outboundSchema = CreateEmbeddingRequestModel$outboundSchema;
  /** @deprecated use `CreateEmbeddingRequestModel$Outbound` instead. */
  export type Outbound = CreateEmbeddingRequestModel$Outbound;
}

/** @internal */
export const EncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = z.nativeEnum(EncodingFormat);

/** @internal */
export const EncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof EncodingFormat
> = EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodingFormat$ {
  /** @deprecated use `EncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EncodingFormat$inboundSchema;
  /** @deprecated use `EncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EncodingFormat$outboundSchema;
}

/** @internal */
export const CreateEmbeddingRequest$inboundSchema: z.ZodType<
  CreateEmbeddingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number().int()),
    z.array(z.array(z.number().int())),
  ]),
  model: z.union([z.string(), CreateEmbeddingRequestModel2$inboundSchema]),
  encoding_format: EncodingFormat$inboundSchema.default("float"),
  dimensions: z.number().int().optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CreateEmbeddingRequest$Outbound = {
  input: string | Array<string> | Array<number> | Array<Array<number>>;
  model: string | string;
  encoding_format: string;
  dimensions?: number | undefined;
  user?: string | undefined;
};

/** @internal */
export const CreateEmbeddingRequest$outboundSchema: z.ZodType<
  CreateEmbeddingRequest$Outbound,
  z.ZodTypeDef,
  CreateEmbeddingRequest
> = z.object({
  input: z.union([
    z.string(),
    z.array(z.string()),
    z.array(z.number().int()),
    z.array(z.array(z.number().int())),
  ]),
  model: z.union([z.string(), CreateEmbeddingRequestModel2$outboundSchema]),
  encodingFormat: EncodingFormat$outboundSchema.default("float"),
  dimensions: z.number().int().optional(),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEmbeddingRequest$ {
  /** @deprecated use `CreateEmbeddingRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEmbeddingRequest$inboundSchema;
  /** @deprecated use `CreateEmbeddingRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEmbeddingRequest$outboundSchema;
  /** @deprecated use `CreateEmbeddingRequest$Outbound` instead. */
  export type Outbound = CreateEmbeddingRequest$Outbound;
}
