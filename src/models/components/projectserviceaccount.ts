/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The object type, which is always `organization.project.service_account`
 */
export const ProjectServiceAccountObject = {
  OrganizationProjectServiceAccount: "organization.project.service_account",
} as const;
/**
 * The object type, which is always `organization.project.service_account`
 */
export type ProjectServiceAccountObject = ClosedEnum<
  typeof ProjectServiceAccountObject
>;

/**
 * `owner` or `member`
 */
export const ProjectServiceAccountRole = {
  Owner: "owner",
  Member: "member",
} as const;
/**
 * `owner` or `member`
 */
export type ProjectServiceAccountRole = ClosedEnum<
  typeof ProjectServiceAccountRole
>;

/**
 * Represents an individual service account in a project.
 */
export type ProjectServiceAccount = {
  /**
   * The object type, which is always `organization.project.service_account`
   */
  object: ProjectServiceAccountObject;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the service account
   */
  name: string;
  /**
   * `owner` or `member`
   */
  role: ProjectServiceAccountRole;
  /**
   * The Unix timestamp (in seconds) of when the service account was created
   */
  createdAt: number;
};

/** @internal */
export const ProjectServiceAccountObject$inboundSchema: z.ZodNativeEnum<
  typeof ProjectServiceAccountObject
> = z.nativeEnum(ProjectServiceAccountObject);

/** @internal */
export const ProjectServiceAccountObject$outboundSchema: z.ZodNativeEnum<
  typeof ProjectServiceAccountObject
> = ProjectServiceAccountObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectServiceAccountObject$ {
  /** @deprecated use `ProjectServiceAccountObject$inboundSchema` instead. */
  export const inboundSchema = ProjectServiceAccountObject$inboundSchema;
  /** @deprecated use `ProjectServiceAccountObject$outboundSchema` instead. */
  export const outboundSchema = ProjectServiceAccountObject$outboundSchema;
}

/** @internal */
export const ProjectServiceAccountRole$inboundSchema: z.ZodNativeEnum<
  typeof ProjectServiceAccountRole
> = z.nativeEnum(ProjectServiceAccountRole);

/** @internal */
export const ProjectServiceAccountRole$outboundSchema: z.ZodNativeEnum<
  typeof ProjectServiceAccountRole
> = ProjectServiceAccountRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectServiceAccountRole$ {
  /** @deprecated use `ProjectServiceAccountRole$inboundSchema` instead. */
  export const inboundSchema = ProjectServiceAccountRole$inboundSchema;
  /** @deprecated use `ProjectServiceAccountRole$outboundSchema` instead. */
  export const outboundSchema = ProjectServiceAccountRole$outboundSchema;
}

/** @internal */
export const ProjectServiceAccount$inboundSchema: z.ZodType<
  ProjectServiceAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  object: ProjectServiceAccountObject$inboundSchema,
  id: z.string(),
  name: z.string(),
  role: ProjectServiceAccountRole$inboundSchema,
  created_at: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type ProjectServiceAccount$Outbound = {
  object: string;
  id: string;
  name: string;
  role: string;
  created_at: number;
};

/** @internal */
export const ProjectServiceAccount$outboundSchema: z.ZodType<
  ProjectServiceAccount$Outbound,
  z.ZodTypeDef,
  ProjectServiceAccount
> = z.object({
  object: ProjectServiceAccountObject$outboundSchema,
  id: z.string(),
  name: z.string(),
  role: ProjectServiceAccountRole$outboundSchema,
  createdAt: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectServiceAccount$ {
  /** @deprecated use `ProjectServiceAccount$inboundSchema` instead. */
  export const inboundSchema = ProjectServiceAccount$inboundSchema;
  /** @deprecated use `ProjectServiceAccount$outboundSchema` instead. */
  export const outboundSchema = ProjectServiceAccount$outboundSchema;
  /** @deprecated use `ProjectServiceAccount$Outbound` instead. */
  export type Outbound = ProjectServiceAccount$Outbound;
}

export function projectServiceAccountToJSON(
  projectServiceAccount: ProjectServiceAccount,
): string {
  return JSON.stringify(
    ProjectServiceAccount$outboundSchema.parse(projectServiceAccount),
  );
}

export function projectServiceAccountFromJSON(
  jsonString: string,
): SafeParseResult<ProjectServiceAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectServiceAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectServiceAccount' from JSON`,
  );
}
