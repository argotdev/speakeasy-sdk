/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RunStepCompletionUsage,
  RunStepCompletionUsage$inboundSchema,
  RunStepCompletionUsage$Outbound,
  RunStepCompletionUsage$outboundSchema,
} from "./runstepcompletionusage.js";
import {
  RunStepDetailsMessageCreationObject,
  RunStepDetailsMessageCreationObject$inboundSchema,
  RunStepDetailsMessageCreationObject$Outbound,
  RunStepDetailsMessageCreationObject$outboundSchema,
} from "./runstepdetailsmessagecreationobject.js";
import {
  RunStepDetailsToolCallsObject,
  RunStepDetailsToolCallsObject$inboundSchema,
  RunStepDetailsToolCallsObject$Outbound,
  RunStepDetailsToolCallsObject$outboundSchema,
} from "./runstepdetailstoolcallsobject.js";

/**
 * The object type, which is always `thread.run.step`.
 */
export const RunStepObjectObject = {
  ThreadRunStep: "thread.run.step",
} as const;
/**
 * The object type, which is always `thread.run.step`.
 */
export type RunStepObjectObject = ClosedEnum<typeof RunStepObjectObject>;

/**
 * The type of run step, which can be either `message_creation` or `tool_calls`.
 */
export const RunStepObjectType = {
  MessageCreation: "message_creation",
  ToolCalls: "tool_calls",
} as const;
/**
 * The type of run step, which can be either `message_creation` or `tool_calls`.
 */
export type RunStepObjectType = ClosedEnum<typeof RunStepObjectType>;

/**
 * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
 */
export const RunStepObjectStatus = {
  InProgress: "in_progress",
  Cancelled: "cancelled",
  Failed: "failed",
  Completed: "completed",
  Expired: "expired",
} as const;
/**
 * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
 */
export type RunStepObjectStatus = ClosedEnum<typeof RunStepObjectStatus>;

/**
 * The details of the run step.
 */
export type StepDetails =
  | RunStepDetailsMessageCreationObject
  | RunStepDetailsToolCallsObject;

/**
 * One of `server_error` or `rate_limit_exceeded`.
 */
export const RunStepObjectCode = {
  ServerError: "server_error",
  RateLimitExceeded: "rate_limit_exceeded",
} as const;
/**
 * One of `server_error` or `rate_limit_exceeded`.
 */
export type RunStepObjectCode = ClosedEnum<typeof RunStepObjectCode>;

/**
 * The last error associated with this run step. Will be `null` if there are no errors.
 */
export type RunStepObjectLastError = {
  /**
   * One of `server_error` or `rate_limit_exceeded`.
   */
  code: RunStepObjectCode;
  /**
   * A human-readable description of the error.
   */
  message: string;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type RunStepObjectMetadata = {};

/**
 * Represents a step in execution of a run.
 *
 * @remarks
 */
export type RunStepObject = {
  /**
   * The identifier of the run step, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.run.step`.
   */
  object: RunStepObjectObject;
  /**
   * The Unix timestamp (in seconds) for when the run step was created.
   */
  createdAt: number;
  /**
   * The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
   */
  assistantId: string;
  /**
   * The ID of the [thread](/docs/api-reference/threads) that was run.
   */
  threadId: string;
  /**
   * The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
   */
  runId: string;
  /**
   * The type of run step, which can be either `message_creation` or `tool_calls`.
   */
  type: RunStepObjectType;
  /**
   * The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
   */
  status: RunStepObjectStatus;
  /**
   * The details of the run step.
   */
  stepDetails:
    | RunStepDetailsMessageCreationObject
    | RunStepDetailsToolCallsObject;
  /**
   * The last error associated with this run step. Will be `null` if there are no errors.
   */
  lastError: RunStepObjectLastError | null;
  /**
   * The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
   */
  expiredAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the run step was cancelled.
   */
  cancelledAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the run step failed.
   */
  failedAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the run step completed.
   */
  completedAt: number | null;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata: RunStepObjectMetadata | null;
  /**
   * Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
   */
  usage: RunStepCompletionUsage | null;
};

/** @internal */
export const RunStepObjectObject$inboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectObject
> = z.nativeEnum(RunStepObjectObject);

/** @internal */
export const RunStepObjectObject$outboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectObject
> = RunStepObjectObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObjectObject$ {
  /** @deprecated use `RunStepObjectObject$inboundSchema` instead. */
  export const inboundSchema = RunStepObjectObject$inboundSchema;
  /** @deprecated use `RunStepObjectObject$outboundSchema` instead. */
  export const outboundSchema = RunStepObjectObject$outboundSchema;
}

/** @internal */
export const RunStepObjectType$inboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectType
> = z.nativeEnum(RunStepObjectType);

/** @internal */
export const RunStepObjectType$outboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectType
> = RunStepObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObjectType$ {
  /** @deprecated use `RunStepObjectType$inboundSchema` instead. */
  export const inboundSchema = RunStepObjectType$inboundSchema;
  /** @deprecated use `RunStepObjectType$outboundSchema` instead. */
  export const outboundSchema = RunStepObjectType$outboundSchema;
}

/** @internal */
export const RunStepObjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectStatus
> = z.nativeEnum(RunStepObjectStatus);

/** @internal */
export const RunStepObjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectStatus
> = RunStepObjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObjectStatus$ {
  /** @deprecated use `RunStepObjectStatus$inboundSchema` instead. */
  export const inboundSchema = RunStepObjectStatus$inboundSchema;
  /** @deprecated use `RunStepObjectStatus$outboundSchema` instead. */
  export const outboundSchema = RunStepObjectStatus$outboundSchema;
}

/** @internal */
export const StepDetails$inboundSchema: z.ZodType<
  StepDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  RunStepDetailsMessageCreationObject$inboundSchema,
  RunStepDetailsToolCallsObject$inboundSchema,
]);

/** @internal */
export type StepDetails$Outbound =
  | RunStepDetailsMessageCreationObject$Outbound
  | RunStepDetailsToolCallsObject$Outbound;

/** @internal */
export const StepDetails$outboundSchema: z.ZodType<
  StepDetails$Outbound,
  z.ZodTypeDef,
  StepDetails
> = z.union([
  RunStepDetailsMessageCreationObject$outboundSchema,
  RunStepDetailsToolCallsObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StepDetails$ {
  /** @deprecated use `StepDetails$inboundSchema` instead. */
  export const inboundSchema = StepDetails$inboundSchema;
  /** @deprecated use `StepDetails$outboundSchema` instead. */
  export const outboundSchema = StepDetails$outboundSchema;
  /** @deprecated use `StepDetails$Outbound` instead. */
  export type Outbound = StepDetails$Outbound;
}

export function stepDetailsToJSON(stepDetails: StepDetails): string {
  return JSON.stringify(StepDetails$outboundSchema.parse(stepDetails));
}

export function stepDetailsFromJSON(
  jsonString: string,
): SafeParseResult<StepDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StepDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StepDetails' from JSON`,
  );
}

/** @internal */
export const RunStepObjectCode$inboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectCode
> = z.nativeEnum(RunStepObjectCode);

/** @internal */
export const RunStepObjectCode$outboundSchema: z.ZodNativeEnum<
  typeof RunStepObjectCode
> = RunStepObjectCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObjectCode$ {
  /** @deprecated use `RunStepObjectCode$inboundSchema` instead. */
  export const inboundSchema = RunStepObjectCode$inboundSchema;
  /** @deprecated use `RunStepObjectCode$outboundSchema` instead. */
  export const outboundSchema = RunStepObjectCode$outboundSchema;
}

/** @internal */
export const RunStepObjectLastError$inboundSchema: z.ZodType<
  RunStepObjectLastError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: RunStepObjectCode$inboundSchema,
  message: z.string(),
});

/** @internal */
export type RunStepObjectLastError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const RunStepObjectLastError$outboundSchema: z.ZodType<
  RunStepObjectLastError$Outbound,
  z.ZodTypeDef,
  RunStepObjectLastError
> = z.object({
  code: RunStepObjectCode$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObjectLastError$ {
  /** @deprecated use `RunStepObjectLastError$inboundSchema` instead. */
  export const inboundSchema = RunStepObjectLastError$inboundSchema;
  /** @deprecated use `RunStepObjectLastError$outboundSchema` instead. */
  export const outboundSchema = RunStepObjectLastError$outboundSchema;
  /** @deprecated use `RunStepObjectLastError$Outbound` instead. */
  export type Outbound = RunStepObjectLastError$Outbound;
}

export function runStepObjectLastErrorToJSON(
  runStepObjectLastError: RunStepObjectLastError,
): string {
  return JSON.stringify(
    RunStepObjectLastError$outboundSchema.parse(runStepObjectLastError),
  );
}

export function runStepObjectLastErrorFromJSON(
  jsonString: string,
): SafeParseResult<RunStepObjectLastError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunStepObjectLastError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunStepObjectLastError' from JSON`,
  );
}

/** @internal */
export const RunStepObjectMetadata$inboundSchema: z.ZodType<
  RunStepObjectMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type RunStepObjectMetadata$Outbound = {};

/** @internal */
export const RunStepObjectMetadata$outboundSchema: z.ZodType<
  RunStepObjectMetadata$Outbound,
  z.ZodTypeDef,
  RunStepObjectMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObjectMetadata$ {
  /** @deprecated use `RunStepObjectMetadata$inboundSchema` instead. */
  export const inboundSchema = RunStepObjectMetadata$inboundSchema;
  /** @deprecated use `RunStepObjectMetadata$outboundSchema` instead. */
  export const outboundSchema = RunStepObjectMetadata$outboundSchema;
  /** @deprecated use `RunStepObjectMetadata$Outbound` instead. */
  export type Outbound = RunStepObjectMetadata$Outbound;
}

export function runStepObjectMetadataToJSON(
  runStepObjectMetadata: RunStepObjectMetadata,
): string {
  return JSON.stringify(
    RunStepObjectMetadata$outboundSchema.parse(runStepObjectMetadata),
  );
}

export function runStepObjectMetadataFromJSON(
  jsonString: string,
): SafeParseResult<RunStepObjectMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunStepObjectMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunStepObjectMetadata' from JSON`,
  );
}

/** @internal */
export const RunStepObject$inboundSchema: z.ZodType<
  RunStepObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: RunStepObjectObject$inboundSchema,
  created_at: z.number().int(),
  assistant_id: z.string(),
  thread_id: z.string(),
  run_id: z.string(),
  type: RunStepObjectType$inboundSchema,
  status: RunStepObjectStatus$inboundSchema,
  step_details: z.union([
    RunStepDetailsMessageCreationObject$inboundSchema,
    RunStepDetailsToolCallsObject$inboundSchema,
  ]),
  last_error: z.nullable(z.lazy(() => RunStepObjectLastError$inboundSchema)),
  expired_at: z.nullable(z.number().int()),
  cancelled_at: z.nullable(z.number().int()),
  failed_at: z.nullable(z.number().int()),
  completed_at: z.nullable(z.number().int()),
  metadata: z.nullable(z.lazy(() => RunStepObjectMetadata$inboundSchema)),
  usage: z.nullable(RunStepCompletionUsage$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "assistant_id": "assistantId",
    "thread_id": "threadId",
    "run_id": "runId",
    "step_details": "stepDetails",
    "last_error": "lastError",
    "expired_at": "expiredAt",
    "cancelled_at": "cancelledAt",
    "failed_at": "failedAt",
    "completed_at": "completedAt",
  });
});

/** @internal */
export type RunStepObject$Outbound = {
  id: string;
  object: string;
  created_at: number;
  assistant_id: string;
  thread_id: string;
  run_id: string;
  type: string;
  status: string;
  step_details:
    | RunStepDetailsMessageCreationObject$Outbound
    | RunStepDetailsToolCallsObject$Outbound;
  last_error: RunStepObjectLastError$Outbound | null;
  expired_at: number | null;
  cancelled_at: number | null;
  failed_at: number | null;
  completed_at: number | null;
  metadata: RunStepObjectMetadata$Outbound | null;
  usage: RunStepCompletionUsage$Outbound | null;
};

/** @internal */
export const RunStepObject$outboundSchema: z.ZodType<
  RunStepObject$Outbound,
  z.ZodTypeDef,
  RunStepObject
> = z.object({
  id: z.string(),
  object: RunStepObjectObject$outboundSchema,
  createdAt: z.number().int(),
  assistantId: z.string(),
  threadId: z.string(),
  runId: z.string(),
  type: RunStepObjectType$outboundSchema,
  status: RunStepObjectStatus$outboundSchema,
  stepDetails: z.union([
    RunStepDetailsMessageCreationObject$outboundSchema,
    RunStepDetailsToolCallsObject$outboundSchema,
  ]),
  lastError: z.nullable(z.lazy(() => RunStepObjectLastError$outboundSchema)),
  expiredAt: z.nullable(z.number().int()),
  cancelledAt: z.nullable(z.number().int()),
  failedAt: z.nullable(z.number().int()),
  completedAt: z.nullable(z.number().int()),
  metadata: z.nullable(z.lazy(() => RunStepObjectMetadata$outboundSchema)),
  usage: z.nullable(RunStepCompletionUsage$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    assistantId: "assistant_id",
    threadId: "thread_id",
    runId: "run_id",
    stepDetails: "step_details",
    lastError: "last_error",
    expiredAt: "expired_at",
    cancelledAt: "cancelled_at",
    failedAt: "failed_at",
    completedAt: "completed_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunStepObject$ {
  /** @deprecated use `RunStepObject$inboundSchema` instead. */
  export const inboundSchema = RunStepObject$inboundSchema;
  /** @deprecated use `RunStepObject$outboundSchema` instead. */
  export const outboundSchema = RunStepObject$outboundSchema;
  /** @deprecated use `RunStepObject$Outbound` instead. */
  export type Outbound = RunStepObject$Outbound;
}

export function runStepObjectToJSON(runStepObject: RunStepObject): string {
  return JSON.stringify(RunStepObject$outboundSchema.parse(runStepObject));
}

export function runStepObjectFromJSON(
  jsonString: string,
): SafeParseResult<RunStepObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RunStepObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RunStepObject' from JSON`,
  );
}
