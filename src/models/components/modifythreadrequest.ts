/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type ModifyThreadRequestCodeInterpreter = {
  /**
   * A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
};

export type ModifyThreadRequestFileSearch = {
  /**
   * The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
   *
   * @remarks
   */
  vectorStoreIds?: Array<string> | undefined;
};

/**
 * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
 *
 * @remarks
 */
export type ModifyThreadRequestToolResources = {
  codeInterpreter?: ModifyThreadRequestCodeInterpreter | undefined;
  fileSearch?: ModifyThreadRequestFileSearch | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type ModifyThreadRequestMetadata = {};

export type ModifyThreadRequest = {
  /**
   * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   * @remarks
   */
  toolResources?: ModifyThreadRequestToolResources | null | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: ModifyThreadRequestMetadata | null | undefined;
};

/** @internal */
export const ModifyThreadRequestCodeInterpreter$inboundSchema: z.ZodType<
  ModifyThreadRequestCodeInterpreter,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
  });
});

/** @internal */
export type ModifyThreadRequestCodeInterpreter$Outbound = {
  file_ids?: Array<string> | undefined;
};

/** @internal */
export const ModifyThreadRequestCodeInterpreter$outboundSchema: z.ZodType<
  ModifyThreadRequestCodeInterpreter$Outbound,
  z.ZodTypeDef,
  ModifyThreadRequestCodeInterpreter
> = z.object({
  fileIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyThreadRequestCodeInterpreter$ {
  /** @deprecated use `ModifyThreadRequestCodeInterpreter$inboundSchema` instead. */
  export const inboundSchema = ModifyThreadRequestCodeInterpreter$inboundSchema;
  /** @deprecated use `ModifyThreadRequestCodeInterpreter$outboundSchema` instead. */
  export const outboundSchema =
    ModifyThreadRequestCodeInterpreter$outboundSchema;
  /** @deprecated use `ModifyThreadRequestCodeInterpreter$Outbound` instead. */
  export type Outbound = ModifyThreadRequestCodeInterpreter$Outbound;
}

/** @internal */
export const ModifyThreadRequestFileSearch$inboundSchema: z.ZodType<
  ModifyThreadRequestFileSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
  });
});

/** @internal */
export type ModifyThreadRequestFileSearch$Outbound = {
  vector_store_ids?: Array<string> | undefined;
};

/** @internal */
export const ModifyThreadRequestFileSearch$outboundSchema: z.ZodType<
  ModifyThreadRequestFileSearch$Outbound,
  z.ZodTypeDef,
  ModifyThreadRequestFileSearch
> = z.object({
  vectorStoreIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyThreadRequestFileSearch$ {
  /** @deprecated use `ModifyThreadRequestFileSearch$inboundSchema` instead. */
  export const inboundSchema = ModifyThreadRequestFileSearch$inboundSchema;
  /** @deprecated use `ModifyThreadRequestFileSearch$outboundSchema` instead. */
  export const outboundSchema = ModifyThreadRequestFileSearch$outboundSchema;
  /** @deprecated use `ModifyThreadRequestFileSearch$Outbound` instead. */
  export type Outbound = ModifyThreadRequestFileSearch$Outbound;
}

/** @internal */
export const ModifyThreadRequestToolResources$inboundSchema: z.ZodType<
  ModifyThreadRequestToolResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  code_interpreter: z.lazy(() =>
    ModifyThreadRequestCodeInterpreter$inboundSchema
  ).optional(),
  file_search: z.lazy(() => ModifyThreadRequestFileSearch$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "code_interpreter": "codeInterpreter",
    "file_search": "fileSearch",
  });
});

/** @internal */
export type ModifyThreadRequestToolResources$Outbound = {
  code_interpreter?: ModifyThreadRequestCodeInterpreter$Outbound | undefined;
  file_search?: ModifyThreadRequestFileSearch$Outbound | undefined;
};

/** @internal */
export const ModifyThreadRequestToolResources$outboundSchema: z.ZodType<
  ModifyThreadRequestToolResources$Outbound,
  z.ZodTypeDef,
  ModifyThreadRequestToolResources
> = z.object({
  codeInterpreter: z.lazy(() =>
    ModifyThreadRequestCodeInterpreter$outboundSchema
  ).optional(),
  fileSearch: z.lazy(() => ModifyThreadRequestFileSearch$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    codeInterpreter: "code_interpreter",
    fileSearch: "file_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyThreadRequestToolResources$ {
  /** @deprecated use `ModifyThreadRequestToolResources$inboundSchema` instead. */
  export const inboundSchema = ModifyThreadRequestToolResources$inboundSchema;
  /** @deprecated use `ModifyThreadRequestToolResources$outboundSchema` instead. */
  export const outboundSchema = ModifyThreadRequestToolResources$outboundSchema;
  /** @deprecated use `ModifyThreadRequestToolResources$Outbound` instead. */
  export type Outbound = ModifyThreadRequestToolResources$Outbound;
}

/** @internal */
export const ModifyThreadRequestMetadata$inboundSchema: z.ZodType<
  ModifyThreadRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ModifyThreadRequestMetadata$Outbound = {};

/** @internal */
export const ModifyThreadRequestMetadata$outboundSchema: z.ZodType<
  ModifyThreadRequestMetadata$Outbound,
  z.ZodTypeDef,
  ModifyThreadRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyThreadRequestMetadata$ {
  /** @deprecated use `ModifyThreadRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = ModifyThreadRequestMetadata$inboundSchema;
  /** @deprecated use `ModifyThreadRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = ModifyThreadRequestMetadata$outboundSchema;
  /** @deprecated use `ModifyThreadRequestMetadata$Outbound` instead. */
  export type Outbound = ModifyThreadRequestMetadata$Outbound;
}

/** @internal */
export const ModifyThreadRequest$inboundSchema: z.ZodType<
  ModifyThreadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_resources: z.nullable(
    z.lazy(() => ModifyThreadRequestToolResources$inboundSchema),
  ).optional(),
  metadata: z.nullable(z.lazy(() => ModifyThreadRequestMetadata$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_resources": "toolResources",
  });
});

/** @internal */
export type ModifyThreadRequest$Outbound = {
  tool_resources?: ModifyThreadRequestToolResources$Outbound | null | undefined;
  metadata?: ModifyThreadRequestMetadata$Outbound | null | undefined;
};

/** @internal */
export const ModifyThreadRequest$outboundSchema: z.ZodType<
  ModifyThreadRequest$Outbound,
  z.ZodTypeDef,
  ModifyThreadRequest
> = z.object({
  toolResources: z.nullable(
    z.lazy(() => ModifyThreadRequestToolResources$outboundSchema),
  ).optional(),
  metadata: z.nullable(z.lazy(() => ModifyThreadRequestMetadata$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolResources: "tool_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModifyThreadRequest$ {
  /** @deprecated use `ModifyThreadRequest$inboundSchema` instead. */
  export const inboundSchema = ModifyThreadRequest$inboundSchema;
  /** @deprecated use `ModifyThreadRequest$outboundSchema` instead. */
  export const outboundSchema = ModifyThreadRequest$outboundSchema;
  /** @deprecated use `ModifyThreadRequest$Outbound` instead. */
  export type Outbound = ModifyThreadRequest$Outbound;
}
