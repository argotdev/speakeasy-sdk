/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Data = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type AddUploadPartRequest = {
  /**
   * The chunk of bytes for this Part.
   *
   * @remarks
   */
  data: Data | Blob;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type Data$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const AddUploadPartRequest$inboundSchema: z.ZodType<
  AddUploadPartRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type AddUploadPartRequest$Outbound = {
  data: Data$Outbound | Blob;
};

/** @internal */
export const AddUploadPartRequest$outboundSchema: z.ZodType<
  AddUploadPartRequest$Outbound,
  z.ZodTypeDef,
  AddUploadPartRequest
> = z.object({
  data: z.lazy(() => Data$outboundSchema).or(blobLikeSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddUploadPartRequest$ {
  /** @deprecated use `AddUploadPartRequest$inboundSchema` instead. */
  export const inboundSchema = AddUploadPartRequest$inboundSchema;
  /** @deprecated use `AddUploadPartRequest$outboundSchema` instead. */
  export const outboundSchema = AddUploadPartRequest$outboundSchema;
  /** @deprecated use `AddUploadPartRequest$Outbound` instead. */
  export type Outbound = AddUploadPartRequest$Outbound;
}

export function addUploadPartRequestToJSON(
  addUploadPartRequest: AddUploadPartRequest,
): string {
  return JSON.stringify(
    AddUploadPartRequest$outboundSchema.parse(addUploadPartRequest),
  );
}

export function addUploadPartRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddUploadPartRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddUploadPartRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddUploadPartRequest' from JSON`,
  );
}
