/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AssistantsApiResponseFormatOption,
  AssistantsApiResponseFormatOption$inboundSchema,
  AssistantsApiResponseFormatOption$Outbound,
  AssistantsApiResponseFormatOption$outboundSchema,
} from "./assistantsapiresponseformatoption.js";
import {
  AssistantToolsCode,
  AssistantToolsCode$inboundSchema,
  AssistantToolsCode$Outbound,
  AssistantToolsCode$outboundSchema,
} from "./assistanttoolscode.js";
import {
  AssistantToolsFileSearch,
  AssistantToolsFileSearch$inboundSchema,
  AssistantToolsFileSearch$Outbound,
  AssistantToolsFileSearch$outboundSchema,
} from "./assistanttoolsfilesearch.js";
import {
  AssistantToolsFunction,
  AssistantToolsFunction$inboundSchema,
  AssistantToolsFunction$Outbound,
  AssistantToolsFunction$outboundSchema,
} from "./assistanttoolsfunction.js";

/**
 * The object type, which is always `assistant`.
 */
export const AssistantObjectObject = {
  Assistant: "assistant",
} as const;
/**
 * The object type, which is always `assistant`.
 */
export type AssistantObjectObject = ClosedEnum<typeof AssistantObjectObject>;

export type Tools =
  | AssistantToolsCode
  | AssistantToolsFileSearch
  | AssistantToolsFunction;

export type AssistantObjectCodeInterpreter = {
  /**
   * A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
};

export type AssistantObjectFileSearch = {
  /**
   * The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
   *
   * @remarks
   */
  vectorStoreIds?: Array<string> | undefined;
};

/**
 * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
 *
 * @remarks
 */
export type ToolResources = {
  codeInterpreter?: AssistantObjectCodeInterpreter | undefined;
  fileSearch?: AssistantObjectFileSearch | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type Metadata = {};

/**
 * Represents an `assistant` that can call the model and use tools.
 */
export type AssistantObject = {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `assistant`.
   */
  object: AssistantObjectObject;
  /**
   * The Unix timestamp (in seconds) for when the assistant was created.
   */
  createdAt: number;
  /**
   * The name of the assistant. The maximum length is 256 characters.
   *
   * @remarks
   */
  name: string | null;
  /**
   * The description of the assistant. The maximum length is 512 characters.
   *
   * @remarks
   */
  description: string | null;
  /**
   * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
   *
   * @remarks
   */
  model: string;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters.
   *
   * @remarks
   */
  instructions: string | null;
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
   *
   * @remarks
   */
  tools: Array<
    AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
  >;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   * @remarks
   */
  toolResources?: ToolResources | null | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata: Metadata | null;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   * @remarks
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * @remarks
   *
   * We generally recommend altering this or temperature but not both.
   */
  topP?: number | null | undefined;
  /**
   * Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4 Turbo](/docs/models/gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
   *
   * @remarks
   *
   * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
   *
   * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
   */
  responseFormat?: AssistantsApiResponseFormatOption | undefined;
};

/** @internal */
export const AssistantObjectObject$inboundSchema: z.ZodNativeEnum<
  typeof AssistantObjectObject
> = z.nativeEnum(AssistantObjectObject);

/** @internal */
export const AssistantObjectObject$outboundSchema: z.ZodNativeEnum<
  typeof AssistantObjectObject
> = AssistantObjectObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantObjectObject$ {
  /** @deprecated use `AssistantObjectObject$inboundSchema` instead. */
  export const inboundSchema = AssistantObjectObject$inboundSchema;
  /** @deprecated use `AssistantObjectObject$outboundSchema` instead. */
  export const outboundSchema = AssistantObjectObject$outboundSchema;
}

/** @internal */
export const Tools$inboundSchema: z.ZodType<Tools, z.ZodTypeDef, unknown> = z
  .union([
    AssistantToolsCode$inboundSchema,
    AssistantToolsFileSearch$inboundSchema,
    AssistantToolsFunction$inboundSchema,
  ]);

/** @internal */
export type Tools$Outbound =
  | AssistantToolsCode$Outbound
  | AssistantToolsFileSearch$Outbound
  | AssistantToolsFunction$Outbound;

/** @internal */
export const Tools$outboundSchema: z.ZodType<
  Tools$Outbound,
  z.ZodTypeDef,
  Tools
> = z.union([
  AssistantToolsCode$outboundSchema,
  AssistantToolsFileSearch$outboundSchema,
  AssistantToolsFunction$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tools$ {
  /** @deprecated use `Tools$inboundSchema` instead. */
  export const inboundSchema = Tools$inboundSchema;
  /** @deprecated use `Tools$outboundSchema` instead. */
  export const outboundSchema = Tools$outboundSchema;
  /** @deprecated use `Tools$Outbound` instead. */
  export type Outbound = Tools$Outbound;
}

/** @internal */
export const AssistantObjectCodeInterpreter$inboundSchema: z.ZodType<
  AssistantObjectCodeInterpreter,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
  });
});

/** @internal */
export type AssistantObjectCodeInterpreter$Outbound = {
  file_ids?: Array<string> | undefined;
};

/** @internal */
export const AssistantObjectCodeInterpreter$outboundSchema: z.ZodType<
  AssistantObjectCodeInterpreter$Outbound,
  z.ZodTypeDef,
  AssistantObjectCodeInterpreter
> = z.object({
  fileIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantObjectCodeInterpreter$ {
  /** @deprecated use `AssistantObjectCodeInterpreter$inboundSchema` instead. */
  export const inboundSchema = AssistantObjectCodeInterpreter$inboundSchema;
  /** @deprecated use `AssistantObjectCodeInterpreter$outboundSchema` instead. */
  export const outboundSchema = AssistantObjectCodeInterpreter$outboundSchema;
  /** @deprecated use `AssistantObjectCodeInterpreter$Outbound` instead. */
  export type Outbound = AssistantObjectCodeInterpreter$Outbound;
}

/** @internal */
export const AssistantObjectFileSearch$inboundSchema: z.ZodType<
  AssistantObjectFileSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
  });
});

/** @internal */
export type AssistantObjectFileSearch$Outbound = {
  vector_store_ids?: Array<string> | undefined;
};

/** @internal */
export const AssistantObjectFileSearch$outboundSchema: z.ZodType<
  AssistantObjectFileSearch$Outbound,
  z.ZodTypeDef,
  AssistantObjectFileSearch
> = z.object({
  vectorStoreIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantObjectFileSearch$ {
  /** @deprecated use `AssistantObjectFileSearch$inboundSchema` instead. */
  export const inboundSchema = AssistantObjectFileSearch$inboundSchema;
  /** @deprecated use `AssistantObjectFileSearch$outboundSchema` instead. */
  export const outboundSchema = AssistantObjectFileSearch$outboundSchema;
  /** @deprecated use `AssistantObjectFileSearch$Outbound` instead. */
  export type Outbound = AssistantObjectFileSearch$Outbound;
}

/** @internal */
export const ToolResources$inboundSchema: z.ZodType<
  ToolResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  code_interpreter: z.lazy(() => AssistantObjectCodeInterpreter$inboundSchema)
    .optional(),
  file_search: z.lazy(() => AssistantObjectFileSearch$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "code_interpreter": "codeInterpreter",
    "file_search": "fileSearch",
  });
});

/** @internal */
export type ToolResources$Outbound = {
  code_interpreter?: AssistantObjectCodeInterpreter$Outbound | undefined;
  file_search?: AssistantObjectFileSearch$Outbound | undefined;
};

/** @internal */
export const ToolResources$outboundSchema: z.ZodType<
  ToolResources$Outbound,
  z.ZodTypeDef,
  ToolResources
> = z.object({
  codeInterpreter: z.lazy(() => AssistantObjectCodeInterpreter$outboundSchema)
    .optional(),
  fileSearch: z.lazy(() => AssistantObjectFileSearch$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    codeInterpreter: "code_interpreter",
    fileSearch: "file_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolResources$ {
  /** @deprecated use `ToolResources$inboundSchema` instead. */
  export const inboundSchema = ToolResources$inboundSchema;
  /** @deprecated use `ToolResources$outboundSchema` instead. */
  export const outboundSchema = ToolResources$outboundSchema;
  /** @deprecated use `ToolResources$Outbound` instead. */
  export type Outbound = ToolResources$Outbound;
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Metadata$Outbound = {};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

/** @internal */
export const AssistantObject$inboundSchema: z.ZodType<
  AssistantObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: AssistantObjectObject$inboundSchema,
  created_at: z.number().int(),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  model: z.string(),
  instructions: z.nullable(z.string()),
  tools: z.array(
    z.union([
      AssistantToolsCode$inboundSchema,
      AssistantToolsFileSearch$inboundSchema,
      AssistantToolsFunction$inboundSchema,
    ]),
  ),
  tool_resources: z.nullable(z.lazy(() => ToolResources$inboundSchema))
    .optional(),
  metadata: z.nullable(z.lazy(() => Metadata$inboundSchema)),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  response_format: AssistantsApiResponseFormatOption$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "tool_resources": "toolResources",
    "top_p": "topP",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type AssistantObject$Outbound = {
  id: string;
  object: string;
  created_at: number;
  name: string | null;
  description: string | null;
  model: string;
  instructions: string | null;
  tools: Array<
    | AssistantToolsCode$Outbound
    | AssistantToolsFileSearch$Outbound
    | AssistantToolsFunction$Outbound
  >;
  tool_resources?: ToolResources$Outbound | null | undefined;
  metadata: Metadata$Outbound | null;
  temperature: number | null;
  top_p: number | null;
  response_format?: AssistantsApiResponseFormatOption$Outbound | undefined;
};

/** @internal */
export const AssistantObject$outboundSchema: z.ZodType<
  AssistantObject$Outbound,
  z.ZodTypeDef,
  AssistantObject
> = z.object({
  id: z.string(),
  object: AssistantObjectObject$outboundSchema,
  createdAt: z.number().int(),
  name: z.nullable(z.string()),
  description: z.nullable(z.string()),
  model: z.string(),
  instructions: z.nullable(z.string()),
  tools: z.array(
    z.union([
      AssistantToolsCode$outboundSchema,
      AssistantToolsFileSearch$outboundSchema,
      AssistantToolsFunction$outboundSchema,
    ]),
  ),
  toolResources: z.nullable(z.lazy(() => ToolResources$outboundSchema))
    .optional(),
  metadata: z.nullable(z.lazy(() => Metadata$outboundSchema)),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  responseFormat: AssistantsApiResponseFormatOption$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    toolResources: "tool_resources",
    topP: "top_p",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantObject$ {
  /** @deprecated use `AssistantObject$inboundSchema` instead. */
  export const inboundSchema = AssistantObject$inboundSchema;
  /** @deprecated use `AssistantObject$outboundSchema` instead. */
  export const outboundSchema = AssistantObject$outboundSchema;
  /** @deprecated use `AssistantObject$Outbound` instead. */
  export type Outbound = AssistantObject$Outbound;
}
