/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The object type, which is always `file`.
 */
export const OpenAIFileObject = {
  File: "file",
} as const;
/**
 * The object type, which is always `file`.
 */
export type OpenAIFileObject = ClosedEnum<typeof OpenAIFileObject>;

/**
 * The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
 */
export const Purpose = {
  Assistants: "assistants",
  AssistantsOutput: "assistants_output",
  Batch: "batch",
  BatchOutput: "batch_output",
  FineTune: "fine-tune",
  FineTuneResults: "fine-tune-results",
  Vision: "vision",
} as const;
/**
 * The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
 */
export type Purpose = ClosedEnum<typeof Purpose>;

/**
 * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export const Status = {
  Uploaded: "uploaded",
  Processed: "processed",
  Error: "error",
} as const;
/**
 * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
 *
 * @deprecated enum: This will be removed in a future release, please migrate away from it as soon as possible.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * The `File` object represents a document that has been uploaded to OpenAI.
 */
export type OpenAIFile = {
  /**
   * The file identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The size of the file, in bytes.
   */
  bytes: number;
  /**
   * The Unix timestamp (in seconds) for when the file was created.
   */
  createdAt: number;
  /**
   * The name of the file.
   */
  filename: string;
  /**
   * The object type, which is always `file`.
   */
  object: OpenAIFileObject;
  /**
   * The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
   */
  purpose: Purpose;
  /**
   * Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  status: Status;
  /**
   * Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  statusDetails?: string | undefined;
};

/** @internal */
export const OpenAIFileObject$inboundSchema: z.ZodNativeEnum<
  typeof OpenAIFileObject
> = z.nativeEnum(OpenAIFileObject);

/** @internal */
export const OpenAIFileObject$outboundSchema: z.ZodNativeEnum<
  typeof OpenAIFileObject
> = OpenAIFileObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIFileObject$ {
  /** @deprecated use `OpenAIFileObject$inboundSchema` instead. */
  export const inboundSchema = OpenAIFileObject$inboundSchema;
  /** @deprecated use `OpenAIFileObject$outboundSchema` instead. */
  export const outboundSchema = OpenAIFileObject$outboundSchema;
}

/** @internal */
export const Purpose$inboundSchema: z.ZodNativeEnum<typeof Purpose> = z
  .nativeEnum(Purpose);

/** @internal */
export const Purpose$outboundSchema: z.ZodNativeEnum<typeof Purpose> =
  Purpose$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Purpose$ {
  /** @deprecated use `Purpose$inboundSchema` instead. */
  export const inboundSchema = Purpose$inboundSchema;
  /** @deprecated use `Purpose$outboundSchema` instead. */
  export const outboundSchema = Purpose$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const OpenAIFile$inboundSchema: z.ZodType<
  OpenAIFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  bytes: z.number().int(),
  created_at: z.number().int(),
  filename: z.string(),
  object: OpenAIFileObject$inboundSchema,
  purpose: Purpose$inboundSchema,
  status: Status$inboundSchema,
  status_details: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "status_details": "statusDetails",
  });
});

/** @internal */
export type OpenAIFile$Outbound = {
  id: string;
  bytes: number;
  created_at: number;
  filename: string;
  object: string;
  purpose: string;
  status: string;
  status_details?: string | undefined;
};

/** @internal */
export const OpenAIFile$outboundSchema: z.ZodType<
  OpenAIFile$Outbound,
  z.ZodTypeDef,
  OpenAIFile
> = z.object({
  id: z.string(),
  bytes: z.number().int(),
  createdAt: z.number().int(),
  filename: z.string(),
  object: OpenAIFileObject$outboundSchema,
  purpose: Purpose$outboundSchema,
  status: Status$outboundSchema,
  statusDetails: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    statusDetails: "status_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenAIFile$ {
  /** @deprecated use `OpenAIFile$inboundSchema` instead. */
  export const inboundSchema = OpenAIFile$inboundSchema;
  /** @deprecated use `OpenAIFile$outboundSchema` instead. */
  export const outboundSchema = OpenAIFile$outboundSchema;
  /** @deprecated use `OpenAIFile$Outbound` instead. */
  export type Outbound = OpenAIFile$Outbound;
}

export function openAIFileToJSON(openAIFile: OpenAIFile): string {
  return JSON.stringify(OpenAIFile$outboundSchema.parse(openAIFile));
}

export function openAIFileFromJSON(
  jsonString: string,
): SafeParseResult<OpenAIFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenAIFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenAIFile' from JSON`,
  );
}
