/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Always `other`.
 */
export const OtherChunkingStrategyResponseParamType = {
  Other: "other",
} as const;
/**
 * Always `other`.
 */
export type OtherChunkingStrategyResponseParamType = ClosedEnum<
  typeof OtherChunkingStrategyResponseParamType
>;

/**
 * This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
 */
export type OtherChunkingStrategyResponseParam = {
  /**
   * Always `other`.
   */
  type: OtherChunkingStrategyResponseParamType;
};

/** @internal */
export const OtherChunkingStrategyResponseParamType$inboundSchema:
  z.ZodNativeEnum<typeof OtherChunkingStrategyResponseParamType> = z.nativeEnum(
    OtherChunkingStrategyResponseParamType,
  );

/** @internal */
export const OtherChunkingStrategyResponseParamType$outboundSchema:
  z.ZodNativeEnum<typeof OtherChunkingStrategyResponseParamType> =
    OtherChunkingStrategyResponseParamType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OtherChunkingStrategyResponseParamType$ {
  /** @deprecated use `OtherChunkingStrategyResponseParamType$inboundSchema` instead. */
  export const inboundSchema =
    OtherChunkingStrategyResponseParamType$inboundSchema;
  /** @deprecated use `OtherChunkingStrategyResponseParamType$outboundSchema` instead. */
  export const outboundSchema =
    OtherChunkingStrategyResponseParamType$outboundSchema;
}

/** @internal */
export const OtherChunkingStrategyResponseParam$inboundSchema: z.ZodType<
  OtherChunkingStrategyResponseParam,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: OtherChunkingStrategyResponseParamType$inboundSchema,
});

/** @internal */
export type OtherChunkingStrategyResponseParam$Outbound = {
  type: string;
};

/** @internal */
export const OtherChunkingStrategyResponseParam$outboundSchema: z.ZodType<
  OtherChunkingStrategyResponseParam$Outbound,
  z.ZodTypeDef,
  OtherChunkingStrategyResponseParam
> = z.object({
  type: OtherChunkingStrategyResponseParamType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OtherChunkingStrategyResponseParam$ {
  /** @deprecated use `OtherChunkingStrategyResponseParam$inboundSchema` instead. */
  export const inboundSchema = OtherChunkingStrategyResponseParam$inboundSchema;
  /** @deprecated use `OtherChunkingStrategyResponseParam$outboundSchema` instead. */
  export const outboundSchema =
    OtherChunkingStrategyResponseParam$outboundSchema;
  /** @deprecated use `OtherChunkingStrategyResponseParam$Outbound` instead. */
  export type Outbound = OtherChunkingStrategyResponseParam$Outbound;
}

export function otherChunkingStrategyResponseParamToJSON(
  otherChunkingStrategyResponseParam: OtherChunkingStrategyResponseParam,
): string {
  return JSON.stringify(
    OtherChunkingStrategyResponseParam$outboundSchema.parse(
      otherChunkingStrategyResponseParam,
    ),
  );
}

export function otherChunkingStrategyResponseParamFromJSON(
  jsonString: string,
): SafeParseResult<OtherChunkingStrategyResponseParam, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OtherChunkingStrategyResponseParam$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OtherChunkingStrategyResponseParam' from JSON`,
  );
}
