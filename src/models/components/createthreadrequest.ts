/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CreateMessageRequest,
  CreateMessageRequest$inboundSchema,
  CreateMessageRequest$Outbound,
  CreateMessageRequest$outboundSchema,
} from "./createmessagerequest.js";

export type CreateThreadRequestCodeInterpreter = {
  /**
   * A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
};

/**
 * Always `static`.
 */
export const CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type = {
  Static: "static",
} as const;
/**
 * Always `static`.
 */
export type CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type =
  ClosedEnum<
    typeof CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type
  >;

export type CreateThreadRequestChunkingStrategyToolResourcesStatic = {
  /**
   * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
   */
  maxChunkSizeTokens: number;
  /**
   * The number of tokens that overlap between chunks. The default value is `400`.
   *
   * @remarks
   *
   * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
   */
  chunkOverlapTokens: number;
};

export type CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy =
  {
    /**
     * Always `static`.
     */
    type: CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type;
    static: CreateThreadRequestChunkingStrategyToolResourcesStatic;
  };

/**
 * Always `auto`.
 */
export const CreateThreadRequestChunkingStrategyToolResourcesFileSearchType = {
  Auto: "auto",
} as const;
/**
 * Always `auto`.
 */
export type CreateThreadRequestChunkingStrategyToolResourcesFileSearchType =
  ClosedEnum<
    typeof CreateThreadRequestChunkingStrategyToolResourcesFileSearchType
  >;

/**
 * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
 */
export type CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy =
  {
    /**
     * Always `auto`.
     */
    type: CreateThreadRequestChunkingStrategyToolResourcesFileSearchType;
  };

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
 */
export type CreateThreadRequestFileSearchToolResourcesChunkingStrategy =
  | CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy
  | CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy;

/**
 * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateThreadRequestFileSearchToolResourcesMetadata = {};

export type CreateThreadRequestFileSearchToolResourcesVectorStores = {
  /**
   * A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
  /**
   * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
   */
  chunkingStrategy?:
    | CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy
    | CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy
    | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateThreadRequestFileSearchToolResourcesMetadata | undefined;
};

export type CreateThreadRequestFileSearch2 = {
  /**
   * The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
   *
   * @remarks
   */
  vectorStoreIds?: Array<string> | undefined;
  /**
   * A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
   *
   * @remarks
   */
  vectorStores: Array<CreateThreadRequestFileSearchToolResourcesVectorStores>;
};

/**
 * Always `static`.
 */
export const CreateThreadRequestChunkingStrategyToolResourcesType = {
  Static: "static",
} as const;
/**
 * Always `static`.
 */
export type CreateThreadRequestChunkingStrategyToolResourcesType = ClosedEnum<
  typeof CreateThreadRequestChunkingStrategyToolResourcesType
>;

export type CreateThreadRequestChunkingStrategyStatic = {
  /**
   * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
   */
  maxChunkSizeTokens: number;
  /**
   * The number of tokens that overlap between chunks. The default value is `400`.
   *
   * @remarks
   *
   * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
   */
  chunkOverlapTokens: number;
};

export type CreateThreadRequestChunkingStrategyStaticChunkingStrategy = {
  /**
   * Always `static`.
   */
  type: CreateThreadRequestChunkingStrategyToolResourcesType;
  static: CreateThreadRequestChunkingStrategyStatic;
};

/**
 * Always `auto`.
 */
export const CreateThreadRequestChunkingStrategyType = {
  Auto: "auto",
} as const;
/**
 * Always `auto`.
 */
export type CreateThreadRequestChunkingStrategyType = ClosedEnum<
  typeof CreateThreadRequestChunkingStrategyType
>;

/**
 * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
 */
export type CreateThreadRequestChunkingStrategyAutoChunkingStrategy = {
  /**
   * Always `auto`.
   */
  type: CreateThreadRequestChunkingStrategyType;
};

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
 */
export type CreateThreadRequestFileSearchChunkingStrategy =
  | CreateThreadRequestChunkingStrategyAutoChunkingStrategy
  | CreateThreadRequestChunkingStrategyStaticChunkingStrategy;

/**
 * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateThreadRequestFileSearchMetadata = {};

export type CreateThreadRequestFileSearchVectorStores = {
  /**
   * A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
  /**
   * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
   */
  chunkingStrategy?:
    | CreateThreadRequestChunkingStrategyAutoChunkingStrategy
    | CreateThreadRequestChunkingStrategyStaticChunkingStrategy
    | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateThreadRequestFileSearchMetadata | undefined;
};

export type CreateThreadRequestFileSearch1 = {
  /**
   * The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.
   *
   * @remarks
   */
  vectorStoreIds: Array<string>;
  /**
   * A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.
   *
   * @remarks
   */
  vectorStores?: Array<CreateThreadRequestFileSearchVectorStores> | undefined;
};

export type CreateThreadRequestFileSearch =
  | CreateThreadRequestFileSearch1
  | CreateThreadRequestFileSearch2;

/**
 * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
 *
 * @remarks
 */
export type CreateThreadRequestToolResources = {
  codeInterpreter?: CreateThreadRequestCodeInterpreter | undefined;
  fileSearch?:
    | CreateThreadRequestFileSearch1
    | CreateThreadRequestFileSearch2
    | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateThreadRequestMetadata = {};

export type CreateThreadRequest = {
  /**
   * A list of [messages](/docs/api-reference/messages) to start the thread with.
   */
  messages?: Array<CreateMessageRequest> | undefined;
  /**
   * A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   * @remarks
   */
  toolResources?: CreateThreadRequestToolResources | null | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateThreadRequestMetadata | null | undefined;
};

/** @internal */
export const CreateThreadRequestCodeInterpreter$inboundSchema: z.ZodType<
  CreateThreadRequestCodeInterpreter,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
  });
});

/** @internal */
export type CreateThreadRequestCodeInterpreter$Outbound = {
  file_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateThreadRequestCodeInterpreter$outboundSchema: z.ZodType<
  CreateThreadRequestCodeInterpreter$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestCodeInterpreter
> = z.object({
  fileIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestCodeInterpreter$ {
  /** @deprecated use `CreateThreadRequestCodeInterpreter$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequestCodeInterpreter$inboundSchema;
  /** @deprecated use `CreateThreadRequestCodeInterpreter$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestCodeInterpreter$outboundSchema;
  /** @deprecated use `CreateThreadRequestCodeInterpreter$Outbound` instead. */
  export type Outbound = CreateThreadRequestCodeInterpreter$Outbound;
}

export function createThreadRequestCodeInterpreterToJSON(
  createThreadRequestCodeInterpreter: CreateThreadRequestCodeInterpreter,
): string {
  return JSON.stringify(
    CreateThreadRequestCodeInterpreter$outboundSchema.parse(
      createThreadRequestCodeInterpreter,
    ),
  );
}

export function createThreadRequestCodeInterpreterFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestCodeInterpreter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestCodeInterpreter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestCodeInterpreter' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type
  > = z.nativeEnum(
    CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type,
  );

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type
  > =
    CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$outboundSchema;
}

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesStatic$inboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyToolResourcesStatic,
    z.ZodTypeDef,
    unknown
  > = z.object({
    max_chunk_size_tokens: z.number().int(),
    chunk_overlap_tokens: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "max_chunk_size_tokens": "maxChunkSizeTokens",
      "chunk_overlap_tokens": "chunkOverlapTokens",
    });
  });

/** @internal */
export type CreateThreadRequestChunkingStrategyToolResourcesStatic$Outbound = {
  max_chunk_size_tokens: number;
  chunk_overlap_tokens: number;
};

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesStatic$outboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyToolResourcesStatic$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestChunkingStrategyToolResourcesStatic
  > = z.object({
    maxChunkSizeTokens: z.number().int(),
    chunkOverlapTokens: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      maxChunkSizeTokens: "max_chunk_size_tokens",
      chunkOverlapTokens: "chunk_overlap_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyToolResourcesStatic$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesStatic$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesStatic$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesStatic$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesStatic$outboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesStatic$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestChunkingStrategyToolResourcesStatic$Outbound;
}

export function createThreadRequestChunkingStrategyToolResourcesStaticToJSON(
  createThreadRequestChunkingStrategyToolResourcesStatic:
    CreateThreadRequestChunkingStrategyToolResourcesStatic,
): string {
  return JSON.stringify(
    CreateThreadRequestChunkingStrategyToolResourcesStatic$outboundSchema.parse(
      createThreadRequestChunkingStrategyToolResourcesStatic,
    ),
  );
}

export function createThreadRequestChunkingStrategyToolResourcesStaticFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestChunkingStrategyToolResourcesStatic,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestChunkingStrategyToolResourcesStatic$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestChunkingStrategyToolResourcesStatic' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$inboundSchema,
    static: z.lazy(() =>
      CreateThreadRequestChunkingStrategyToolResourcesStatic$inboundSchema
    ),
  });

/** @internal */
export type CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$Outbound =
  {
    type: string;
    static: CreateThreadRequestChunkingStrategyToolResourcesStatic$Outbound;
  };

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy
  > = z.object({
    type:
      CreateThreadRequestChunkingStrategyToolResourcesFileSearch2Type$outboundSchema,
    static: z.lazy(() =>
      CreateThreadRequestChunkingStrategyToolResourcesStatic$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$Outbound;
}

export function createThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategyToJSON(
  createThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy:
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy,
): string {
  return JSON.stringify(
    CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$outboundSchema
      .parse(
        createThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy,
      ),
  );
}

export function createThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateThreadRequestChunkingStrategyToolResourcesFileSearchType
  > = z.nativeEnum(
    CreateThreadRequestChunkingStrategyToolResourcesFileSearchType,
  );

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateThreadRequestChunkingStrategyToolResourcesFileSearchType
  > =
    CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema;
}

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema,
  });

/** @internal */
export type CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$Outbound =
  {
    type: string;
  };

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy
  > = z.object({
    type:
      CreateThreadRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$Outbound;
}

export function createThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategyToJSON(
  createThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy:
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy,
): string {
  return JSON.stringify(
    CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$outboundSchema
      .parse(
        createThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy,
      ),
  );
}

export function createThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearchToolResourcesChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$inboundSchema
    ),
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$inboundSchema
    ),
  ]);

/** @internal */
export type CreateThreadRequestFileSearchToolResourcesChunkingStrategy$Outbound =
  | CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$Outbound
  | CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$Outbound;

/** @internal */
export const CreateThreadRequestFileSearchToolResourcesChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy
  > = z.union([
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$outboundSchema
    ),
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearchToolResourcesChunkingStrategy$ {
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy$Outbound;
}

export function createThreadRequestFileSearchToolResourcesChunkingStrategyToJSON(
  createThreadRequestFileSearchToolResourcesChunkingStrategy:
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearchToolResourcesChunkingStrategy$outboundSchema
      .parse(createThreadRequestFileSearchToolResourcesChunkingStrategy),
  );
}

export function createThreadRequestFileSearchToolResourcesChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestFileSearchToolResourcesChunkingStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestFileSearchToolResourcesChunkingStrategy$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestFileSearchToolResourcesChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearchToolResourcesMetadata$inboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchToolResourcesMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type CreateThreadRequestFileSearchToolResourcesMetadata$Outbound = {};

/** @internal */
export const CreateThreadRequestFileSearchToolResourcesMetadata$outboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchToolResourcesMetadata$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestFileSearchToolResourcesMetadata
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearchToolResourcesMetadata$ {
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestFileSearchToolResourcesMetadata$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestFileSearchToolResourcesMetadata$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesMetadata$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestFileSearchToolResourcesMetadata$Outbound;
}

export function createThreadRequestFileSearchToolResourcesMetadataToJSON(
  createThreadRequestFileSearchToolResourcesMetadata:
    CreateThreadRequestFileSearchToolResourcesMetadata,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearchToolResourcesMetadata$outboundSchema.parse(
      createThreadRequestFileSearchToolResourcesMetadata,
    ),
  );
}

export function createThreadRequestFileSearchToolResourcesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestFileSearchToolResourcesMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestFileSearchToolResourcesMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateThreadRequestFileSearchToolResourcesMetadata' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearchToolResourcesVectorStores$inboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchToolResourcesVectorStores,
    z.ZodTypeDef,
    unknown
  > = z.object({
    file_ids: z.array(z.string()).optional(),
    chunking_strategy: z.union([
      z.lazy(() =>
        CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$inboundSchema
      ),
      z.lazy(() =>
        CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$inboundSchema
      ),
    ]).optional(),
    metadata: z.lazy(() =>
      CreateThreadRequestFileSearchToolResourcesMetadata$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "file_ids": "fileIds",
      "chunking_strategy": "chunkingStrategy",
    });
  });

/** @internal */
export type CreateThreadRequestFileSearchToolResourcesVectorStores$Outbound = {
  file_ids?: Array<string> | undefined;
  chunking_strategy?:
    | CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$Outbound
    | CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$Outbound
    | undefined;
  metadata?:
    | CreateThreadRequestFileSearchToolResourcesMetadata$Outbound
    | undefined;
};

/** @internal */
export const CreateThreadRequestFileSearchToolResourcesVectorStores$outboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchToolResourcesVectorStores$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestFileSearchToolResourcesVectorStores
  > = z.object({
    fileIds: z.array(z.string()).optional(),
    chunkingStrategy: z.union([
      z.lazy(() =>
        CreateThreadRequestChunkingStrategyToolResourcesAutoChunkingStrategy$outboundSchema
      ),
      z.lazy(() =>
        CreateThreadRequestChunkingStrategyToolResourcesStaticChunkingStrategy$outboundSchema
      ),
    ]).optional(),
    metadata: z.lazy(() =>
      CreateThreadRequestFileSearchToolResourcesMetadata$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      fileIds: "file_ids",
      chunkingStrategy: "chunking_strategy",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearchToolResourcesVectorStores$ {
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesVectorStores$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestFileSearchToolResourcesVectorStores$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesVectorStores$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestFileSearchToolResourcesVectorStores$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchToolResourcesVectorStores$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestFileSearchToolResourcesVectorStores$Outbound;
}

export function createThreadRequestFileSearchToolResourcesVectorStoresToJSON(
  createThreadRequestFileSearchToolResourcesVectorStores:
    CreateThreadRequestFileSearchToolResourcesVectorStores,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearchToolResourcesVectorStores$outboundSchema.parse(
      createThreadRequestFileSearchToolResourcesVectorStores,
    ),
  );
}

export function createThreadRequestFileSearchToolResourcesVectorStoresFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestFileSearchToolResourcesVectorStores,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestFileSearchToolResourcesVectorStores$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestFileSearchToolResourcesVectorStores' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearch2$inboundSchema: z.ZodType<
  CreateThreadRequestFileSearch2,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()).optional(),
  vector_stores: z.array(
    z.lazy(() =>
      CreateThreadRequestFileSearchToolResourcesVectorStores$inboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
    "vector_stores": "vectorStores",
  });
});

/** @internal */
export type CreateThreadRequestFileSearch2$Outbound = {
  vector_store_ids?: Array<string> | undefined;
  vector_stores: Array<
    CreateThreadRequestFileSearchToolResourcesVectorStores$Outbound
  >;
};

/** @internal */
export const CreateThreadRequestFileSearch2$outboundSchema: z.ZodType<
  CreateThreadRequestFileSearch2$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestFileSearch2
> = z.object({
  vectorStoreIds: z.array(z.string()).optional(),
  vectorStores: z.array(
    z.lazy(() =>
      CreateThreadRequestFileSearchToolResourcesVectorStores$outboundSchema
    ),
  ),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
    vectorStores: "vector_stores",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearch2$ {
  /** @deprecated use `CreateThreadRequestFileSearch2$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequestFileSearch2$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearch2$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequestFileSearch2$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearch2$Outbound` instead. */
  export type Outbound = CreateThreadRequestFileSearch2$Outbound;
}

export function createThreadRequestFileSearch2ToJSON(
  createThreadRequestFileSearch2: CreateThreadRequestFileSearch2,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearch2$outboundSchema.parse(
      createThreadRequestFileSearch2,
    ),
  );
}

export function createThreadRequestFileSearch2FromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestFileSearch2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequestFileSearch2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestFileSearch2' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesType$inboundSchema:
  z.ZodNativeEnum<typeof CreateThreadRequestChunkingStrategyToolResourcesType> =
    z.nativeEnum(CreateThreadRequestChunkingStrategyToolResourcesType);

/** @internal */
export const CreateThreadRequestChunkingStrategyToolResourcesType$outboundSchema:
  z.ZodNativeEnum<typeof CreateThreadRequestChunkingStrategyToolResourcesType> =
    CreateThreadRequestChunkingStrategyToolResourcesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyToolResourcesType$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesType$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesType$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyToolResourcesType$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyToolResourcesType$outboundSchema;
}

/** @internal */
export const CreateThreadRequestChunkingStrategyStatic$inboundSchema: z.ZodType<
  CreateThreadRequestChunkingStrategyStatic,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_chunk_size_tokens: z.number().int(),
  chunk_overlap_tokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "max_chunk_size_tokens": "maxChunkSizeTokens",
    "chunk_overlap_tokens": "chunkOverlapTokens",
  });
});

/** @internal */
export type CreateThreadRequestChunkingStrategyStatic$Outbound = {
  max_chunk_size_tokens: number;
  chunk_overlap_tokens: number;
};

/** @internal */
export const CreateThreadRequestChunkingStrategyStatic$outboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyStatic$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestChunkingStrategyStatic
  > = z.object({
    maxChunkSizeTokens: z.number().int(),
    chunkOverlapTokens: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      maxChunkSizeTokens: "max_chunk_size_tokens",
      chunkOverlapTokens: "chunk_overlap_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyStatic$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyStatic$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyStatic$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyStatic$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyStatic$outboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyStatic$Outbound` instead. */
  export type Outbound = CreateThreadRequestChunkingStrategyStatic$Outbound;
}

export function createThreadRequestChunkingStrategyStaticToJSON(
  createThreadRequestChunkingStrategyStatic:
    CreateThreadRequestChunkingStrategyStatic,
): string {
  return JSON.stringify(
    CreateThreadRequestChunkingStrategyStatic$outboundSchema.parse(
      createThreadRequestChunkingStrategyStatic,
    ),
  );
}

export function createThreadRequestChunkingStrategyStaticFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestChunkingStrategyStatic,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestChunkingStrategyStatic$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateThreadRequestChunkingStrategyStatic' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestChunkingStrategyStaticChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: CreateThreadRequestChunkingStrategyToolResourcesType$inboundSchema,
    static: z.lazy(() =>
      CreateThreadRequestChunkingStrategyStatic$inboundSchema
    ),
  });

/** @internal */
export type CreateThreadRequestChunkingStrategyStaticChunkingStrategy$Outbound =
  {
    type: string;
    static: CreateThreadRequestChunkingStrategyStatic$Outbound;
  };

/** @internal */
export const CreateThreadRequestChunkingStrategyStaticChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy
  > = z.object({
    type: CreateThreadRequestChunkingStrategyToolResourcesType$outboundSchema,
    static: z.lazy(() =>
      CreateThreadRequestChunkingStrategyStatic$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyStaticChunkingStrategy$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyStaticChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyStaticChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyStaticChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy$Outbound;
}

export function createThreadRequestChunkingStrategyStaticChunkingStrategyToJSON(
  createThreadRequestChunkingStrategyStaticChunkingStrategy:
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy,
): string {
  return JSON.stringify(
    CreateThreadRequestChunkingStrategyStaticChunkingStrategy$outboundSchema
      .parse(createThreadRequestChunkingStrategyStaticChunkingStrategy),
  );
}

export function createThreadRequestChunkingStrategyStaticChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestChunkingStrategyStaticChunkingStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestChunkingStrategyStaticChunkingStrategy$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestChunkingStrategyStaticChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestChunkingStrategyType$inboundSchema:
  z.ZodNativeEnum<typeof CreateThreadRequestChunkingStrategyType> = z
    .nativeEnum(CreateThreadRequestChunkingStrategyType);

/** @internal */
export const CreateThreadRequestChunkingStrategyType$outboundSchema:
  z.ZodNativeEnum<typeof CreateThreadRequestChunkingStrategyType> =
    CreateThreadRequestChunkingStrategyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyType$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyType$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyType$outboundSchema;
}

/** @internal */
export const CreateThreadRequestChunkingStrategyAutoChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: CreateThreadRequestChunkingStrategyType$inboundSchema,
  });

/** @internal */
export type CreateThreadRequestChunkingStrategyAutoChunkingStrategy$Outbound = {
  type: string;
};

/** @internal */
export const CreateThreadRequestChunkingStrategyAutoChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy
  > = z.object({
    type: CreateThreadRequestChunkingStrategyType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestChunkingStrategyAutoChunkingStrategy$ {
  /** @deprecated use `CreateThreadRequestChunkingStrategyAutoChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyAutoChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateThreadRequestChunkingStrategyAutoChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy$Outbound;
}

export function createThreadRequestChunkingStrategyAutoChunkingStrategyToJSON(
  createThreadRequestChunkingStrategyAutoChunkingStrategy:
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy,
): string {
  return JSON.stringify(
    CreateThreadRequestChunkingStrategyAutoChunkingStrategy$outboundSchema
      .parse(createThreadRequestChunkingStrategyAutoChunkingStrategy),
  );
}

export function createThreadRequestChunkingStrategyAutoChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestChunkingStrategyAutoChunkingStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestChunkingStrategyAutoChunkingStrategy$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestChunkingStrategyAutoChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearchChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyAutoChunkingStrategy$inboundSchema
    ),
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyStaticChunkingStrategy$inboundSchema
    ),
  ]);

/** @internal */
export type CreateThreadRequestFileSearchChunkingStrategy$Outbound =
  | CreateThreadRequestChunkingStrategyAutoChunkingStrategy$Outbound
  | CreateThreadRequestChunkingStrategyStaticChunkingStrategy$Outbound;

/** @internal */
export const CreateThreadRequestFileSearchChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestFileSearchChunkingStrategy
  > = z.union([
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyAutoChunkingStrategy$outboundSchema
    ),
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyStaticChunkingStrategy$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearchChunkingStrategy$ {
  /** @deprecated use `CreateThreadRequestFileSearchChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestFileSearchChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestFileSearchChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchChunkingStrategy$Outbound` instead. */
  export type Outbound = CreateThreadRequestFileSearchChunkingStrategy$Outbound;
}

export function createThreadRequestFileSearchChunkingStrategyToJSON(
  createThreadRequestFileSearchChunkingStrategy:
    CreateThreadRequestFileSearchChunkingStrategy,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearchChunkingStrategy$outboundSchema.parse(
      createThreadRequestFileSearchChunkingStrategy,
    ),
  );
}

export function createThreadRequestFileSearchChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestFileSearchChunkingStrategy,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestFileSearchChunkingStrategy$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateThreadRequestFileSearchChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearchMetadata$inboundSchema: z.ZodType<
  CreateThreadRequestFileSearchMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateThreadRequestFileSearchMetadata$Outbound = {};

/** @internal */
export const CreateThreadRequestFileSearchMetadata$outboundSchema: z.ZodType<
  CreateThreadRequestFileSearchMetadata$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestFileSearchMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearchMetadata$ {
  /** @deprecated use `CreateThreadRequestFileSearchMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestFileSearchMetadata$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestFileSearchMetadata$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchMetadata$Outbound` instead. */
  export type Outbound = CreateThreadRequestFileSearchMetadata$Outbound;
}

export function createThreadRequestFileSearchMetadataToJSON(
  createThreadRequestFileSearchMetadata: CreateThreadRequestFileSearchMetadata,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearchMetadata$outboundSchema.parse(
      createThreadRequestFileSearchMetadata,
    ),
  );
}

export function createThreadRequestFileSearchMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestFileSearchMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestFileSearchMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestFileSearchMetadata' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearchVectorStores$inboundSchema: z.ZodType<
  CreateThreadRequestFileSearchVectorStores,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
  chunking_strategy: z.union([
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyAutoChunkingStrategy$inboundSchema
    ),
    z.lazy(() =>
      CreateThreadRequestChunkingStrategyStaticChunkingStrategy$inboundSchema
    ),
  ]).optional(),
  metadata: z.lazy(() => CreateThreadRequestFileSearchMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
    "chunking_strategy": "chunkingStrategy",
  });
});

/** @internal */
export type CreateThreadRequestFileSearchVectorStores$Outbound = {
  file_ids?: Array<string> | undefined;
  chunking_strategy?:
    | CreateThreadRequestChunkingStrategyAutoChunkingStrategy$Outbound
    | CreateThreadRequestChunkingStrategyStaticChunkingStrategy$Outbound
    | undefined;
  metadata?: CreateThreadRequestFileSearchMetadata$Outbound | undefined;
};

/** @internal */
export const CreateThreadRequestFileSearchVectorStores$outboundSchema:
  z.ZodType<
    CreateThreadRequestFileSearchVectorStores$Outbound,
    z.ZodTypeDef,
    CreateThreadRequestFileSearchVectorStores
  > = z.object({
    fileIds: z.array(z.string()).optional(),
    chunkingStrategy: z.union([
      z.lazy(() =>
        CreateThreadRequestChunkingStrategyAutoChunkingStrategy$outboundSchema
      ),
      z.lazy(() =>
        CreateThreadRequestChunkingStrategyStaticChunkingStrategy$outboundSchema
      ),
    ]).optional(),
    metadata: z.lazy(() => CreateThreadRequestFileSearchMetadata$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      fileIds: "file_ids",
      chunkingStrategy: "chunking_strategy",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearchVectorStores$ {
  /** @deprecated use `CreateThreadRequestFileSearchVectorStores$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadRequestFileSearchVectorStores$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchVectorStores$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadRequestFileSearchVectorStores$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearchVectorStores$Outbound` instead. */
  export type Outbound = CreateThreadRequestFileSearchVectorStores$Outbound;
}

export function createThreadRequestFileSearchVectorStoresToJSON(
  createThreadRequestFileSearchVectorStores:
    CreateThreadRequestFileSearchVectorStores,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearchVectorStores$outboundSchema.parse(
      createThreadRequestFileSearchVectorStores,
    ),
  );
}

export function createThreadRequestFileSearchVectorStoresFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateThreadRequestFileSearchVectorStores,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateThreadRequestFileSearchVectorStores$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateThreadRequestFileSearchVectorStores' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearch1$inboundSchema: z.ZodType<
  CreateThreadRequestFileSearch1,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()),
  vector_stores: z.array(
    z.lazy(() => CreateThreadRequestFileSearchVectorStores$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
    "vector_stores": "vectorStores",
  });
});

/** @internal */
export type CreateThreadRequestFileSearch1$Outbound = {
  vector_store_ids: Array<string>;
  vector_stores?:
    | Array<CreateThreadRequestFileSearchVectorStores$Outbound>
    | undefined;
};

/** @internal */
export const CreateThreadRequestFileSearch1$outboundSchema: z.ZodType<
  CreateThreadRequestFileSearch1$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestFileSearch1
> = z.object({
  vectorStoreIds: z.array(z.string()),
  vectorStores: z.array(
    z.lazy(() => CreateThreadRequestFileSearchVectorStores$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
    vectorStores: "vector_stores",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearch1$ {
  /** @deprecated use `CreateThreadRequestFileSearch1$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequestFileSearch1$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearch1$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequestFileSearch1$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearch1$Outbound` instead. */
  export type Outbound = CreateThreadRequestFileSearch1$Outbound;
}

export function createThreadRequestFileSearch1ToJSON(
  createThreadRequestFileSearch1: CreateThreadRequestFileSearch1,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearch1$outboundSchema.parse(
      createThreadRequestFileSearch1,
    ),
  );
}

export function createThreadRequestFileSearch1FromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestFileSearch1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequestFileSearch1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestFileSearch1' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestFileSearch$inboundSchema: z.ZodType<
  CreateThreadRequestFileSearch,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateThreadRequestFileSearch1$inboundSchema),
  z.lazy(() => CreateThreadRequestFileSearch2$inboundSchema),
]);

/** @internal */
export type CreateThreadRequestFileSearch$Outbound =
  | CreateThreadRequestFileSearch1$Outbound
  | CreateThreadRequestFileSearch2$Outbound;

/** @internal */
export const CreateThreadRequestFileSearch$outboundSchema: z.ZodType<
  CreateThreadRequestFileSearch$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestFileSearch
> = z.union([
  z.lazy(() => CreateThreadRequestFileSearch1$outboundSchema),
  z.lazy(() => CreateThreadRequestFileSearch2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestFileSearch$ {
  /** @deprecated use `CreateThreadRequestFileSearch$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequestFileSearch$inboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearch$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequestFileSearch$outboundSchema;
  /** @deprecated use `CreateThreadRequestFileSearch$Outbound` instead. */
  export type Outbound = CreateThreadRequestFileSearch$Outbound;
}

export function createThreadRequestFileSearchToJSON(
  createThreadRequestFileSearch: CreateThreadRequestFileSearch,
): string {
  return JSON.stringify(
    CreateThreadRequestFileSearch$outboundSchema.parse(
      createThreadRequestFileSearch,
    ),
  );
}

export function createThreadRequestFileSearchFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestFileSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequestFileSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestFileSearch' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestToolResources$inboundSchema: z.ZodType<
  CreateThreadRequestToolResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  code_interpreter: z.lazy(() =>
    CreateThreadRequestCodeInterpreter$inboundSchema
  ).optional(),
  file_search: z.union([
    z.lazy(() => CreateThreadRequestFileSearch1$inboundSchema),
    z.lazy(() => CreateThreadRequestFileSearch2$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "code_interpreter": "codeInterpreter",
    "file_search": "fileSearch",
  });
});

/** @internal */
export type CreateThreadRequestToolResources$Outbound = {
  code_interpreter?: CreateThreadRequestCodeInterpreter$Outbound | undefined;
  file_search?:
    | CreateThreadRequestFileSearch1$Outbound
    | CreateThreadRequestFileSearch2$Outbound
    | undefined;
};

/** @internal */
export const CreateThreadRequestToolResources$outboundSchema: z.ZodType<
  CreateThreadRequestToolResources$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestToolResources
> = z.object({
  codeInterpreter: z.lazy(() =>
    CreateThreadRequestCodeInterpreter$outboundSchema
  ).optional(),
  fileSearch: z.union([
    z.lazy(() => CreateThreadRequestFileSearch1$outboundSchema),
    z.lazy(() => CreateThreadRequestFileSearch2$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    codeInterpreter: "code_interpreter",
    fileSearch: "file_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestToolResources$ {
  /** @deprecated use `CreateThreadRequestToolResources$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequestToolResources$inboundSchema;
  /** @deprecated use `CreateThreadRequestToolResources$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequestToolResources$outboundSchema;
  /** @deprecated use `CreateThreadRequestToolResources$Outbound` instead. */
  export type Outbound = CreateThreadRequestToolResources$Outbound;
}

export function createThreadRequestToolResourcesToJSON(
  createThreadRequestToolResources: CreateThreadRequestToolResources,
): string {
  return JSON.stringify(
    CreateThreadRequestToolResources$outboundSchema.parse(
      createThreadRequestToolResources,
    ),
  );
}

export function createThreadRequestToolResourcesFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestToolResources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequestToolResources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestToolResources' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequestMetadata$inboundSchema: z.ZodType<
  CreateThreadRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateThreadRequestMetadata$Outbound = {};

/** @internal */
export const CreateThreadRequestMetadata$outboundSchema: z.ZodType<
  CreateThreadRequestMetadata$Outbound,
  z.ZodTypeDef,
  CreateThreadRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequestMetadata$ {
  /** @deprecated use `CreateThreadRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequestMetadata$inboundSchema;
  /** @deprecated use `CreateThreadRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequestMetadata$outboundSchema;
  /** @deprecated use `CreateThreadRequestMetadata$Outbound` instead. */
  export type Outbound = CreateThreadRequestMetadata$Outbound;
}

export function createThreadRequestMetadataToJSON(
  createThreadRequestMetadata: CreateThreadRequestMetadata,
): string {
  return JSON.stringify(
    CreateThreadRequestMetadata$outboundSchema.parse(
      createThreadRequestMetadata,
    ),
  );
}

export function createThreadRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequestMetadata' from JSON`,
  );
}

/** @internal */
export const CreateThreadRequest$inboundSchema: z.ZodType<
  CreateThreadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  messages: z.array(CreateMessageRequest$inboundSchema).optional(),
  tool_resources: z.nullable(
    z.lazy(() => CreateThreadRequestToolResources$inboundSchema),
  ).optional(),
  metadata: z.nullable(z.lazy(() => CreateThreadRequestMetadata$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_resources": "toolResources",
  });
});

/** @internal */
export type CreateThreadRequest$Outbound = {
  messages?: Array<CreateMessageRequest$Outbound> | undefined;
  tool_resources?: CreateThreadRequestToolResources$Outbound | null | undefined;
  metadata?: CreateThreadRequestMetadata$Outbound | null | undefined;
};

/** @internal */
export const CreateThreadRequest$outboundSchema: z.ZodType<
  CreateThreadRequest$Outbound,
  z.ZodTypeDef,
  CreateThreadRequest
> = z.object({
  messages: z.array(CreateMessageRequest$outboundSchema).optional(),
  toolResources: z.nullable(
    z.lazy(() => CreateThreadRequestToolResources$outboundSchema),
  ).optional(),
  metadata: z.nullable(z.lazy(() => CreateThreadRequestMetadata$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolResources: "tool_resources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadRequest$ {
  /** @deprecated use `CreateThreadRequest$inboundSchema` instead. */
  export const inboundSchema = CreateThreadRequest$inboundSchema;
  /** @deprecated use `CreateThreadRequest$outboundSchema` instead. */
  export const outboundSchema = CreateThreadRequest$outboundSchema;
  /** @deprecated use `CreateThreadRequest$Outbound` instead. */
  export type Outbound = CreateThreadRequest$Outbound;
}

export function createThreadRequestToJSON(
  createThreadRequest: CreateThreadRequest,
): string {
  return JSON.stringify(
    CreateThreadRequest$outboundSchema.parse(createThreadRequest),
  );
}

export function createThreadRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateThreadRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateThreadRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateThreadRequest' from JSON`,
  );
}
