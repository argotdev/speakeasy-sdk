/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AuditLogActorUser,
  AuditLogActorUser$inboundSchema,
  AuditLogActorUser$Outbound,
  AuditLogActorUser$outboundSchema,
} from "./auditlogactoruser.js";

/**
 * The session in which the audit logged action was performed.
 */
export type AuditLogActorSession = {
  /**
   * The user who performed the audit logged action.
   */
  user?: AuditLogActorUser | undefined;
  /**
   * The IP address from which the action was performed.
   */
  ipAddress?: string | undefined;
};

/** @internal */
export const AuditLogActorSession$inboundSchema: z.ZodType<
  AuditLogActorSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: AuditLogActorUser$inboundSchema.optional(),
  ip_address: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "ip_address": "ipAddress",
  });
});

/** @internal */
export type AuditLogActorSession$Outbound = {
  user?: AuditLogActorUser$Outbound | undefined;
  ip_address?: string | undefined;
};

/** @internal */
export const AuditLogActorSession$outboundSchema: z.ZodType<
  AuditLogActorSession$Outbound,
  z.ZodTypeDef,
  AuditLogActorSession
> = z.object({
  user: AuditLogActorUser$outboundSchema.optional(),
  ipAddress: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    ipAddress: "ip_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogActorSession$ {
  /** @deprecated use `AuditLogActorSession$inboundSchema` instead. */
  export const inboundSchema = AuditLogActorSession$inboundSchema;
  /** @deprecated use `AuditLogActorSession$outboundSchema` instead. */
  export const outboundSchema = AuditLogActorSession$outboundSchema;
  /** @deprecated use `AuditLogActorSession$Outbound` instead. */
  export type Outbound = AuditLogActorSession$Outbound;
}

export function auditLogActorSessionToJSON(
  auditLogActorSession: AuditLogActorSession,
): string {
  return JSON.stringify(
    AuditLogActorSession$outboundSchema.parse(auditLogActorSession),
  );
}

export function auditLogActorSessionFromJSON(
  jsonString: string,
): SafeParseResult<AuditLogActorSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuditLogActorSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuditLogActorSession' from JSON`,
  );
}
