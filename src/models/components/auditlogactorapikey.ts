/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AuditLogActorServiceAccount,
  AuditLogActorServiceAccount$inboundSchema,
  AuditLogActorServiceAccount$Outbound,
  AuditLogActorServiceAccount$outboundSchema,
} from "./auditlogactorserviceaccount.js";
import {
  AuditLogActorUser,
  AuditLogActorUser$inboundSchema,
  AuditLogActorUser$Outbound,
  AuditLogActorUser$outboundSchema,
} from "./auditlogactoruser.js";

/**
 * The type of API key. Can be either `user` or `service_account`.
 */
export const AuditLogActorApiKeyType = {
  User: "user",
  ServiceAccount: "service_account",
} as const;
/**
 * The type of API key. Can be either `user` or `service_account`.
 */
export type AuditLogActorApiKeyType = ClosedEnum<
  typeof AuditLogActorApiKeyType
>;

/**
 * The API Key used to perform the audit logged action.
 */
export type AuditLogActorApiKey = {
  /**
   * The tracking id of the API key.
   */
  id?: string | undefined;
  /**
   * The type of API key. Can be either `user` or `service_account`.
   */
  type?: AuditLogActorApiKeyType | undefined;
  /**
   * The user who performed the audit logged action.
   */
  user?: AuditLogActorUser | undefined;
  /**
   * The service account that performed the audit logged action.
   */
  serviceAccount?: AuditLogActorServiceAccount | undefined;
};

/** @internal */
export const AuditLogActorApiKeyType$inboundSchema: z.ZodNativeEnum<
  typeof AuditLogActorApiKeyType
> = z.nativeEnum(AuditLogActorApiKeyType);

/** @internal */
export const AuditLogActorApiKeyType$outboundSchema: z.ZodNativeEnum<
  typeof AuditLogActorApiKeyType
> = AuditLogActorApiKeyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogActorApiKeyType$ {
  /** @deprecated use `AuditLogActorApiKeyType$inboundSchema` instead. */
  export const inboundSchema = AuditLogActorApiKeyType$inboundSchema;
  /** @deprecated use `AuditLogActorApiKeyType$outboundSchema` instead. */
  export const outboundSchema = AuditLogActorApiKeyType$outboundSchema;
}

/** @internal */
export const AuditLogActorApiKey$inboundSchema: z.ZodType<
  AuditLogActorApiKey,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  type: AuditLogActorApiKeyType$inboundSchema.optional(),
  user: AuditLogActorUser$inboundSchema.optional(),
  service_account: AuditLogActorServiceAccount$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "service_account": "serviceAccount",
  });
});

/** @internal */
export type AuditLogActorApiKey$Outbound = {
  id?: string | undefined;
  type?: string | undefined;
  user?: AuditLogActorUser$Outbound | undefined;
  service_account?: AuditLogActorServiceAccount$Outbound | undefined;
};

/** @internal */
export const AuditLogActorApiKey$outboundSchema: z.ZodType<
  AuditLogActorApiKey$Outbound,
  z.ZodTypeDef,
  AuditLogActorApiKey
> = z.object({
  id: z.string().optional(),
  type: AuditLogActorApiKeyType$outboundSchema.optional(),
  user: AuditLogActorUser$outboundSchema.optional(),
  serviceAccount: AuditLogActorServiceAccount$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    serviceAccount: "service_account",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogActorApiKey$ {
  /** @deprecated use `AuditLogActorApiKey$inboundSchema` instead. */
  export const inboundSchema = AuditLogActorApiKey$inboundSchema;
  /** @deprecated use `AuditLogActorApiKey$outboundSchema` instead. */
  export const outboundSchema = AuditLogActorApiKey$outboundSchema;
  /** @deprecated use `AuditLogActorApiKey$Outbound` instead. */
  export type Outbound = AuditLogActorApiKey$Outbound;
}
