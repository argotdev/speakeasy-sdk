/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FineTuningIntegration,
  FineTuningIntegration$inboundSchema,
  FineTuningIntegration$Outbound,
  FineTuningIntegration$outboundSchema,
} from "./finetuningintegration.js";

/**
 * For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
 */
export type FineTuningJobError = {
  /**
   * A machine-readable error code.
   */
  code: string;
  /**
   * A human-readable error message.
   */
  message: string;
  /**
   * The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
   */
  param: string | null;
};

export const FineTuningJobNEpochs1 = {
  Auto: "auto",
} as const;
export type FineTuningJobNEpochs1 = ClosedEnum<typeof FineTuningJobNEpochs1>;

/**
 * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
 *
 * @remarks
 * "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
 */
export type FineTuningJobNEpochs = FineTuningJobNEpochs1 | number;

/**
 * The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
 */
export type FineTuningJobHyperparameters = {
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
   *
   * @remarks
   * "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
   */
  nEpochs: FineTuningJobNEpochs1 | number;
};

/**
 * The object type, which is always "fine_tuning.job".
 */
export const FineTuningJobObject = {
  FineTuningJob: "fine_tuning.job",
} as const;
/**
 * The object type, which is always "fine_tuning.job".
 */
export type FineTuningJobObject = ClosedEnum<typeof FineTuningJobObject>;

/**
 * The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
 */
export const FineTuningJobStatus = {
  ValidatingFiles: "validating_files",
  Queued: "queued",
  Running: "running",
  Succeeded: "succeeded",
  Failed: "failed",
  Cancelled: "cancelled",
} as const;
/**
 * The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
 */
export type FineTuningJobStatus = ClosedEnum<typeof FineTuningJobStatus>;

export type FineTuningJobIntegrations = FineTuningIntegration;

/**
 * The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
 *
 * @remarks
 */
export type FineTuningJob = {
  /**
   * The object identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was created.
   */
  createdAt: number;
  /**
   * For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
   */
  error: FineTuningJobError | null;
  /**
   * The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
   */
  fineTunedModel: string | null;
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
   */
  finishedAt: number | null;
  /**
   * The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
   */
  hyperparameters: FineTuningJobHyperparameters;
  /**
   * The base model that is being fine-tuned.
   */
  model: string;
  /**
   * The object type, which is always "fine_tuning.job".
   */
  object: FineTuningJobObject;
  /**
   * The organization that owns the fine-tuning job.
   */
  organizationId: string;
  /**
   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
   */
  resultFiles: Array<string>;
  /**
   * The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
   */
  status: FineTuningJobStatus;
  /**
   * The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
   */
  trainedTokens: number | null;
  /**
   * The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
   */
  trainingFile: string;
  /**
   * The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
   */
  validationFile: string | null;
  /**
   * A list of integrations to enable for this fine-tuning job.
   */
  integrations?: Array<FineTuningIntegration> | null | undefined;
  /**
   * The seed used for the fine-tuning job.
   */
  seed: number;
  /**
   * The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
   */
  estimatedFinish?: number | null | undefined;
};

/** @internal */
export const FineTuningJobError$inboundSchema: z.ZodType<
  FineTuningJobError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  param: z.nullable(z.string()),
});

/** @internal */
export type FineTuningJobError$Outbound = {
  code: string;
  message: string;
  param: string | null;
};

/** @internal */
export const FineTuningJobError$outboundSchema: z.ZodType<
  FineTuningJobError$Outbound,
  z.ZodTypeDef,
  FineTuningJobError
> = z.object({
  code: z.string(),
  message: z.string(),
  param: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobError$ {
  /** @deprecated use `FineTuningJobError$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobError$inboundSchema;
  /** @deprecated use `FineTuningJobError$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobError$outboundSchema;
  /** @deprecated use `FineTuningJobError$Outbound` instead. */
  export type Outbound = FineTuningJobError$Outbound;
}

export function fineTuningJobErrorToJSON(
  fineTuningJobError: FineTuningJobError,
): string {
  return JSON.stringify(
    FineTuningJobError$outboundSchema.parse(fineTuningJobError),
  );
}

export function fineTuningJobErrorFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJobError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJobError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJobError' from JSON`,
  );
}

/** @internal */
export const FineTuningJobNEpochs1$inboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobNEpochs1
> = z.nativeEnum(FineTuningJobNEpochs1);

/** @internal */
export const FineTuningJobNEpochs1$outboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobNEpochs1
> = FineTuningJobNEpochs1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobNEpochs1$ {
  /** @deprecated use `FineTuningJobNEpochs1$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobNEpochs1$inboundSchema;
  /** @deprecated use `FineTuningJobNEpochs1$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobNEpochs1$outboundSchema;
}

/** @internal */
export const FineTuningJobNEpochs$inboundSchema: z.ZodType<
  FineTuningJobNEpochs,
  z.ZodTypeDef,
  unknown
> = z.union([FineTuningJobNEpochs1$inboundSchema, z.number().int()]);

/** @internal */
export type FineTuningJobNEpochs$Outbound = string | number;

/** @internal */
export const FineTuningJobNEpochs$outboundSchema: z.ZodType<
  FineTuningJobNEpochs$Outbound,
  z.ZodTypeDef,
  FineTuningJobNEpochs
> = z.union([FineTuningJobNEpochs1$outboundSchema, z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobNEpochs$ {
  /** @deprecated use `FineTuningJobNEpochs$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobNEpochs$inboundSchema;
  /** @deprecated use `FineTuningJobNEpochs$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobNEpochs$outboundSchema;
  /** @deprecated use `FineTuningJobNEpochs$Outbound` instead. */
  export type Outbound = FineTuningJobNEpochs$Outbound;
}

export function fineTuningJobNEpochsToJSON(
  fineTuningJobNEpochs: FineTuningJobNEpochs,
): string {
  return JSON.stringify(
    FineTuningJobNEpochs$outboundSchema.parse(fineTuningJobNEpochs),
  );
}

export function fineTuningJobNEpochsFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJobNEpochs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJobNEpochs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJobNEpochs' from JSON`,
  );
}

/** @internal */
export const FineTuningJobHyperparameters$inboundSchema: z.ZodType<
  FineTuningJobHyperparameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  n_epochs: z.union([FineTuningJobNEpochs1$inboundSchema, z.number().int()]),
}).transform((v) => {
  return remap$(v, {
    "n_epochs": "nEpochs",
  });
});

/** @internal */
export type FineTuningJobHyperparameters$Outbound = {
  n_epochs: string | number;
};

/** @internal */
export const FineTuningJobHyperparameters$outboundSchema: z.ZodType<
  FineTuningJobHyperparameters$Outbound,
  z.ZodTypeDef,
  FineTuningJobHyperparameters
> = z.object({
  nEpochs: z.union([FineTuningJobNEpochs1$outboundSchema, z.number().int()]),
}).transform((v) => {
  return remap$(v, {
    nEpochs: "n_epochs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobHyperparameters$ {
  /** @deprecated use `FineTuningJobHyperparameters$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobHyperparameters$inboundSchema;
  /** @deprecated use `FineTuningJobHyperparameters$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobHyperparameters$outboundSchema;
  /** @deprecated use `FineTuningJobHyperparameters$Outbound` instead. */
  export type Outbound = FineTuningJobHyperparameters$Outbound;
}

export function fineTuningJobHyperparametersToJSON(
  fineTuningJobHyperparameters: FineTuningJobHyperparameters,
): string {
  return JSON.stringify(
    FineTuningJobHyperparameters$outboundSchema.parse(
      fineTuningJobHyperparameters,
    ),
  );
}

export function fineTuningJobHyperparametersFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJobHyperparameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJobHyperparameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJobHyperparameters' from JSON`,
  );
}

/** @internal */
export const FineTuningJobObject$inboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobObject
> = z.nativeEnum(FineTuningJobObject);

/** @internal */
export const FineTuningJobObject$outboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobObject
> = FineTuningJobObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobObject$ {
  /** @deprecated use `FineTuningJobObject$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobObject$inboundSchema;
  /** @deprecated use `FineTuningJobObject$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobObject$outboundSchema;
}

/** @internal */
export const FineTuningJobStatus$inboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobStatus
> = z.nativeEnum(FineTuningJobStatus);

/** @internal */
export const FineTuningJobStatus$outboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobStatus
> = FineTuningJobStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobStatus$ {
  /** @deprecated use `FineTuningJobStatus$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobStatus$inboundSchema;
  /** @deprecated use `FineTuningJobStatus$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobStatus$outboundSchema;
}

/** @internal */
export const FineTuningJobIntegrations$inboundSchema: z.ZodType<
  FineTuningJobIntegrations,
  z.ZodTypeDef,
  unknown
> = FineTuningIntegration$inboundSchema;

/** @internal */
export type FineTuningJobIntegrations$Outbound = FineTuningIntegration$Outbound;

/** @internal */
export const FineTuningJobIntegrations$outboundSchema: z.ZodType<
  FineTuningJobIntegrations$Outbound,
  z.ZodTypeDef,
  FineTuningJobIntegrations
> = FineTuningIntegration$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobIntegrations$ {
  /** @deprecated use `FineTuningJobIntegrations$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobIntegrations$inboundSchema;
  /** @deprecated use `FineTuningJobIntegrations$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobIntegrations$outboundSchema;
  /** @deprecated use `FineTuningJobIntegrations$Outbound` instead. */
  export type Outbound = FineTuningJobIntegrations$Outbound;
}

export function fineTuningJobIntegrationsToJSON(
  fineTuningJobIntegrations: FineTuningJobIntegrations,
): string {
  return JSON.stringify(
    FineTuningJobIntegrations$outboundSchema.parse(fineTuningJobIntegrations),
  );
}

export function fineTuningJobIntegrationsFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJobIntegrations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJobIntegrations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJobIntegrations' from JSON`,
  );
}

/** @internal */
export const FineTuningJob$inboundSchema: z.ZodType<
  FineTuningJob,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.number().int(),
  error: z.nullable(z.lazy(() => FineTuningJobError$inboundSchema)),
  fine_tuned_model: z.nullable(z.string()),
  finished_at: z.nullable(z.number().int()),
  hyperparameters: z.lazy(() => FineTuningJobHyperparameters$inboundSchema),
  model: z.string(),
  object: FineTuningJobObject$inboundSchema,
  organization_id: z.string(),
  result_files: z.array(z.string()),
  status: FineTuningJobStatus$inboundSchema,
  trained_tokens: z.nullable(z.number().int()),
  training_file: z.string(),
  validation_file: z.nullable(z.string()),
  integrations: z.nullable(z.array(FineTuningIntegration$inboundSchema))
    .optional(),
  seed: z.number().int(),
  estimated_finish: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "fine_tuned_model": "fineTunedModel",
    "finished_at": "finishedAt",
    "organization_id": "organizationId",
    "result_files": "resultFiles",
    "trained_tokens": "trainedTokens",
    "training_file": "trainingFile",
    "validation_file": "validationFile",
    "estimated_finish": "estimatedFinish",
  });
});

/** @internal */
export type FineTuningJob$Outbound = {
  id: string;
  created_at: number;
  error: FineTuningJobError$Outbound | null;
  fine_tuned_model: string | null;
  finished_at: number | null;
  hyperparameters: FineTuningJobHyperparameters$Outbound;
  model: string;
  object: string;
  organization_id: string;
  result_files: Array<string>;
  status: string;
  trained_tokens: number | null;
  training_file: string;
  validation_file: string | null;
  integrations?: Array<FineTuningIntegration$Outbound> | null | undefined;
  seed: number;
  estimated_finish?: number | null | undefined;
};

/** @internal */
export const FineTuningJob$outboundSchema: z.ZodType<
  FineTuningJob$Outbound,
  z.ZodTypeDef,
  FineTuningJob
> = z.object({
  id: z.string(),
  createdAt: z.number().int(),
  error: z.nullable(z.lazy(() => FineTuningJobError$outboundSchema)),
  fineTunedModel: z.nullable(z.string()),
  finishedAt: z.nullable(z.number().int()),
  hyperparameters: z.lazy(() => FineTuningJobHyperparameters$outboundSchema),
  model: z.string(),
  object: FineTuningJobObject$outboundSchema,
  organizationId: z.string(),
  resultFiles: z.array(z.string()),
  status: FineTuningJobStatus$outboundSchema,
  trainedTokens: z.nullable(z.number().int()),
  trainingFile: z.string(),
  validationFile: z.nullable(z.string()),
  integrations: z.nullable(z.array(FineTuningIntegration$outboundSchema))
    .optional(),
  seed: z.number().int(),
  estimatedFinish: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    fineTunedModel: "fine_tuned_model",
    finishedAt: "finished_at",
    organizationId: "organization_id",
    resultFiles: "result_files",
    trainedTokens: "trained_tokens",
    trainingFile: "training_file",
    validationFile: "validation_file",
    estimatedFinish: "estimated_finish",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJob$ {
  /** @deprecated use `FineTuningJob$inboundSchema` instead. */
  export const inboundSchema = FineTuningJob$inboundSchema;
  /** @deprecated use `FineTuningJob$outboundSchema` instead. */
  export const outboundSchema = FineTuningJob$outboundSchema;
  /** @deprecated use `FineTuningJob$Outbound` instead. */
  export type Outbound = FineTuningJob$Outbound;
}

export function fineTuningJobToJSON(fineTuningJob: FineTuningJob): string {
  return JSON.stringify(FineTuningJob$outboundSchema.parse(fineTuningJob));
}

export function fineTuningJobFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJob, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJob$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJob' from JSON`,
  );
}
