/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AutoChunkingStrategyRequestParam,
  AutoChunkingStrategyRequestParam$inboundSchema,
  AutoChunkingStrategyRequestParam$Outbound,
  AutoChunkingStrategyRequestParam$outboundSchema,
} from "./autochunkingstrategyrequestparam.js";
import {
  StaticChunkingStrategyRequestParam,
  StaticChunkingStrategyRequestParam$inboundSchema,
  StaticChunkingStrategyRequestParam$Outbound,
  StaticChunkingStrategyRequestParam$outboundSchema,
} from "./staticchunkingstrategyrequestparam.js";
import {
  VectorStoreExpirationAfter,
  VectorStoreExpirationAfter$inboundSchema,
  VectorStoreExpirationAfter$Outbound,
  VectorStoreExpirationAfter$outboundSchema,
} from "./vectorstoreexpirationafter.js";

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
 */
export type ChunkingStrategy =
  | AutoChunkingStrategyRequestParam
  | StaticChunkingStrategyRequestParam;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateVectorStoreRequestMetadata = {};

export type CreateVectorStoreRequest = {
  /**
   * A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
   */
  fileIds?: Array<string> | undefined;
  /**
   * The name of the vector store.
   */
  name?: string | undefined;
  /**
   * The expiration policy for a vector store.
   */
  expiresAfter?: VectorStoreExpirationAfter | undefined;
  /**
   * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
   */
  chunkingStrategy?:
    | AutoChunkingStrategyRequestParam
    | StaticChunkingStrategyRequestParam
    | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateVectorStoreRequestMetadata | null | undefined;
};

/** @internal */
export const ChunkingStrategy$inboundSchema: z.ZodType<
  ChunkingStrategy,
  z.ZodTypeDef,
  unknown
> = z.union([
  AutoChunkingStrategyRequestParam$inboundSchema,
  StaticChunkingStrategyRequestParam$inboundSchema,
]);

/** @internal */
export type ChunkingStrategy$Outbound =
  | AutoChunkingStrategyRequestParam$Outbound
  | StaticChunkingStrategyRequestParam$Outbound;

/** @internal */
export const ChunkingStrategy$outboundSchema: z.ZodType<
  ChunkingStrategy$Outbound,
  z.ZodTypeDef,
  ChunkingStrategy
> = z.union([
  AutoChunkingStrategyRequestParam$outboundSchema,
  StaticChunkingStrategyRequestParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChunkingStrategy$ {
  /** @deprecated use `ChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema = ChunkingStrategy$inboundSchema;
  /** @deprecated use `ChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema = ChunkingStrategy$outboundSchema;
  /** @deprecated use `ChunkingStrategy$Outbound` instead. */
  export type Outbound = ChunkingStrategy$Outbound;
}

export function chunkingStrategyToJSON(
  chunkingStrategy: ChunkingStrategy,
): string {
  return JSON.stringify(
    ChunkingStrategy$outboundSchema.parse(chunkingStrategy),
  );
}

export function chunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<ChunkingStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChunkingStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const CreateVectorStoreRequestMetadata$inboundSchema: z.ZodType<
  CreateVectorStoreRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateVectorStoreRequestMetadata$Outbound = {};

/** @internal */
export const CreateVectorStoreRequestMetadata$outboundSchema: z.ZodType<
  CreateVectorStoreRequestMetadata$Outbound,
  z.ZodTypeDef,
  CreateVectorStoreRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVectorStoreRequestMetadata$ {
  /** @deprecated use `CreateVectorStoreRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateVectorStoreRequestMetadata$inboundSchema;
  /** @deprecated use `CreateVectorStoreRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = CreateVectorStoreRequestMetadata$outboundSchema;
  /** @deprecated use `CreateVectorStoreRequestMetadata$Outbound` instead. */
  export type Outbound = CreateVectorStoreRequestMetadata$Outbound;
}

export function createVectorStoreRequestMetadataToJSON(
  createVectorStoreRequestMetadata: CreateVectorStoreRequestMetadata,
): string {
  return JSON.stringify(
    CreateVectorStoreRequestMetadata$outboundSchema.parse(
      createVectorStoreRequestMetadata,
    ),
  );
}

export function createVectorStoreRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateVectorStoreRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateVectorStoreRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateVectorStoreRequestMetadata' from JSON`,
  );
}

/** @internal */
export const CreateVectorStoreRequest$inboundSchema: z.ZodType<
  CreateVectorStoreRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
  name: z.string().optional(),
  expires_after: VectorStoreExpirationAfter$inboundSchema.optional(),
  chunking_strategy: z.union([
    AutoChunkingStrategyRequestParam$inboundSchema,
    StaticChunkingStrategyRequestParam$inboundSchema,
  ]).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateVectorStoreRequestMetadata$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
    "expires_after": "expiresAfter",
    "chunking_strategy": "chunkingStrategy",
  });
});

/** @internal */
export type CreateVectorStoreRequest$Outbound = {
  file_ids?: Array<string> | undefined;
  name?: string | undefined;
  expires_after?: VectorStoreExpirationAfter$Outbound | undefined;
  chunking_strategy?:
    | AutoChunkingStrategyRequestParam$Outbound
    | StaticChunkingStrategyRequestParam$Outbound
    | undefined;
  metadata?: CreateVectorStoreRequestMetadata$Outbound | null | undefined;
};

/** @internal */
export const CreateVectorStoreRequest$outboundSchema: z.ZodType<
  CreateVectorStoreRequest$Outbound,
  z.ZodTypeDef,
  CreateVectorStoreRequest
> = z.object({
  fileIds: z.array(z.string()).optional(),
  name: z.string().optional(),
  expiresAfter: VectorStoreExpirationAfter$outboundSchema.optional(),
  chunkingStrategy: z.union([
    AutoChunkingStrategyRequestParam$outboundSchema,
    StaticChunkingStrategyRequestParam$outboundSchema,
  ]).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateVectorStoreRequestMetadata$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
    expiresAfter: "expires_after",
    chunkingStrategy: "chunking_strategy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVectorStoreRequest$ {
  /** @deprecated use `CreateVectorStoreRequest$inboundSchema` instead. */
  export const inboundSchema = CreateVectorStoreRequest$inboundSchema;
  /** @deprecated use `CreateVectorStoreRequest$outboundSchema` instead. */
  export const outboundSchema = CreateVectorStoreRequest$outboundSchema;
  /** @deprecated use `CreateVectorStoreRequest$Outbound` instead. */
  export type Outbound = CreateVectorStoreRequest$Outbound;
}

export function createVectorStoreRequestToJSON(
  createVectorStoreRequest: CreateVectorStoreRequest,
): string {
  return JSON.stringify(
    CreateVectorStoreRequest$outboundSchema.parse(createVectorStoreRequest),
  );
}

export function createVectorStoreRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateVectorStoreRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateVectorStoreRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateVectorStoreRequest' from JSON`,
  );
}
