/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssistantToolsCode,
  AssistantToolsCode$inboundSchema,
  AssistantToolsCode$Outbound,
  AssistantToolsCode$outboundSchema,
} from "./assistanttoolscode.js";
import {
  AssistantToolsFileSearchTypeOnly,
  AssistantToolsFileSearchTypeOnly$inboundSchema,
  AssistantToolsFileSearchTypeOnly$Outbound,
  AssistantToolsFileSearchTypeOnly$outboundSchema,
} from "./assistanttoolsfilesearchtypeonly.js";
import {
  MessageContentImageFileObject,
  MessageContentImageFileObject$inboundSchema,
  MessageContentImageFileObject$Outbound,
  MessageContentImageFileObject$outboundSchema,
} from "./messagecontentimagefileobject.js";
import {
  MessageContentImageUrlObject,
  MessageContentImageUrlObject$inboundSchema,
  MessageContentImageUrlObject$Outbound,
  MessageContentImageUrlObject$outboundSchema,
} from "./messagecontentimageurlobject.js";
import {
  MessageRequestContentTextObject,
  MessageRequestContentTextObject$inboundSchema,
  MessageRequestContentTextObject$Outbound,
  MessageRequestContentTextObject$outboundSchema,
} from "./messagerequestcontenttextobject.js";

/**
 * The role of the entity that is creating the message. Allowed values include:
 *
 * @remarks
 * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
 * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
 */
export const CreateMessageRequestRole = {
  User: "user",
  Assistant: "assistant",
} as const;
/**
 * The role of the entity that is creating the message. Allowed values include:
 *
 * @remarks
 * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
 * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
 */
export type CreateMessageRequestRole = ClosedEnum<
  typeof CreateMessageRequestRole
>;

export type Content2 =
  | MessageContentImageFileObject
  | MessageContentImageUrlObject
  | MessageRequestContentTextObject;

export type CreateMessageRequestContent =
  | string
  | Array<
    | MessageContentImageFileObject
    | MessageContentImageUrlObject
    | MessageRequestContentTextObject
  >;

export type CreateMessageRequestTools =
  | AssistantToolsCode
  | AssistantToolsFileSearchTypeOnly;

export type Attachments = {
  /**
   * The ID of the file to attach to the message.
   */
  fileId?: string | undefined;
  /**
   * The tools to add this file to.
   */
  tools?:
    | Array<AssistantToolsCode | AssistantToolsFileSearchTypeOnly>
    | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateMessageRequestMetadata = {};

export type CreateMessageRequest = {
  /**
   * The role of the entity that is creating the message. Allowed values include:
   *
   * @remarks
   * - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.
   * - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.
   */
  role: CreateMessageRequestRole;
  content:
    | string
    | Array<
      | MessageContentImageFileObject
      | MessageContentImageUrlObject
      | MessageRequestContentTextObject
    >;
  /**
   * A list of files attached to the message, and the tools they should be added to.
   */
  attachments?: Array<Attachments> | null | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateMessageRequestMetadata | null | undefined;
};

/** @internal */
export const CreateMessageRequestRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateMessageRequestRole
> = z.nativeEnum(CreateMessageRequestRole);

/** @internal */
export const CreateMessageRequestRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateMessageRequestRole
> = CreateMessageRequestRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageRequestRole$ {
  /** @deprecated use `CreateMessageRequestRole$inboundSchema` instead. */
  export const inboundSchema = CreateMessageRequestRole$inboundSchema;
  /** @deprecated use `CreateMessageRequestRole$outboundSchema` instead. */
  export const outboundSchema = CreateMessageRequestRole$outboundSchema;
}

/** @internal */
export const Content2$inboundSchema: z.ZodType<
  Content2,
  z.ZodTypeDef,
  unknown
> = z.union([
  MessageContentImageFileObject$inboundSchema,
  MessageContentImageUrlObject$inboundSchema,
  MessageRequestContentTextObject$inboundSchema,
]);

/** @internal */
export type Content2$Outbound =
  | MessageContentImageFileObject$Outbound
  | MessageContentImageUrlObject$Outbound
  | MessageRequestContentTextObject$Outbound;

/** @internal */
export const Content2$outboundSchema: z.ZodType<
  Content2$Outbound,
  z.ZodTypeDef,
  Content2
> = z.union([
  MessageContentImageFileObject$outboundSchema,
  MessageContentImageUrlObject$outboundSchema,
  MessageRequestContentTextObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content2$ {
  /** @deprecated use `Content2$inboundSchema` instead. */
  export const inboundSchema = Content2$inboundSchema;
  /** @deprecated use `Content2$outboundSchema` instead. */
  export const outboundSchema = Content2$outboundSchema;
  /** @deprecated use `Content2$Outbound` instead. */
  export type Outbound = Content2$Outbound;
}

export function content2ToJSON(content2: Content2): string {
  return JSON.stringify(Content2$outboundSchema.parse(content2));
}

export function content2FromJSON(
  jsonString: string,
): SafeParseResult<Content2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content2' from JSON`,
  );
}

/** @internal */
export const CreateMessageRequestContent$inboundSchema: z.ZodType<
  CreateMessageRequestContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(
    z.union([
      MessageContentImageFileObject$inboundSchema,
      MessageContentImageUrlObject$inboundSchema,
      MessageRequestContentTextObject$inboundSchema,
    ]),
  ),
]);

/** @internal */
export type CreateMessageRequestContent$Outbound =
  | string
  | Array<
    | MessageContentImageFileObject$Outbound
    | MessageContentImageUrlObject$Outbound
    | MessageRequestContentTextObject$Outbound
  >;

/** @internal */
export const CreateMessageRequestContent$outboundSchema: z.ZodType<
  CreateMessageRequestContent$Outbound,
  z.ZodTypeDef,
  CreateMessageRequestContent
> = z.union([
  z.string(),
  z.array(
    z.union([
      MessageContentImageFileObject$outboundSchema,
      MessageContentImageUrlObject$outboundSchema,
      MessageRequestContentTextObject$outboundSchema,
    ]),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageRequestContent$ {
  /** @deprecated use `CreateMessageRequestContent$inboundSchema` instead. */
  export const inboundSchema = CreateMessageRequestContent$inboundSchema;
  /** @deprecated use `CreateMessageRequestContent$outboundSchema` instead. */
  export const outboundSchema = CreateMessageRequestContent$outboundSchema;
  /** @deprecated use `CreateMessageRequestContent$Outbound` instead. */
  export type Outbound = CreateMessageRequestContent$Outbound;
}

export function createMessageRequestContentToJSON(
  createMessageRequestContent: CreateMessageRequestContent,
): string {
  return JSON.stringify(
    CreateMessageRequestContent$outboundSchema.parse(
      createMessageRequestContent,
    ),
  );
}

export function createMessageRequestContentFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageRequestContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageRequestContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageRequestContent' from JSON`,
  );
}

/** @internal */
export const CreateMessageRequestTools$inboundSchema: z.ZodType<
  CreateMessageRequestTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  AssistantToolsCode$inboundSchema,
  AssistantToolsFileSearchTypeOnly$inboundSchema,
]);

/** @internal */
export type CreateMessageRequestTools$Outbound =
  | AssistantToolsCode$Outbound
  | AssistantToolsFileSearchTypeOnly$Outbound;

/** @internal */
export const CreateMessageRequestTools$outboundSchema: z.ZodType<
  CreateMessageRequestTools$Outbound,
  z.ZodTypeDef,
  CreateMessageRequestTools
> = z.union([
  AssistantToolsCode$outboundSchema,
  AssistantToolsFileSearchTypeOnly$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageRequestTools$ {
  /** @deprecated use `CreateMessageRequestTools$inboundSchema` instead. */
  export const inboundSchema = CreateMessageRequestTools$inboundSchema;
  /** @deprecated use `CreateMessageRequestTools$outboundSchema` instead. */
  export const outboundSchema = CreateMessageRequestTools$outboundSchema;
  /** @deprecated use `CreateMessageRequestTools$Outbound` instead. */
  export type Outbound = CreateMessageRequestTools$Outbound;
}

export function createMessageRequestToolsToJSON(
  createMessageRequestTools: CreateMessageRequestTools,
): string {
  return JSON.stringify(
    CreateMessageRequestTools$outboundSchema.parse(createMessageRequestTools),
  );
}

export function createMessageRequestToolsFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageRequestTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageRequestTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageRequestTools' from JSON`,
  );
}

/** @internal */
export const Attachments$inboundSchema: z.ZodType<
  Attachments,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string().optional(),
  tools: z.array(
    z.union([
      AssistantToolsCode$inboundSchema,
      AssistantToolsFileSearchTypeOnly$inboundSchema,
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type Attachments$Outbound = {
  file_id?: string | undefined;
  tools?:
    | Array<
      AssistantToolsCode$Outbound | AssistantToolsFileSearchTypeOnly$Outbound
    >
    | undefined;
};

/** @internal */
export const Attachments$outboundSchema: z.ZodType<
  Attachments$Outbound,
  z.ZodTypeDef,
  Attachments
> = z.object({
  fileId: z.string().optional(),
  tools: z.array(
    z.union([
      AssistantToolsCode$outboundSchema,
      AssistantToolsFileSearchTypeOnly$outboundSchema,
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attachments$ {
  /** @deprecated use `Attachments$inboundSchema` instead. */
  export const inboundSchema = Attachments$inboundSchema;
  /** @deprecated use `Attachments$outboundSchema` instead. */
  export const outboundSchema = Attachments$outboundSchema;
  /** @deprecated use `Attachments$Outbound` instead. */
  export type Outbound = Attachments$Outbound;
}

export function attachmentsToJSON(attachments: Attachments): string {
  return JSON.stringify(Attachments$outboundSchema.parse(attachments));
}

export function attachmentsFromJSON(
  jsonString: string,
): SafeParseResult<Attachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attachments' from JSON`,
  );
}

/** @internal */
export const CreateMessageRequestMetadata$inboundSchema: z.ZodType<
  CreateMessageRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateMessageRequestMetadata$Outbound = {};

/** @internal */
export const CreateMessageRequestMetadata$outboundSchema: z.ZodType<
  CreateMessageRequestMetadata$Outbound,
  z.ZodTypeDef,
  CreateMessageRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageRequestMetadata$ {
  /** @deprecated use `CreateMessageRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateMessageRequestMetadata$inboundSchema;
  /** @deprecated use `CreateMessageRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = CreateMessageRequestMetadata$outboundSchema;
  /** @deprecated use `CreateMessageRequestMetadata$Outbound` instead. */
  export type Outbound = CreateMessageRequestMetadata$Outbound;
}

export function createMessageRequestMetadataToJSON(
  createMessageRequestMetadata: CreateMessageRequestMetadata,
): string {
  return JSON.stringify(
    CreateMessageRequestMetadata$outboundSchema.parse(
      createMessageRequestMetadata,
    ),
  );
}

export function createMessageRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageRequestMetadata' from JSON`,
  );
}

/** @internal */
export const CreateMessageRequest$inboundSchema: z.ZodType<
  CreateMessageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: CreateMessageRequestRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(
      z.union([
        MessageContentImageFileObject$inboundSchema,
        MessageContentImageUrlObject$inboundSchema,
        MessageRequestContentTextObject$inboundSchema,
      ]),
    ),
  ]),
  attachments: z.nullable(z.array(z.lazy(() => Attachments$inboundSchema)))
    .optional(),
  metadata: z.nullable(z.lazy(() => CreateMessageRequestMetadata$inboundSchema))
    .optional(),
});

/** @internal */
export type CreateMessageRequest$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | MessageContentImageFileObject$Outbound
      | MessageContentImageUrlObject$Outbound
      | MessageRequestContentTextObject$Outbound
    >;
  attachments?: Array<Attachments$Outbound> | null | undefined;
  metadata?: CreateMessageRequestMetadata$Outbound | null | undefined;
};

/** @internal */
export const CreateMessageRequest$outboundSchema: z.ZodType<
  CreateMessageRequest$Outbound,
  z.ZodTypeDef,
  CreateMessageRequest
> = z.object({
  role: CreateMessageRequestRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(
      z.union([
        MessageContentImageFileObject$outboundSchema,
        MessageContentImageUrlObject$outboundSchema,
        MessageRequestContentTextObject$outboundSchema,
      ]),
    ),
  ]),
  attachments: z.nullable(z.array(z.lazy(() => Attachments$outboundSchema)))
    .optional(),
  metadata: z.nullable(
    z.lazy(() => CreateMessageRequestMetadata$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateMessageRequest$ {
  /** @deprecated use `CreateMessageRequest$inboundSchema` instead. */
  export const inboundSchema = CreateMessageRequest$inboundSchema;
  /** @deprecated use `CreateMessageRequest$outboundSchema` instead. */
  export const outboundSchema = CreateMessageRequest$outboundSchema;
  /** @deprecated use `CreateMessageRequest$Outbound` instead. */
  export type Outbound = CreateMessageRequest$Outbound;
}

export function createMessageRequestToJSON(
  createMessageRequest: CreateMessageRequest,
): string {
  return JSON.stringify(
    CreateMessageRequest$outboundSchema.parse(createMessageRequest),
  );
}

export function createMessageRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateMessageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateMessageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateMessageRequest' from JSON`,
  );
}
