/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompletionUsage,
  CompletionUsage$inboundSchema,
  CompletionUsage$Outbound,
  CompletionUsage$outboundSchema,
} from "./completionusage.js";

/**
 * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
 *
 * @remarks
 * `length` if the maximum number of tokens specified in the request was reached,
 * or `content_filter` if content was omitted due to a flag from our content filters.
 */
export const CreateCompletionResponseFinishReason = {
  Stop: "stop",
  Length: "length",
  ContentFilter: "content_filter",
} as const;
/**
 * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
 *
 * @remarks
 * `length` if the maximum number of tokens specified in the request was reached,
 * or `content_filter` if content was omitted due to a flag from our content filters.
 */
export type CreateCompletionResponseFinishReason = ClosedEnum<
  typeof CreateCompletionResponseFinishReason
>;

export type CreateCompletionResponseLogprobs = {
  textOffset?: Array<number> | undefined;
  tokenLogprobs?: Array<number> | undefined;
  tokens?: Array<string> | undefined;
  topLogprobs?: Array<{ [k: string]: number }> | undefined;
};

export type CreateCompletionResponseChoices = {
  /**
   * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
   *
   * @remarks
   * `length` if the maximum number of tokens specified in the request was reached,
   * or `content_filter` if content was omitted due to a flag from our content filters.
   */
  finishReason: CreateCompletionResponseFinishReason;
  index: number;
  logprobs: CreateCompletionResponseLogprobs | null;
  text: string;
};

/**
 * The object type, which is always "text_completion"
 */
export const CreateCompletionResponseObject = {
  TextCompletion: "text_completion",
} as const;
/**
 * The object type, which is always "text_completion"
 */
export type CreateCompletionResponseObject = ClosedEnum<
  typeof CreateCompletionResponseObject
>;

/**
 * Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).
 *
 * @remarks
 */
export type CreateCompletionResponse = {
  /**
   * A unique identifier for the completion.
   */
  id: string;
  /**
   * The list of completion choices the model generated for the input prompt.
   */
  choices: Array<CreateCompletionResponseChoices>;
  /**
   * The Unix timestamp (in seconds) of when the completion was created.
   */
  created: number;
  /**
   * The model used for completion.
   */
  model: string;
  /**
   * This fingerprint represents the backend configuration that the model runs with.
   *
   * @remarks
   *
   * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
   */
  systemFingerprint?: string | undefined;
  /**
   * The object type, which is always "text_completion"
   */
  object: CreateCompletionResponseObject;
  /**
   * Usage statistics for the completion request.
   */
  usage?: CompletionUsage | undefined;
};

/** @internal */
export const CreateCompletionResponseFinishReason$inboundSchema:
  z.ZodNativeEnum<typeof CreateCompletionResponseFinishReason> = z.nativeEnum(
    CreateCompletionResponseFinishReason,
  );

/** @internal */
export const CreateCompletionResponseFinishReason$outboundSchema:
  z.ZodNativeEnum<typeof CreateCompletionResponseFinishReason> =
    CreateCompletionResponseFinishReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompletionResponseFinishReason$ {
  /** @deprecated use `CreateCompletionResponseFinishReason$inboundSchema` instead. */
  export const inboundSchema =
    CreateCompletionResponseFinishReason$inboundSchema;
  /** @deprecated use `CreateCompletionResponseFinishReason$outboundSchema` instead. */
  export const outboundSchema =
    CreateCompletionResponseFinishReason$outboundSchema;
}

/** @internal */
export const CreateCompletionResponseLogprobs$inboundSchema: z.ZodType<
  CreateCompletionResponseLogprobs,
  z.ZodTypeDef,
  unknown
> = z.object({
  text_offset: z.array(z.number().int()).optional(),
  token_logprobs: z.array(z.number()).optional(),
  tokens: z.array(z.string()).optional(),
  top_logprobs: z.array(z.record(z.number())).optional(),
}).transform((v) => {
  return remap$(v, {
    "text_offset": "textOffset",
    "token_logprobs": "tokenLogprobs",
    "top_logprobs": "topLogprobs",
  });
});

/** @internal */
export type CreateCompletionResponseLogprobs$Outbound = {
  text_offset?: Array<number> | undefined;
  token_logprobs?: Array<number> | undefined;
  tokens?: Array<string> | undefined;
  top_logprobs?: Array<{ [k: string]: number }> | undefined;
};

/** @internal */
export const CreateCompletionResponseLogprobs$outboundSchema: z.ZodType<
  CreateCompletionResponseLogprobs$Outbound,
  z.ZodTypeDef,
  CreateCompletionResponseLogprobs
> = z.object({
  textOffset: z.array(z.number().int()).optional(),
  tokenLogprobs: z.array(z.number()).optional(),
  tokens: z.array(z.string()).optional(),
  topLogprobs: z.array(z.record(z.number())).optional(),
}).transform((v) => {
  return remap$(v, {
    textOffset: "text_offset",
    tokenLogprobs: "token_logprobs",
    topLogprobs: "top_logprobs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompletionResponseLogprobs$ {
  /** @deprecated use `CreateCompletionResponseLogprobs$inboundSchema` instead. */
  export const inboundSchema = CreateCompletionResponseLogprobs$inboundSchema;
  /** @deprecated use `CreateCompletionResponseLogprobs$outboundSchema` instead. */
  export const outboundSchema = CreateCompletionResponseLogprobs$outboundSchema;
  /** @deprecated use `CreateCompletionResponseLogprobs$Outbound` instead. */
  export type Outbound = CreateCompletionResponseLogprobs$Outbound;
}

export function createCompletionResponseLogprobsToJSON(
  createCompletionResponseLogprobs: CreateCompletionResponseLogprobs,
): string {
  return JSON.stringify(
    CreateCompletionResponseLogprobs$outboundSchema.parse(
      createCompletionResponseLogprobs,
    ),
  );
}

export function createCompletionResponseLogprobsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompletionResponseLogprobs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompletionResponseLogprobs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompletionResponseLogprobs' from JSON`,
  );
}

/** @internal */
export const CreateCompletionResponseChoices$inboundSchema: z.ZodType<
  CreateCompletionResponseChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  finish_reason: CreateCompletionResponseFinishReason$inboundSchema,
  index: z.number().int(),
  logprobs: z.nullable(
    z.lazy(() => CreateCompletionResponseLogprobs$inboundSchema),
  ),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type CreateCompletionResponseChoices$Outbound = {
  finish_reason: string;
  index: number;
  logprobs: CreateCompletionResponseLogprobs$Outbound | null;
  text: string;
};

/** @internal */
export const CreateCompletionResponseChoices$outboundSchema: z.ZodType<
  CreateCompletionResponseChoices$Outbound,
  z.ZodTypeDef,
  CreateCompletionResponseChoices
> = z.object({
  finishReason: CreateCompletionResponseFinishReason$outboundSchema,
  index: z.number().int(),
  logprobs: z.nullable(
    z.lazy(() => CreateCompletionResponseLogprobs$outboundSchema),
  ),
  text: z.string(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompletionResponseChoices$ {
  /** @deprecated use `CreateCompletionResponseChoices$inboundSchema` instead. */
  export const inboundSchema = CreateCompletionResponseChoices$inboundSchema;
  /** @deprecated use `CreateCompletionResponseChoices$outboundSchema` instead. */
  export const outboundSchema = CreateCompletionResponseChoices$outboundSchema;
  /** @deprecated use `CreateCompletionResponseChoices$Outbound` instead. */
  export type Outbound = CreateCompletionResponseChoices$Outbound;
}

export function createCompletionResponseChoicesToJSON(
  createCompletionResponseChoices: CreateCompletionResponseChoices,
): string {
  return JSON.stringify(
    CreateCompletionResponseChoices$outboundSchema.parse(
      createCompletionResponseChoices,
    ),
  );
}

export function createCompletionResponseChoicesFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompletionResponseChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompletionResponseChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompletionResponseChoices' from JSON`,
  );
}

/** @internal */
export const CreateCompletionResponseObject$inboundSchema: z.ZodNativeEnum<
  typeof CreateCompletionResponseObject
> = z.nativeEnum(CreateCompletionResponseObject);

/** @internal */
export const CreateCompletionResponseObject$outboundSchema: z.ZodNativeEnum<
  typeof CreateCompletionResponseObject
> = CreateCompletionResponseObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompletionResponseObject$ {
  /** @deprecated use `CreateCompletionResponseObject$inboundSchema` instead. */
  export const inboundSchema = CreateCompletionResponseObject$inboundSchema;
  /** @deprecated use `CreateCompletionResponseObject$outboundSchema` instead. */
  export const outboundSchema = CreateCompletionResponseObject$outboundSchema;
}

/** @internal */
export const CreateCompletionResponse$inboundSchema: z.ZodType<
  CreateCompletionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  choices: z.array(z.lazy(() => CreateCompletionResponseChoices$inboundSchema)),
  created: z.number().int(),
  model: z.string(),
  system_fingerprint: z.string().optional(),
  object: CreateCompletionResponseObject$inboundSchema,
  usage: CompletionUsage$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "system_fingerprint": "systemFingerprint",
  });
});

/** @internal */
export type CreateCompletionResponse$Outbound = {
  id: string;
  choices: Array<CreateCompletionResponseChoices$Outbound>;
  created: number;
  model: string;
  system_fingerprint?: string | undefined;
  object: string;
  usage?: CompletionUsage$Outbound | undefined;
};

/** @internal */
export const CreateCompletionResponse$outboundSchema: z.ZodType<
  CreateCompletionResponse$Outbound,
  z.ZodTypeDef,
  CreateCompletionResponse
> = z.object({
  id: z.string(),
  choices: z.array(
    z.lazy(() => CreateCompletionResponseChoices$outboundSchema),
  ),
  created: z.number().int(),
  model: z.string(),
  systemFingerprint: z.string().optional(),
  object: CreateCompletionResponseObject$outboundSchema,
  usage: CompletionUsage$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    systemFingerprint: "system_fingerprint",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCompletionResponse$ {
  /** @deprecated use `CreateCompletionResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCompletionResponse$inboundSchema;
  /** @deprecated use `CreateCompletionResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCompletionResponse$outboundSchema;
  /** @deprecated use `CreateCompletionResponse$Outbound` instead. */
  export type Outbound = CreateCompletionResponse$Outbound;
}

export function createCompletionResponseToJSON(
  createCompletionResponse: CreateCompletionResponse,
): string {
  return JSON.stringify(
    CreateCompletionResponse$outboundSchema.parse(createCompletionResponse),
  );
}

export function createCompletionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCompletionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCompletionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCompletionResponse' from JSON`,
  );
}
