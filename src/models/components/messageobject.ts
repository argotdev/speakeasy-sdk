/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssistantToolsCode,
  AssistantToolsCode$inboundSchema,
  AssistantToolsCode$Outbound,
  AssistantToolsCode$outboundSchema,
} from "./assistanttoolscode.js";
import {
  AssistantToolsFileSearchTypeOnly,
  AssistantToolsFileSearchTypeOnly$inboundSchema,
  AssistantToolsFileSearchTypeOnly$Outbound,
  AssistantToolsFileSearchTypeOnly$outboundSchema,
} from "./assistanttoolsfilesearchtypeonly.js";
import {
  MessageContentImageFileObject,
  MessageContentImageFileObject$inboundSchema,
  MessageContentImageFileObject$Outbound,
  MessageContentImageFileObject$outboundSchema,
} from "./messagecontentimagefileobject.js";
import {
  MessageContentImageUrlObject,
  MessageContentImageUrlObject$inboundSchema,
  MessageContentImageUrlObject$Outbound,
  MessageContentImageUrlObject$outboundSchema,
} from "./messagecontentimageurlobject.js";
import {
  MessageContentRefusalObject,
  MessageContentRefusalObject$inboundSchema,
  MessageContentRefusalObject$Outbound,
  MessageContentRefusalObject$outboundSchema,
} from "./messagecontentrefusalobject.js";
import {
  MessageContentTextObject,
  MessageContentTextObject$inboundSchema,
  MessageContentTextObject$Outbound,
  MessageContentTextObject$outboundSchema,
} from "./messagecontenttextobject.js";

/**
 * The object type, which is always `thread.message`.
 */
export const MessageObjectObject = {
  ThreadMessage: "thread.message",
} as const;
/**
 * The object type, which is always `thread.message`.
 */
export type MessageObjectObject = ClosedEnum<typeof MessageObjectObject>;

/**
 * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
 */
export const MessageObjectStatus = {
  InProgress: "in_progress",
  Incomplete: "incomplete",
  Completed: "completed",
} as const;
/**
 * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
 */
export type MessageObjectStatus = ClosedEnum<typeof MessageObjectStatus>;

/**
 * The reason the message is incomplete.
 */
export const Reason = {
  ContentFilter: "content_filter",
  MaxTokens: "max_tokens",
  RunCancelled: "run_cancelled",
  RunExpired: "run_expired",
  RunFailed: "run_failed",
} as const;
/**
 * The reason the message is incomplete.
 */
export type Reason = ClosedEnum<typeof Reason>;

/**
 * On an incomplete message, details about why the message is incomplete.
 */
export type IncompleteDetails = {
  /**
   * The reason the message is incomplete.
   */
  reason: Reason;
};

/**
 * The entity that produced the message. One of `user` or `assistant`.
 */
export const MessageObjectRole = {
  User: "user",
  Assistant: "assistant",
} as const;
/**
 * The entity that produced the message. One of `user` or `assistant`.
 */
export type MessageObjectRole = ClosedEnum<typeof MessageObjectRole>;

export type MessageObjectContent =
  | MessageContentImageFileObject
  | MessageContentImageUrlObject
  | MessageContentTextObject
  | MessageContentRefusalObject;

export type MessageObjectTools =
  | AssistantToolsCode
  | AssistantToolsFileSearchTypeOnly;

export type MessageObjectAttachments = {
  /**
   * The ID of the file to attach to the message.
   */
  fileId?: string | undefined;
  /**
   * The tools to add this file to.
   */
  tools?:
    | Array<AssistantToolsCode | AssistantToolsFileSearchTypeOnly>
    | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type MessageObjectMetadata = {};

/**
 * Represents a message within a [thread](/docs/api-reference/threads).
 */
export type MessageObject = {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `thread.message`.
   */
  object: MessageObjectObject;
  /**
   * The Unix timestamp (in seconds) for when the message was created.
   */
  createdAt: number;
  /**
   * The [thread](/docs/api-reference/threads) ID that this message belongs to.
   */
  threadId: string;
  /**
   * The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
   */
  status: MessageObjectStatus;
  /**
   * On an incomplete message, details about why the message is incomplete.
   */
  incompleteDetails: IncompleteDetails | null;
  /**
   * The Unix timestamp (in seconds) for when the message was completed.
   */
  completedAt: number | null;
  /**
   * The Unix timestamp (in seconds) for when the message was marked as incomplete.
   */
  incompleteAt: number | null;
  /**
   * The entity that produced the message. One of `user` or `assistant`.
   */
  role: MessageObjectRole;
  /**
   * The content of the message in array of text and/or images.
   */
  content: Array<
    | MessageContentImageFileObject
    | MessageContentImageUrlObject
    | MessageContentTextObject
    | MessageContentRefusalObject
  >;
  /**
   * If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
   */
  assistantId: string | null;
  /**
   * The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
   */
  runId: string | null;
  /**
   * A list of files attached to the message, and the tools they were added to.
   */
  attachments: Array<MessageObjectAttachments> | null;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata: MessageObjectMetadata | null;
};

/** @internal */
export const MessageObjectObject$inboundSchema: z.ZodNativeEnum<
  typeof MessageObjectObject
> = z.nativeEnum(MessageObjectObject);

/** @internal */
export const MessageObjectObject$outboundSchema: z.ZodNativeEnum<
  typeof MessageObjectObject
> = MessageObjectObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectObject$ {
  /** @deprecated use `MessageObjectObject$inboundSchema` instead. */
  export const inboundSchema = MessageObjectObject$inboundSchema;
  /** @deprecated use `MessageObjectObject$outboundSchema` instead. */
  export const outboundSchema = MessageObjectObject$outboundSchema;
}

/** @internal */
export const MessageObjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof MessageObjectStatus
> = z.nativeEnum(MessageObjectStatus);

/** @internal */
export const MessageObjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof MessageObjectStatus
> = MessageObjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectStatus$ {
  /** @deprecated use `MessageObjectStatus$inboundSchema` instead. */
  export const inboundSchema = MessageObjectStatus$inboundSchema;
  /** @deprecated use `MessageObjectStatus$outboundSchema` instead. */
  export const outboundSchema = MessageObjectStatus$outboundSchema;
}

/** @internal */
export const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason> = z
  .nativeEnum(Reason);

/** @internal */
export const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason> =
  Reason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const IncompleteDetails$inboundSchema: z.ZodType<
  IncompleteDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reason: Reason$inboundSchema,
});

/** @internal */
export type IncompleteDetails$Outbound = {
  reason: string;
};

/** @internal */
export const IncompleteDetails$outboundSchema: z.ZodType<
  IncompleteDetails$Outbound,
  z.ZodTypeDef,
  IncompleteDetails
> = z.object({
  reason: Reason$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompleteDetails$ {
  /** @deprecated use `IncompleteDetails$inboundSchema` instead. */
  export const inboundSchema = IncompleteDetails$inboundSchema;
  /** @deprecated use `IncompleteDetails$outboundSchema` instead. */
  export const outboundSchema = IncompleteDetails$outboundSchema;
  /** @deprecated use `IncompleteDetails$Outbound` instead. */
  export type Outbound = IncompleteDetails$Outbound;
}

export function incompleteDetailsToJSON(
  incompleteDetails: IncompleteDetails,
): string {
  return JSON.stringify(
    IncompleteDetails$outboundSchema.parse(incompleteDetails),
  );
}

export function incompleteDetailsFromJSON(
  jsonString: string,
): SafeParseResult<IncompleteDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IncompleteDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncompleteDetails' from JSON`,
  );
}

/** @internal */
export const MessageObjectRole$inboundSchema: z.ZodNativeEnum<
  typeof MessageObjectRole
> = z.nativeEnum(MessageObjectRole);

/** @internal */
export const MessageObjectRole$outboundSchema: z.ZodNativeEnum<
  typeof MessageObjectRole
> = MessageObjectRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectRole$ {
  /** @deprecated use `MessageObjectRole$inboundSchema` instead. */
  export const inboundSchema = MessageObjectRole$inboundSchema;
  /** @deprecated use `MessageObjectRole$outboundSchema` instead. */
  export const outboundSchema = MessageObjectRole$outboundSchema;
}

/** @internal */
export const MessageObjectContent$inboundSchema: z.ZodType<
  MessageObjectContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  MessageContentImageFileObject$inboundSchema,
  MessageContentImageUrlObject$inboundSchema,
  MessageContentTextObject$inboundSchema,
  MessageContentRefusalObject$inboundSchema,
]);

/** @internal */
export type MessageObjectContent$Outbound =
  | MessageContentImageFileObject$Outbound
  | MessageContentImageUrlObject$Outbound
  | MessageContentTextObject$Outbound
  | MessageContentRefusalObject$Outbound;

/** @internal */
export const MessageObjectContent$outboundSchema: z.ZodType<
  MessageObjectContent$Outbound,
  z.ZodTypeDef,
  MessageObjectContent
> = z.union([
  MessageContentImageFileObject$outboundSchema,
  MessageContentImageUrlObject$outboundSchema,
  MessageContentTextObject$outboundSchema,
  MessageContentRefusalObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectContent$ {
  /** @deprecated use `MessageObjectContent$inboundSchema` instead. */
  export const inboundSchema = MessageObjectContent$inboundSchema;
  /** @deprecated use `MessageObjectContent$outboundSchema` instead. */
  export const outboundSchema = MessageObjectContent$outboundSchema;
  /** @deprecated use `MessageObjectContent$Outbound` instead. */
  export type Outbound = MessageObjectContent$Outbound;
}

export function messageObjectContentToJSON(
  messageObjectContent: MessageObjectContent,
): string {
  return JSON.stringify(
    MessageObjectContent$outboundSchema.parse(messageObjectContent),
  );
}

export function messageObjectContentFromJSON(
  jsonString: string,
): SafeParseResult<MessageObjectContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageObjectContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageObjectContent' from JSON`,
  );
}

/** @internal */
export const MessageObjectTools$inboundSchema: z.ZodType<
  MessageObjectTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  AssistantToolsCode$inboundSchema,
  AssistantToolsFileSearchTypeOnly$inboundSchema,
]);

/** @internal */
export type MessageObjectTools$Outbound =
  | AssistantToolsCode$Outbound
  | AssistantToolsFileSearchTypeOnly$Outbound;

/** @internal */
export const MessageObjectTools$outboundSchema: z.ZodType<
  MessageObjectTools$Outbound,
  z.ZodTypeDef,
  MessageObjectTools
> = z.union([
  AssistantToolsCode$outboundSchema,
  AssistantToolsFileSearchTypeOnly$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectTools$ {
  /** @deprecated use `MessageObjectTools$inboundSchema` instead. */
  export const inboundSchema = MessageObjectTools$inboundSchema;
  /** @deprecated use `MessageObjectTools$outboundSchema` instead. */
  export const outboundSchema = MessageObjectTools$outboundSchema;
  /** @deprecated use `MessageObjectTools$Outbound` instead. */
  export type Outbound = MessageObjectTools$Outbound;
}

export function messageObjectToolsToJSON(
  messageObjectTools: MessageObjectTools,
): string {
  return JSON.stringify(
    MessageObjectTools$outboundSchema.parse(messageObjectTools),
  );
}

export function messageObjectToolsFromJSON(
  jsonString: string,
): SafeParseResult<MessageObjectTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageObjectTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageObjectTools' from JSON`,
  );
}

/** @internal */
export const MessageObjectAttachments$inboundSchema: z.ZodType<
  MessageObjectAttachments,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string().optional(),
  tools: z.array(
    z.union([
      AssistantToolsCode$inboundSchema,
      AssistantToolsFileSearchTypeOnly$inboundSchema,
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type MessageObjectAttachments$Outbound = {
  file_id?: string | undefined;
  tools?:
    | Array<
      AssistantToolsCode$Outbound | AssistantToolsFileSearchTypeOnly$Outbound
    >
    | undefined;
};

/** @internal */
export const MessageObjectAttachments$outboundSchema: z.ZodType<
  MessageObjectAttachments$Outbound,
  z.ZodTypeDef,
  MessageObjectAttachments
> = z.object({
  fileId: z.string().optional(),
  tools: z.array(
    z.union([
      AssistantToolsCode$outboundSchema,
      AssistantToolsFileSearchTypeOnly$outboundSchema,
    ]),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectAttachments$ {
  /** @deprecated use `MessageObjectAttachments$inboundSchema` instead. */
  export const inboundSchema = MessageObjectAttachments$inboundSchema;
  /** @deprecated use `MessageObjectAttachments$outboundSchema` instead. */
  export const outboundSchema = MessageObjectAttachments$outboundSchema;
  /** @deprecated use `MessageObjectAttachments$Outbound` instead. */
  export type Outbound = MessageObjectAttachments$Outbound;
}

export function messageObjectAttachmentsToJSON(
  messageObjectAttachments: MessageObjectAttachments,
): string {
  return JSON.stringify(
    MessageObjectAttachments$outboundSchema.parse(messageObjectAttachments),
  );
}

export function messageObjectAttachmentsFromJSON(
  jsonString: string,
): SafeParseResult<MessageObjectAttachments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageObjectAttachments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageObjectAttachments' from JSON`,
  );
}

/** @internal */
export const MessageObjectMetadata$inboundSchema: z.ZodType<
  MessageObjectMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type MessageObjectMetadata$Outbound = {};

/** @internal */
export const MessageObjectMetadata$outboundSchema: z.ZodType<
  MessageObjectMetadata$Outbound,
  z.ZodTypeDef,
  MessageObjectMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObjectMetadata$ {
  /** @deprecated use `MessageObjectMetadata$inboundSchema` instead. */
  export const inboundSchema = MessageObjectMetadata$inboundSchema;
  /** @deprecated use `MessageObjectMetadata$outboundSchema` instead. */
  export const outboundSchema = MessageObjectMetadata$outboundSchema;
  /** @deprecated use `MessageObjectMetadata$Outbound` instead. */
  export type Outbound = MessageObjectMetadata$Outbound;
}

export function messageObjectMetadataToJSON(
  messageObjectMetadata: MessageObjectMetadata,
): string {
  return JSON.stringify(
    MessageObjectMetadata$outboundSchema.parse(messageObjectMetadata),
  );
}

export function messageObjectMetadataFromJSON(
  jsonString: string,
): SafeParseResult<MessageObjectMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageObjectMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageObjectMetadata' from JSON`,
  );
}

/** @internal */
export const MessageObject$inboundSchema: z.ZodType<
  MessageObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: MessageObjectObject$inboundSchema,
  created_at: z.number().int(),
  thread_id: z.string(),
  status: MessageObjectStatus$inboundSchema,
  incomplete_details: z.nullable(z.lazy(() => IncompleteDetails$inboundSchema)),
  completed_at: z.nullable(z.number().int()),
  incomplete_at: z.nullable(z.number().int()),
  role: MessageObjectRole$inboundSchema,
  content: z.array(
    z.union([
      MessageContentImageFileObject$inboundSchema,
      MessageContentImageUrlObject$inboundSchema,
      MessageContentTextObject$inboundSchema,
      MessageContentRefusalObject$inboundSchema,
    ]),
  ),
  assistant_id: z.nullable(z.string()),
  run_id: z.nullable(z.string()),
  attachments: z.nullable(
    z.array(z.lazy(() => MessageObjectAttachments$inboundSchema)),
  ),
  metadata: z.nullable(z.lazy(() => MessageObjectMetadata$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "thread_id": "threadId",
    "incomplete_details": "incompleteDetails",
    "completed_at": "completedAt",
    "incomplete_at": "incompleteAt",
    "assistant_id": "assistantId",
    "run_id": "runId",
  });
});

/** @internal */
export type MessageObject$Outbound = {
  id: string;
  object: string;
  created_at: number;
  thread_id: string;
  status: string;
  incomplete_details: IncompleteDetails$Outbound | null;
  completed_at: number | null;
  incomplete_at: number | null;
  role: string;
  content: Array<
    | MessageContentImageFileObject$Outbound
    | MessageContentImageUrlObject$Outbound
    | MessageContentTextObject$Outbound
    | MessageContentRefusalObject$Outbound
  >;
  assistant_id: string | null;
  run_id: string | null;
  attachments: Array<MessageObjectAttachments$Outbound> | null;
  metadata: MessageObjectMetadata$Outbound | null;
};

/** @internal */
export const MessageObject$outboundSchema: z.ZodType<
  MessageObject$Outbound,
  z.ZodTypeDef,
  MessageObject
> = z.object({
  id: z.string(),
  object: MessageObjectObject$outboundSchema,
  createdAt: z.number().int(),
  threadId: z.string(),
  status: MessageObjectStatus$outboundSchema,
  incompleteDetails: z.nullable(z.lazy(() => IncompleteDetails$outboundSchema)),
  completedAt: z.nullable(z.number().int()),
  incompleteAt: z.nullable(z.number().int()),
  role: MessageObjectRole$outboundSchema,
  content: z.array(
    z.union([
      MessageContentImageFileObject$outboundSchema,
      MessageContentImageUrlObject$outboundSchema,
      MessageContentTextObject$outboundSchema,
      MessageContentRefusalObject$outboundSchema,
    ]),
  ),
  assistantId: z.nullable(z.string()),
  runId: z.nullable(z.string()),
  attachments: z.nullable(
    z.array(z.lazy(() => MessageObjectAttachments$outboundSchema)),
  ),
  metadata: z.nullable(z.lazy(() => MessageObjectMetadata$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    threadId: "thread_id",
    incompleteDetails: "incomplete_details",
    completedAt: "completed_at",
    incompleteAt: "incomplete_at",
    assistantId: "assistant_id",
    runId: "run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageObject$ {
  /** @deprecated use `MessageObject$inboundSchema` instead. */
  export const inboundSchema = MessageObject$inboundSchema;
  /** @deprecated use `MessageObject$outboundSchema` instead. */
  export const outboundSchema = MessageObject$outboundSchema;
  /** @deprecated use `MessageObject$Outbound` instead. */
  export type Outbound = MessageObject$Outbound;
}

export function messageObjectToJSON(messageObject: MessageObject): string {
  return JSON.stringify(MessageObject$outboundSchema.parse(messageObject));
}

export function messageObjectFromJSON(
  jsonString: string,
): SafeParseResult<MessageObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageObject' from JSON`,
  );
}
