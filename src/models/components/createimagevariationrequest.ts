/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateImageVariationRequestImage = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export const CreateImageVariationRequestModel2 = {
  DallE2: "dall-e-2",
} as const;
export type CreateImageVariationRequestModel2 = ClosedEnum<
  typeof CreateImageVariationRequestModel2
>;

/**
 * The model to use for image generation. Only `dall-e-2` is supported at this time.
 */
export type CreateImageVariationRequestModel =
  | string
  | CreateImageVariationRequestModel2;

/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 */
export const CreateImageVariationRequestResponseFormat = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 */
export type CreateImageVariationRequestResponseFormat = ClosedEnum<
  typeof CreateImageVariationRequestResponseFormat
>;

/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export const CreateImageVariationRequestSize = {
  TwoHundredAndFiftySixx256: "256x256",
  FiveHundredAndTwelvex512: "512x512",
  OneThousandAndTwentyFourx1024: "1024x1024",
} as const;
/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export type CreateImageVariationRequestSize = ClosedEnum<
  typeof CreateImageVariationRequestSize
>;

export type CreateImageVariationRequest = {
  /**
   * The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
   */
  image: CreateImageVariationRequestImage | Blob;
  /**
   * The model to use for image generation. Only `dall-e-2` is supported at this time.
   */
  model?: string | CreateImageVariationRequestModel2 | null | undefined;
  /**
   * The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
   */
  n?: number | null | undefined;
  /**
   * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
   */
  responseFormat?: CreateImageVariationRequestResponseFormat | null | undefined;
  /**
   * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
   */
  size?: CreateImageVariationRequestSize | null | undefined;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
   *
   * @remarks
   */
  user?: string | undefined;
};

/** @internal */
export const CreateImageVariationRequestImage$inboundSchema: z.ZodType<
  CreateImageVariationRequestImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type CreateImageVariationRequestImage$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const CreateImageVariationRequestImage$outboundSchema: z.ZodType<
  CreateImageVariationRequestImage$Outbound,
  z.ZodTypeDef,
  CreateImageVariationRequestImage
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageVariationRequestImage$ {
  /** @deprecated use `CreateImageVariationRequestImage$inboundSchema` instead. */
  export const inboundSchema = CreateImageVariationRequestImage$inboundSchema;
  /** @deprecated use `CreateImageVariationRequestImage$outboundSchema` instead. */
  export const outboundSchema = CreateImageVariationRequestImage$outboundSchema;
  /** @deprecated use `CreateImageVariationRequestImage$Outbound` instead. */
  export type Outbound = CreateImageVariationRequestImage$Outbound;
}

export function createImageVariationRequestImageToJSON(
  createImageVariationRequestImage: CreateImageVariationRequestImage,
): string {
  return JSON.stringify(
    CreateImageVariationRequestImage$outboundSchema.parse(
      createImageVariationRequestImage,
    ),
  );
}

export function createImageVariationRequestImageFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageVariationRequestImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageVariationRequestImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageVariationRequestImage' from JSON`,
  );
}

/** @internal */
export const CreateImageVariationRequestModel2$inboundSchema: z.ZodNativeEnum<
  typeof CreateImageVariationRequestModel2
> = z.nativeEnum(CreateImageVariationRequestModel2);

/** @internal */
export const CreateImageVariationRequestModel2$outboundSchema: z.ZodNativeEnum<
  typeof CreateImageVariationRequestModel2
> = CreateImageVariationRequestModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageVariationRequestModel2$ {
  /** @deprecated use `CreateImageVariationRequestModel2$inboundSchema` instead. */
  export const inboundSchema = CreateImageVariationRequestModel2$inboundSchema;
  /** @deprecated use `CreateImageVariationRequestModel2$outboundSchema` instead. */
  export const outboundSchema =
    CreateImageVariationRequestModel2$outboundSchema;
}

/** @internal */
export const CreateImageVariationRequestModel$inboundSchema: z.ZodType<
  CreateImageVariationRequestModel,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateImageVariationRequestModel2$inboundSchema]);

/** @internal */
export type CreateImageVariationRequestModel$Outbound = string | string;

/** @internal */
export const CreateImageVariationRequestModel$outboundSchema: z.ZodType<
  CreateImageVariationRequestModel$Outbound,
  z.ZodTypeDef,
  CreateImageVariationRequestModel
> = z.union([z.string(), CreateImageVariationRequestModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageVariationRequestModel$ {
  /** @deprecated use `CreateImageVariationRequestModel$inboundSchema` instead. */
  export const inboundSchema = CreateImageVariationRequestModel$inboundSchema;
  /** @deprecated use `CreateImageVariationRequestModel$outboundSchema` instead. */
  export const outboundSchema = CreateImageVariationRequestModel$outboundSchema;
  /** @deprecated use `CreateImageVariationRequestModel$Outbound` instead. */
  export type Outbound = CreateImageVariationRequestModel$Outbound;
}

export function createImageVariationRequestModelToJSON(
  createImageVariationRequestModel: CreateImageVariationRequestModel,
): string {
  return JSON.stringify(
    CreateImageVariationRequestModel$outboundSchema.parse(
      createImageVariationRequestModel,
    ),
  );
}

export function createImageVariationRequestModelFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageVariationRequestModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageVariationRequestModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageVariationRequestModel' from JSON`,
  );
}

/** @internal */
export const CreateImageVariationRequestResponseFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreateImageVariationRequestResponseFormat> = z
    .nativeEnum(CreateImageVariationRequestResponseFormat);

/** @internal */
export const CreateImageVariationRequestResponseFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreateImageVariationRequestResponseFormat> =
    CreateImageVariationRequestResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageVariationRequestResponseFormat$ {
  /** @deprecated use `CreateImageVariationRequestResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreateImageVariationRequestResponseFormat$inboundSchema;
  /** @deprecated use `CreateImageVariationRequestResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreateImageVariationRequestResponseFormat$outboundSchema;
}

/** @internal */
export const CreateImageVariationRequestSize$inboundSchema: z.ZodNativeEnum<
  typeof CreateImageVariationRequestSize
> = z.nativeEnum(CreateImageVariationRequestSize);

/** @internal */
export const CreateImageVariationRequestSize$outboundSchema: z.ZodNativeEnum<
  typeof CreateImageVariationRequestSize
> = CreateImageVariationRequestSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageVariationRequestSize$ {
  /** @deprecated use `CreateImageVariationRequestSize$inboundSchema` instead. */
  export const inboundSchema = CreateImageVariationRequestSize$inboundSchema;
  /** @deprecated use `CreateImageVariationRequestSize$outboundSchema` instead. */
  export const outboundSchema = CreateImageVariationRequestSize$outboundSchema;
}

/** @internal */
export const CreateImageVariationRequest$inboundSchema: z.ZodType<
  CreateImageVariationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.lazy(() => CreateImageVariationRequestImage$inboundSchema),
  model: z.nullable(
    z.union([z.string(), CreateImageVariationRequestModel2$inboundSchema]),
  ).optional(),
  n: z.nullable(z.number().int().default(1)),
  response_format: z.nullable(
    CreateImageVariationRequestResponseFormat$inboundSchema.default("url"),
  ),
  size: z.nullable(
    CreateImageVariationRequestSize$inboundSchema.default("1024x1024"),
  ),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CreateImageVariationRequest$Outbound = {
  image: CreateImageVariationRequestImage$Outbound | Blob;
  model?: string | string | null | undefined;
  n: number | null;
  response_format: string | null;
  size: string | null;
  user?: string | undefined;
};

/** @internal */
export const CreateImageVariationRequest$outboundSchema: z.ZodType<
  CreateImageVariationRequest$Outbound,
  z.ZodTypeDef,
  CreateImageVariationRequest
> = z.object({
  image: z.lazy(() => CreateImageVariationRequestImage$outboundSchema).or(
    blobLikeSchema,
  ),
  model: z.nullable(
    z.union([z.string(), CreateImageVariationRequestModel2$outboundSchema]),
  ).optional(),
  n: z.nullable(z.number().int().default(1)),
  responseFormat: z.nullable(
    CreateImageVariationRequestResponseFormat$outboundSchema.default("url"),
  ),
  size: z.nullable(
    CreateImageVariationRequestSize$outboundSchema.default("1024x1024"),
  ),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageVariationRequest$ {
  /** @deprecated use `CreateImageVariationRequest$inboundSchema` instead. */
  export const inboundSchema = CreateImageVariationRequest$inboundSchema;
  /** @deprecated use `CreateImageVariationRequest$outboundSchema` instead. */
  export const outboundSchema = CreateImageVariationRequest$outboundSchema;
  /** @deprecated use `CreateImageVariationRequest$Outbound` instead. */
  export type Outbound = CreateImageVariationRequest$Outbound;
}

export function createImageVariationRequestToJSON(
  createImageVariationRequest: CreateImageVariationRequest,
): string {
  return JSON.stringify(
    CreateImageVariationRequest$outboundSchema.parse(
      createImageVariationRequest,
    ),
  );
}

export function createImageVariationRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageVariationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageVariationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageVariationRequest' from JSON`,
  );
}
