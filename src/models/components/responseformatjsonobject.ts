/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of response format being defined: `json_object`
 */
export const ResponseFormatJsonObjectType = {
  JsonObject: "json_object",
} as const;
/**
 * The type of response format being defined: `json_object`
 */
export type ResponseFormatJsonObjectType = ClosedEnum<
  typeof ResponseFormatJsonObjectType
>;

export type ResponseFormatJsonObject = {
  /**
   * The type of response format being defined: `json_object`
   */
  type: ResponseFormatJsonObjectType;
};

/** @internal */
export const ResponseFormatJsonObjectType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatJsonObjectType
> = z.nativeEnum(ResponseFormatJsonObjectType);

/** @internal */
export const ResponseFormatJsonObjectType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatJsonObjectType
> = ResponseFormatJsonObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonObjectType$ {
  /** @deprecated use `ResponseFormatJsonObjectType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonObjectType$inboundSchema;
  /** @deprecated use `ResponseFormatJsonObjectType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonObjectType$outboundSchema;
}

/** @internal */
export const ResponseFormatJsonObject$inboundSchema: z.ZodType<
  ResponseFormatJsonObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatJsonObjectType$inboundSchema,
});

/** @internal */
export type ResponseFormatJsonObject$Outbound = {
  type: string;
};

/** @internal */
export const ResponseFormatJsonObject$outboundSchema: z.ZodType<
  ResponseFormatJsonObject$Outbound,
  z.ZodTypeDef,
  ResponseFormatJsonObject
> = z.object({
  type: ResponseFormatJsonObjectType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonObject$ {
  /** @deprecated use `ResponseFormatJsonObject$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonObject$inboundSchema;
  /** @deprecated use `ResponseFormatJsonObject$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonObject$outboundSchema;
  /** @deprecated use `ResponseFormatJsonObject$Outbound` instead. */
  export type Outbound = ResponseFormatJsonObject$Outbound;
}

export function responseFormatJsonObjectToJSON(
  responseFormatJsonObject: ResponseFormatJsonObject,
): string {
  return JSON.stringify(
    ResponseFormatJsonObject$outboundSchema.parse(responseFormatJsonObject),
  );
}

export function responseFormatJsonObjectFromJSON(
  jsonString: string,
): SafeParseResult<ResponseFormatJsonObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseFormatJsonObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseFormatJsonObject' from JSON`,
  );
}
