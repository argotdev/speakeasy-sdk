/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Batch,
  Batch$inboundSchema,
  Batch$Outbound,
  Batch$outboundSchema,
} from "./batch.js";

export const ListBatchesResponseObject = {
  List: "list",
} as const;
export type ListBatchesResponseObject = ClosedEnum<
  typeof ListBatchesResponseObject
>;

export type ListBatchesResponse = {
  data: Array<Batch>;
  firstId?: string | undefined;
  lastId?: string | undefined;
  hasMore: boolean;
  object: ListBatchesResponseObject;
};

/** @internal */
export const ListBatchesResponseObject$inboundSchema: z.ZodNativeEnum<
  typeof ListBatchesResponseObject
> = z.nativeEnum(ListBatchesResponseObject);

/** @internal */
export const ListBatchesResponseObject$outboundSchema: z.ZodNativeEnum<
  typeof ListBatchesResponseObject
> = ListBatchesResponseObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesResponseObject$ {
  /** @deprecated use `ListBatchesResponseObject$inboundSchema` instead. */
  export const inboundSchema = ListBatchesResponseObject$inboundSchema;
  /** @deprecated use `ListBatchesResponseObject$outboundSchema` instead. */
  export const outboundSchema = ListBatchesResponseObject$outboundSchema;
}

/** @internal */
export const ListBatchesResponse$inboundSchema: z.ZodType<
  ListBatchesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(Batch$inboundSchema),
  first_id: z.string().optional(),
  last_id: z.string().optional(),
  has_more: z.boolean(),
  object: ListBatchesResponseObject$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "first_id": "firstId",
    "last_id": "lastId",
    "has_more": "hasMore",
  });
});

/** @internal */
export type ListBatchesResponse$Outbound = {
  data: Array<Batch$Outbound>;
  first_id?: string | undefined;
  last_id?: string | undefined;
  has_more: boolean;
  object: string;
};

/** @internal */
export const ListBatchesResponse$outboundSchema: z.ZodType<
  ListBatchesResponse$Outbound,
  z.ZodTypeDef,
  ListBatchesResponse
> = z.object({
  data: z.array(Batch$outboundSchema),
  firstId: z.string().optional(),
  lastId: z.string().optional(),
  hasMore: z.boolean(),
  object: ListBatchesResponseObject$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    firstId: "first_id",
    lastId: "last_id",
    hasMore: "has_more",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBatchesResponse$ {
  /** @deprecated use `ListBatchesResponse$inboundSchema` instead. */
  export const inboundSchema = ListBatchesResponse$inboundSchema;
  /** @deprecated use `ListBatchesResponse$outboundSchema` instead. */
  export const outboundSchema = ListBatchesResponse$outboundSchema;
  /** @deprecated use `ListBatchesResponse$Outbound` instead. */
  export type Outbound = ListBatchesResponse$Outbound;
}

export function listBatchesResponseToJSON(
  listBatchesResponse: ListBatchesResponse,
): string {
  return JSON.stringify(
    ListBatchesResponse$outboundSchema.parse(listBatchesResponse),
  );
}

export function listBatchesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListBatchesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListBatchesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBatchesResponse' from JSON`,
  );
}
