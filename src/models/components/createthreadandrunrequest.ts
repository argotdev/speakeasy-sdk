/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AssistantsApiResponseFormatOption,
  AssistantsApiResponseFormatOption$inboundSchema,
  AssistantsApiResponseFormatOption$Outbound,
  AssistantsApiResponseFormatOption$outboundSchema,
} from "./assistantsapiresponseformatoption.js";
import {
  AssistantsApiToolChoiceOption,
  AssistantsApiToolChoiceOption$inboundSchema,
  AssistantsApiToolChoiceOption$Outbound,
  AssistantsApiToolChoiceOption$outboundSchema,
} from "./assistantsapitoolchoiceoption.js";
import {
  AssistantToolsCode,
  AssistantToolsCode$inboundSchema,
  AssistantToolsCode$Outbound,
  AssistantToolsCode$outboundSchema,
} from "./assistanttoolscode.js";
import {
  AssistantToolsFileSearch,
  AssistantToolsFileSearch$inboundSchema,
  AssistantToolsFileSearch$Outbound,
  AssistantToolsFileSearch$outboundSchema,
} from "./assistanttoolsfilesearch.js";
import {
  AssistantToolsFunction,
  AssistantToolsFunction$inboundSchema,
  AssistantToolsFunction$Outbound,
  AssistantToolsFunction$outboundSchema,
} from "./assistanttoolsfunction.js";
import {
  CreateThreadRequest,
  CreateThreadRequest$inboundSchema,
  CreateThreadRequest$Outbound,
  CreateThreadRequest$outboundSchema,
} from "./createthreadrequest.js";
import {
  TruncationObject,
  TruncationObject$inboundSchema,
  TruncationObject$Outbound,
  TruncationObject$outboundSchema,
} from "./truncationobject.js";

export const CreateThreadAndRunRequestModel2 = {
  Gpt4o: "gpt-4o",
  Gpt4o20240806: "gpt-4o-2024-08-06",
  Gpt4o20240513: "gpt-4o-2024-05-13",
  Gpt4oMini: "gpt-4o-mini",
  Gpt4oMini20240718: "gpt-4o-mini-2024-07-18",
  Gpt4Turbo: "gpt-4-turbo",
  Gpt4Turbo20240409: "gpt-4-turbo-2024-04-09",
  Gpt40125Preview: "gpt-4-0125-preview",
  Gpt4TurboPreview: "gpt-4-turbo-preview",
  Gpt41106Preview: "gpt-4-1106-preview",
  Gpt4VisionPreview: "gpt-4-vision-preview",
  Gpt4: "gpt-4",
  Gpt40314: "gpt-4-0314",
  Gpt40613: "gpt-4-0613",
  Gpt432k: "gpt-4-32k",
  Gpt432k0314: "gpt-4-32k-0314",
  Gpt432k0613: "gpt-4-32k-0613",
  Gpt35Turbo: "gpt-3.5-turbo",
  Gpt35Turbo16k: "gpt-3.5-turbo-16k",
  Gpt35Turbo0613: "gpt-3.5-turbo-0613",
  Gpt35Turbo1106: "gpt-3.5-turbo-1106",
  Gpt35Turbo0125: "gpt-3.5-turbo-0125",
  Gpt35Turbo16k0613: "gpt-3.5-turbo-16k-0613",
} as const;
export type CreateThreadAndRunRequestModel2 = ClosedEnum<
  typeof CreateThreadAndRunRequestModel2
>;

/**
 * The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
 */
export type CreateThreadAndRunRequestModel =
  | string
  | CreateThreadAndRunRequestModel2;

export type CreateThreadAndRunRequestTools =
  | AssistantToolsCode
  | AssistantToolsFileSearch
  | AssistantToolsFunction;

export type CreateThreadAndRunRequestCodeInterpreter = {
  /**
   * A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
};

export type CreateThreadAndRunRequestFileSearch = {
  /**
   * The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
   *
   * @remarks
   */
  vectorStoreIds?: Array<string> | undefined;
};

/**
 * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
 *
 * @remarks
 */
export type CreateThreadAndRunRequestToolResources = {
  codeInterpreter?: CreateThreadAndRunRequestCodeInterpreter | undefined;
  fileSearch?: CreateThreadAndRunRequestFileSearch | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateThreadAndRunRequestMetadata = {};

export type CreateThreadAndRunRequest = {
  /**
   * The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
   */
  assistantId: string;
  thread?: CreateThreadRequest | undefined;
  /**
   * The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
   */
  model?: string | CreateThreadAndRunRequestModel2 | null | undefined;
  /**
   * Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
   */
  instructions?: string | null | undefined;
  /**
   * Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
   */
  tools?:
    | Array<
      AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
    >
    | null
    | undefined;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   * @remarks
   */
  toolResources?: CreateThreadAndRunRequestToolResources | null | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateThreadAndRunRequestMetadata | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   * @remarks
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * @remarks
   *
   * We generally recommend altering this or temperature but not both.
   */
  topP?: number | null | undefined;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
   *
   * @remarks
   */
  stream?: boolean | null | undefined;
  /**
   * The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   * @remarks
   */
  maxPromptTokens?: number | null | undefined;
  /**
   * The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.
   *
   * @remarks
   */
  maxCompletionTokens?: number | null | undefined;
  /**
   * Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
   */
  truncationStrategy?: TruncationObject | undefined;
  /**
   * Controls which (if any) tool is called by the model.
   *
   * @remarks
   * `none` means the model will not call any tools and instead generates a message.
   * `auto` is the default value and means the model can pick between generating a message or calling one or more tools.
   * `required` means the model must call one or more tools before responding to the user.
   * Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that tool.
   */
  toolChoice?: AssistantsApiToolChoiceOption | undefined;
  /**
   * Whether to enable [parallel function calling](/docs/guides/function-calling/parallel-function-calling) during tool use.
   */
  parallelToolCalls?: boolean | undefined;
  /**
   * Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4 Turbo](/docs/models/gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
   *
   * @remarks
   *
   * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
   *
   * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
   */
  responseFormat?: AssistantsApiResponseFormatOption | undefined;
};

/** @internal */
export const CreateThreadAndRunRequestModel2$inboundSchema: z.ZodNativeEnum<
  typeof CreateThreadAndRunRequestModel2
> = z.nativeEnum(CreateThreadAndRunRequestModel2);

/** @internal */
export const CreateThreadAndRunRequestModel2$outboundSchema: z.ZodNativeEnum<
  typeof CreateThreadAndRunRequestModel2
> = CreateThreadAndRunRequestModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestModel2$ {
  /** @deprecated use `CreateThreadAndRunRequestModel2$inboundSchema` instead. */
  export const inboundSchema = CreateThreadAndRunRequestModel2$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestModel2$outboundSchema` instead. */
  export const outboundSchema = CreateThreadAndRunRequestModel2$outboundSchema;
}

/** @internal */
export const CreateThreadAndRunRequestModel$inboundSchema: z.ZodType<
  CreateThreadAndRunRequestModel,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateThreadAndRunRequestModel2$inboundSchema]);

/** @internal */
export type CreateThreadAndRunRequestModel$Outbound = string | string;

/** @internal */
export const CreateThreadAndRunRequestModel$outboundSchema: z.ZodType<
  CreateThreadAndRunRequestModel$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequestModel
> = z.union([z.string(), CreateThreadAndRunRequestModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestModel$ {
  /** @deprecated use `CreateThreadAndRunRequestModel$inboundSchema` instead. */
  export const inboundSchema = CreateThreadAndRunRequestModel$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestModel$outboundSchema` instead. */
  export const outboundSchema = CreateThreadAndRunRequestModel$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestModel$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequestModel$Outbound;
}

/** @internal */
export const CreateThreadAndRunRequestTools$inboundSchema: z.ZodType<
  CreateThreadAndRunRequestTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  AssistantToolsCode$inboundSchema,
  AssistantToolsFileSearch$inboundSchema,
  AssistantToolsFunction$inboundSchema,
]);

/** @internal */
export type CreateThreadAndRunRequestTools$Outbound =
  | AssistantToolsCode$Outbound
  | AssistantToolsFileSearch$Outbound
  | AssistantToolsFunction$Outbound;

/** @internal */
export const CreateThreadAndRunRequestTools$outboundSchema: z.ZodType<
  CreateThreadAndRunRequestTools$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequestTools
> = z.union([
  AssistantToolsCode$outboundSchema,
  AssistantToolsFileSearch$outboundSchema,
  AssistantToolsFunction$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestTools$ {
  /** @deprecated use `CreateThreadAndRunRequestTools$inboundSchema` instead. */
  export const inboundSchema = CreateThreadAndRunRequestTools$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestTools$outboundSchema` instead. */
  export const outboundSchema = CreateThreadAndRunRequestTools$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestTools$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequestTools$Outbound;
}

/** @internal */
export const CreateThreadAndRunRequestCodeInterpreter$inboundSchema: z.ZodType<
  CreateThreadAndRunRequestCodeInterpreter,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
  });
});

/** @internal */
export type CreateThreadAndRunRequestCodeInterpreter$Outbound = {
  file_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateThreadAndRunRequestCodeInterpreter$outboundSchema: z.ZodType<
  CreateThreadAndRunRequestCodeInterpreter$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequestCodeInterpreter
> = z.object({
  fileIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestCodeInterpreter$ {
  /** @deprecated use `CreateThreadAndRunRequestCodeInterpreter$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadAndRunRequestCodeInterpreter$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestCodeInterpreter$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadAndRunRequestCodeInterpreter$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestCodeInterpreter$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequestCodeInterpreter$Outbound;
}

/** @internal */
export const CreateThreadAndRunRequestFileSearch$inboundSchema: z.ZodType<
  CreateThreadAndRunRequestFileSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
  });
});

/** @internal */
export type CreateThreadAndRunRequestFileSearch$Outbound = {
  vector_store_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateThreadAndRunRequestFileSearch$outboundSchema: z.ZodType<
  CreateThreadAndRunRequestFileSearch$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequestFileSearch
> = z.object({
  vectorStoreIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestFileSearch$ {
  /** @deprecated use `CreateThreadAndRunRequestFileSearch$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadAndRunRequestFileSearch$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestFileSearch$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadAndRunRequestFileSearch$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestFileSearch$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequestFileSearch$Outbound;
}

/** @internal */
export const CreateThreadAndRunRequestToolResources$inboundSchema: z.ZodType<
  CreateThreadAndRunRequestToolResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  code_interpreter: z.lazy(() =>
    CreateThreadAndRunRequestCodeInterpreter$inboundSchema
  ).optional(),
  file_search: z.lazy(() => CreateThreadAndRunRequestFileSearch$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "code_interpreter": "codeInterpreter",
    "file_search": "fileSearch",
  });
});

/** @internal */
export type CreateThreadAndRunRequestToolResources$Outbound = {
  code_interpreter?:
    | CreateThreadAndRunRequestCodeInterpreter$Outbound
    | undefined;
  file_search?: CreateThreadAndRunRequestFileSearch$Outbound | undefined;
};

/** @internal */
export const CreateThreadAndRunRequestToolResources$outboundSchema: z.ZodType<
  CreateThreadAndRunRequestToolResources$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequestToolResources
> = z.object({
  codeInterpreter: z.lazy(() =>
    CreateThreadAndRunRequestCodeInterpreter$outboundSchema
  ).optional(),
  fileSearch: z.lazy(() => CreateThreadAndRunRequestFileSearch$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    codeInterpreter: "code_interpreter",
    fileSearch: "file_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestToolResources$ {
  /** @deprecated use `CreateThreadAndRunRequestToolResources$inboundSchema` instead. */
  export const inboundSchema =
    CreateThreadAndRunRequestToolResources$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestToolResources$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadAndRunRequestToolResources$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestToolResources$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequestToolResources$Outbound;
}

/** @internal */
export const CreateThreadAndRunRequestMetadata$inboundSchema: z.ZodType<
  CreateThreadAndRunRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateThreadAndRunRequestMetadata$Outbound = {};

/** @internal */
export const CreateThreadAndRunRequestMetadata$outboundSchema: z.ZodType<
  CreateThreadAndRunRequestMetadata$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequestMetadata$ {
  /** @deprecated use `CreateThreadAndRunRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateThreadAndRunRequestMetadata$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreateThreadAndRunRequestMetadata$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequestMetadata$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequestMetadata$Outbound;
}

/** @internal */
export const CreateThreadAndRunRequest$inboundSchema: z.ZodType<
  CreateThreadAndRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  assistant_id: z.string(),
  thread: CreateThreadRequest$inboundSchema.optional(),
  model: z.nullable(
    z.union([z.string(), CreateThreadAndRunRequestModel2$inboundSchema]),
  ).optional(),
  instructions: z.nullable(z.string()).optional(),
  tools: z.nullable(
    z.array(
      z.union([
        AssistantToolsCode$inboundSchema,
        AssistantToolsFileSearch$inboundSchema,
        AssistantToolsFunction$inboundSchema,
      ]),
    ),
  ).optional(),
  tool_resources: z.nullable(
    z.lazy(() => CreateThreadAndRunRequestToolResources$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateThreadAndRunRequestMetadata$inboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  stream: z.nullable(z.boolean()).optional(),
  max_prompt_tokens: z.nullable(z.number().int()).optional(),
  max_completion_tokens: z.nullable(z.number().int()).optional(),
  truncation_strategy: TruncationObject$inboundSchema.optional(),
  tool_choice: AssistantsApiToolChoiceOption$inboundSchema.optional(),
  parallel_tool_calls: z.boolean().default(true),
  response_format: AssistantsApiResponseFormatOption$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "assistant_id": "assistantId",
    "tool_resources": "toolResources",
    "top_p": "topP",
    "max_prompt_tokens": "maxPromptTokens",
    "max_completion_tokens": "maxCompletionTokens",
    "truncation_strategy": "truncationStrategy",
    "tool_choice": "toolChoice",
    "parallel_tool_calls": "parallelToolCalls",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CreateThreadAndRunRequest$Outbound = {
  assistant_id: string;
  thread?: CreateThreadRequest$Outbound | undefined;
  model?: string | string | null | undefined;
  instructions?: string | null | undefined;
  tools?:
    | Array<
      | AssistantToolsCode$Outbound
      | AssistantToolsFileSearch$Outbound
      | AssistantToolsFunction$Outbound
    >
    | null
    | undefined;
  tool_resources?:
    | CreateThreadAndRunRequestToolResources$Outbound
    | null
    | undefined;
  metadata?: CreateThreadAndRunRequestMetadata$Outbound | null | undefined;
  temperature: number | null;
  top_p: number | null;
  stream?: boolean | null | undefined;
  max_prompt_tokens?: number | null | undefined;
  max_completion_tokens?: number | null | undefined;
  truncation_strategy?: TruncationObject$Outbound | undefined;
  tool_choice?: AssistantsApiToolChoiceOption$Outbound | undefined;
  parallel_tool_calls: boolean;
  response_format?: AssistantsApiResponseFormatOption$Outbound | undefined;
};

/** @internal */
export const CreateThreadAndRunRequest$outboundSchema: z.ZodType<
  CreateThreadAndRunRequest$Outbound,
  z.ZodTypeDef,
  CreateThreadAndRunRequest
> = z.object({
  assistantId: z.string(),
  thread: CreateThreadRequest$outboundSchema.optional(),
  model: z.nullable(
    z.union([z.string(), CreateThreadAndRunRequestModel2$outboundSchema]),
  ).optional(),
  instructions: z.nullable(z.string()).optional(),
  tools: z.nullable(
    z.array(
      z.union([
        AssistantToolsCode$outboundSchema,
        AssistantToolsFileSearch$outboundSchema,
        AssistantToolsFunction$outboundSchema,
      ]),
    ),
  ).optional(),
  toolResources: z.nullable(
    z.lazy(() => CreateThreadAndRunRequestToolResources$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateThreadAndRunRequestMetadata$outboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  stream: z.nullable(z.boolean()).optional(),
  maxPromptTokens: z.nullable(z.number().int()).optional(),
  maxCompletionTokens: z.nullable(z.number().int()).optional(),
  truncationStrategy: TruncationObject$outboundSchema.optional(),
  toolChoice: AssistantsApiToolChoiceOption$outboundSchema.optional(),
  parallelToolCalls: z.boolean().default(true),
  responseFormat: AssistantsApiResponseFormatOption$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    assistantId: "assistant_id",
    toolResources: "tool_resources",
    topP: "top_p",
    maxPromptTokens: "max_prompt_tokens",
    maxCompletionTokens: "max_completion_tokens",
    truncationStrategy: "truncation_strategy",
    toolChoice: "tool_choice",
    parallelToolCalls: "parallel_tool_calls",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateThreadAndRunRequest$ {
  /** @deprecated use `CreateThreadAndRunRequest$inboundSchema` instead. */
  export const inboundSchema = CreateThreadAndRunRequest$inboundSchema;
  /** @deprecated use `CreateThreadAndRunRequest$outboundSchema` instead. */
  export const outboundSchema = CreateThreadAndRunRequest$outboundSchema;
  /** @deprecated use `CreateThreadAndRunRequest$Outbound` instead. */
  export type Outbound = CreateThreadAndRunRequest$Outbound;
}
