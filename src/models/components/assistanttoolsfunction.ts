/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FunctionObject,
  FunctionObject$inboundSchema,
  FunctionObject$Outbound,
  FunctionObject$outboundSchema,
} from "./functionobject.js";

/**
 * The type of tool being defined: `function`
 */
export const AssistantToolsFunctionType = {
  Function: "function",
} as const;
/**
 * The type of tool being defined: `function`
 */
export type AssistantToolsFunctionType = ClosedEnum<
  typeof AssistantToolsFunctionType
>;

export type AssistantToolsFunction = {
  /**
   * The type of tool being defined: `function`
   */
  type: AssistantToolsFunctionType;
  function: FunctionObject;
};

/** @internal */
export const AssistantToolsFunctionType$inboundSchema: z.ZodNativeEnum<
  typeof AssistantToolsFunctionType
> = z.nativeEnum(AssistantToolsFunctionType);

/** @internal */
export const AssistantToolsFunctionType$outboundSchema: z.ZodNativeEnum<
  typeof AssistantToolsFunctionType
> = AssistantToolsFunctionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantToolsFunctionType$ {
  /** @deprecated use `AssistantToolsFunctionType$inboundSchema` instead. */
  export const inboundSchema = AssistantToolsFunctionType$inboundSchema;
  /** @deprecated use `AssistantToolsFunctionType$outboundSchema` instead. */
  export const outboundSchema = AssistantToolsFunctionType$outboundSchema;
}

/** @internal */
export const AssistantToolsFunction$inboundSchema: z.ZodType<
  AssistantToolsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AssistantToolsFunctionType$inboundSchema,
  function: FunctionObject$inboundSchema,
});

/** @internal */
export type AssistantToolsFunction$Outbound = {
  type: string;
  function: FunctionObject$Outbound;
};

/** @internal */
export const AssistantToolsFunction$outboundSchema: z.ZodType<
  AssistantToolsFunction$Outbound,
  z.ZodTypeDef,
  AssistantToolsFunction
> = z.object({
  type: AssistantToolsFunctionType$outboundSchema,
  function: FunctionObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantToolsFunction$ {
  /** @deprecated use `AssistantToolsFunction$inboundSchema` instead. */
  export const inboundSchema = AssistantToolsFunction$inboundSchema;
  /** @deprecated use `AssistantToolsFunction$outboundSchema` instead. */
  export const outboundSchema = AssistantToolsFunction$outboundSchema;
  /** @deprecated use `AssistantToolsFunction$Outbound` instead. */
  export type Outbound = AssistantToolsFunction$Outbound;
}

export function assistantToolsFunctionToJSON(
  assistantToolsFunction: AssistantToolsFunction,
): string {
  return JSON.stringify(
    AssistantToolsFunction$outboundSchema.parse(assistantToolsFunction),
  );
}

export function assistantToolsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<AssistantToolsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssistantToolsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssistantToolsFunction' from JSON`,
  );
}
