/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteModelResponse = {
  id: string;
  deleted: boolean;
  object: string;
};

/** @internal */
export const DeleteModelResponse$inboundSchema: z.ZodType<
  DeleteModelResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  deleted: z.boolean(),
  object: z.string(),
});

/** @internal */
export type DeleteModelResponse$Outbound = {
  id: string;
  deleted: boolean;
  object: string;
};

/** @internal */
export const DeleteModelResponse$outboundSchema: z.ZodType<
  DeleteModelResponse$Outbound,
  z.ZodTypeDef,
  DeleteModelResponse
> = z.object({
  id: z.string(),
  deleted: z.boolean(),
  object: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteModelResponse$ {
  /** @deprecated use `DeleteModelResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteModelResponse$inboundSchema;
  /** @deprecated use `DeleteModelResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteModelResponse$outboundSchema;
  /** @deprecated use `DeleteModelResponse$Outbound` instead. */
  export type Outbound = DeleteModelResponse$Outbound;
}

export function deleteModelResponseToJSON(
  deleteModelResponse: DeleteModelResponse,
): string {
  return JSON.stringify(
    DeleteModelResponse$outboundSchema.parse(deleteModelResponse),
  );
}

export function deleteModelResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteModelResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteModelResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteModelResponse' from JSON`,
  );
}
