/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Always `image_file`.
 */
export const MessageContentImageFileObjectType = {
  ImageFile: "image_file",
} as const;
/**
 * Always `image_file`.
 */
export type MessageContentImageFileObjectType = ClosedEnum<
  typeof MessageContentImageFileObjectType
>;

/**
 * Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
 */
export const MessageContentImageFileObjectDetail = {
  Auto: "auto",
  Low: "low",
  High: "high",
} as const;
/**
 * Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
 */
export type MessageContentImageFileObjectDetail = ClosedEnum<
  typeof MessageContentImageFileObjectDetail
>;

export type ImageFile = {
  /**
   * The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
   */
  fileId: string;
  /**
   * Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
   */
  detail?: MessageContentImageFileObjectDetail | undefined;
};

/**
 * References an image [File](/docs/api-reference/files) in the content of a message.
 */
export type MessageContentImageFileObject = {
  /**
   * Always `image_file`.
   */
  type: MessageContentImageFileObjectType;
  imageFile: ImageFile;
};

/** @internal */
export const MessageContentImageFileObjectType$inboundSchema: z.ZodNativeEnum<
  typeof MessageContentImageFileObjectType
> = z.nativeEnum(MessageContentImageFileObjectType);

/** @internal */
export const MessageContentImageFileObjectType$outboundSchema: z.ZodNativeEnum<
  typeof MessageContentImageFileObjectType
> = MessageContentImageFileObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentImageFileObjectType$ {
  /** @deprecated use `MessageContentImageFileObjectType$inboundSchema` instead. */
  export const inboundSchema = MessageContentImageFileObjectType$inboundSchema;
  /** @deprecated use `MessageContentImageFileObjectType$outboundSchema` instead. */
  export const outboundSchema =
    MessageContentImageFileObjectType$outboundSchema;
}

/** @internal */
export const MessageContentImageFileObjectDetail$inboundSchema: z.ZodNativeEnum<
  typeof MessageContentImageFileObjectDetail
> = z.nativeEnum(MessageContentImageFileObjectDetail);

/** @internal */
export const MessageContentImageFileObjectDetail$outboundSchema:
  z.ZodNativeEnum<typeof MessageContentImageFileObjectDetail> =
    MessageContentImageFileObjectDetail$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentImageFileObjectDetail$ {
  /** @deprecated use `MessageContentImageFileObjectDetail$inboundSchema` instead. */
  export const inboundSchema =
    MessageContentImageFileObjectDetail$inboundSchema;
  /** @deprecated use `MessageContentImageFileObjectDetail$outboundSchema` instead. */
  export const outboundSchema =
    MessageContentImageFileObjectDetail$outboundSchema;
}

/** @internal */
export const ImageFile$inboundSchema: z.ZodType<
  ImageFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string(),
  detail: MessageContentImageFileObjectDetail$inboundSchema.default("auto"),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type ImageFile$Outbound = {
  file_id: string;
  detail: string;
};

/** @internal */
export const ImageFile$outboundSchema: z.ZodType<
  ImageFile$Outbound,
  z.ZodTypeDef,
  ImageFile
> = z.object({
  fileId: z.string(),
  detail: MessageContentImageFileObjectDetail$outboundSchema.default("auto"),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageFile$ {
  /** @deprecated use `ImageFile$inboundSchema` instead. */
  export const inboundSchema = ImageFile$inboundSchema;
  /** @deprecated use `ImageFile$outboundSchema` instead. */
  export const outboundSchema = ImageFile$outboundSchema;
  /** @deprecated use `ImageFile$Outbound` instead. */
  export type Outbound = ImageFile$Outbound;
}

/** @internal */
export const MessageContentImageFileObject$inboundSchema: z.ZodType<
  MessageContentImageFileObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: MessageContentImageFileObjectType$inboundSchema,
  image_file: z.lazy(() => ImageFile$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_file": "imageFile",
  });
});

/** @internal */
export type MessageContentImageFileObject$Outbound = {
  type: string;
  image_file: ImageFile$Outbound;
};

/** @internal */
export const MessageContentImageFileObject$outboundSchema: z.ZodType<
  MessageContentImageFileObject$Outbound,
  z.ZodTypeDef,
  MessageContentImageFileObject
> = z.object({
  type: MessageContentImageFileObjectType$outboundSchema,
  imageFile: z.lazy(() => ImageFile$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageFile: "image_file",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentImageFileObject$ {
  /** @deprecated use `MessageContentImageFileObject$inboundSchema` instead. */
  export const inboundSchema = MessageContentImageFileObject$inboundSchema;
  /** @deprecated use `MessageContentImageFileObject$outboundSchema` instead. */
  export const outboundSchema = MessageContentImageFileObject$outboundSchema;
  /** @deprecated use `MessageContentImageFileObject$Outbound` instead. */
  export type Outbound = MessageContentImageFileObject$Outbound;
}
