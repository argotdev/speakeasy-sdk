/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of the integration being enabled for the fine-tuning job
 */
export const FineTuningIntegrationType = {
  Wandb: "wandb",
} as const;
/**
 * The type of the integration being enabled for the fine-tuning job
 */
export type FineTuningIntegrationType = ClosedEnum<
  typeof FineTuningIntegrationType
>;

/**
 * The settings for your integration with Weights and Biases. This payload specifies the project that
 *
 * @remarks
 * metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
 * to your run, and set a default entity (team, username, etc) to be associated with your run.
 */
export type Wandb = {
  /**
   * The name of the project that the new run will be created under.
   *
   * @remarks
   */
  project: string;
  /**
   * A display name to set for the run. If not set, we will use the Job ID as the name.
   *
   * @remarks
   */
  name?: string | null | undefined;
  /**
   * The entity to use for the run. This allows you to set the team or username of the WandB user that you would
   *
   * @remarks
   * like associated with the run. If not set, the default entity for the registered WandB API key is used.
   */
  entity?: string | null | undefined;
  /**
   * A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
   *
   * @remarks
   * default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
   */
  tags?: Array<string> | undefined;
};

export type FineTuningIntegration = {
  /**
   * The type of the integration being enabled for the fine-tuning job
   */
  type: FineTuningIntegrationType;
  /**
   * The settings for your integration with Weights and Biases. This payload specifies the project that
   *
   * @remarks
   * metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
   * to your run, and set a default entity (team, username, etc) to be associated with your run.
   */
  wandb: Wandb;
};

/** @internal */
export const FineTuningIntegrationType$inboundSchema: z.ZodNativeEnum<
  typeof FineTuningIntegrationType
> = z.nativeEnum(FineTuningIntegrationType);

/** @internal */
export const FineTuningIntegrationType$outboundSchema: z.ZodNativeEnum<
  typeof FineTuningIntegrationType
> = FineTuningIntegrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningIntegrationType$ {
  /** @deprecated use `FineTuningIntegrationType$inboundSchema` instead. */
  export const inboundSchema = FineTuningIntegrationType$inboundSchema;
  /** @deprecated use `FineTuningIntegrationType$outboundSchema` instead. */
  export const outboundSchema = FineTuningIntegrationType$outboundSchema;
}

/** @internal */
export const Wandb$inboundSchema: z.ZodType<Wandb, z.ZodTypeDef, unknown> = z
  .object({
    project: z.string(),
    name: z.nullable(z.string()).optional(),
    entity: z.nullable(z.string()).optional(),
    tags: z.array(z.string()).optional(),
  });

/** @internal */
export type Wandb$Outbound = {
  project: string;
  name?: string | null | undefined;
  entity?: string | null | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const Wandb$outboundSchema: z.ZodType<
  Wandb$Outbound,
  z.ZodTypeDef,
  Wandb
> = z.object({
  project: z.string(),
  name: z.nullable(z.string()).optional(),
  entity: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Wandb$ {
  /** @deprecated use `Wandb$inboundSchema` instead. */
  export const inboundSchema = Wandb$inboundSchema;
  /** @deprecated use `Wandb$outboundSchema` instead. */
  export const outboundSchema = Wandb$outboundSchema;
  /** @deprecated use `Wandb$Outbound` instead. */
  export type Outbound = Wandb$Outbound;
}

export function wandbToJSON(wandb: Wandb): string {
  return JSON.stringify(Wandb$outboundSchema.parse(wandb));
}

export function wandbFromJSON(
  jsonString: string,
): SafeParseResult<Wandb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Wandb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Wandb' from JSON`,
  );
}

/** @internal */
export const FineTuningIntegration$inboundSchema: z.ZodType<
  FineTuningIntegration,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FineTuningIntegrationType$inboundSchema,
  wandb: z.lazy(() => Wandb$inboundSchema),
});

/** @internal */
export type FineTuningIntegration$Outbound = {
  type: string;
  wandb: Wandb$Outbound;
};

/** @internal */
export const FineTuningIntegration$outboundSchema: z.ZodType<
  FineTuningIntegration$Outbound,
  z.ZodTypeDef,
  FineTuningIntegration
> = z.object({
  type: FineTuningIntegrationType$outboundSchema,
  wandb: z.lazy(() => Wandb$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningIntegration$ {
  /** @deprecated use `FineTuningIntegration$inboundSchema` instead. */
  export const inboundSchema = FineTuningIntegration$inboundSchema;
  /** @deprecated use `FineTuningIntegration$outboundSchema` instead. */
  export const outboundSchema = FineTuningIntegration$outboundSchema;
  /** @deprecated use `FineTuningIntegration$Outbound` instead. */
  export type Outbound = FineTuningIntegration$Outbound;
}

export function fineTuningIntegrationToJSON(
  fineTuningIntegration: FineTuningIntegration,
): string {
  return JSON.stringify(
    FineTuningIntegration$outboundSchema.parse(fineTuningIntegration),
  );
}

export function fineTuningIntegrationFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningIntegration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningIntegration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningIntegration' from JSON`,
  );
}
