/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Metrics at the step number during the fine-tuning job.
 */
export type Metrics = {
  step?: number | undefined;
  trainLoss?: number | undefined;
  trainMeanTokenAccuracy?: number | undefined;
  validLoss?: number | undefined;
  validMeanTokenAccuracy?: number | undefined;
  fullValidLoss?: number | undefined;
  fullValidMeanTokenAccuracy?: number | undefined;
};

/**
 * The object type, which is always "fine_tuning.job.checkpoint".
 */
export const FineTuningJobCheckpointObject = {
  FineTuningJobCheckpoint: "fine_tuning.job.checkpoint",
} as const;
/**
 * The object type, which is always "fine_tuning.job.checkpoint".
 */
export type FineTuningJobCheckpointObject = ClosedEnum<
  typeof FineTuningJobCheckpointObject
>;

/**
 * The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.
 *
 * @remarks
 */
export type FineTuningJobCheckpoint = {
  /**
   * The checkpoint identifier, which can be referenced in the API endpoints.
   */
  id: string;
  /**
   * The Unix timestamp (in seconds) for when the checkpoint was created.
   */
  createdAt: number;
  /**
   * The name of the fine-tuned checkpoint model that is created.
   */
  fineTunedModelCheckpoint: string;
  /**
   * The step number that the checkpoint was created at.
   */
  stepNumber: number;
  /**
   * Metrics at the step number during the fine-tuning job.
   */
  metrics: Metrics;
  /**
   * The name of the fine-tuning job that this checkpoint was created from.
   */
  fineTuningJobId: string;
  /**
   * The object type, which is always "fine_tuning.job.checkpoint".
   */
  object: FineTuningJobCheckpointObject;
};

/** @internal */
export const Metrics$inboundSchema: z.ZodType<Metrics, z.ZodTypeDef, unknown> =
  z.object({
    step: z.number().optional(),
    train_loss: z.number().optional(),
    train_mean_token_accuracy: z.number().optional(),
    valid_loss: z.number().optional(),
    valid_mean_token_accuracy: z.number().optional(),
    full_valid_loss: z.number().optional(),
    full_valid_mean_token_accuracy: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "train_loss": "trainLoss",
      "train_mean_token_accuracy": "trainMeanTokenAccuracy",
      "valid_loss": "validLoss",
      "valid_mean_token_accuracy": "validMeanTokenAccuracy",
      "full_valid_loss": "fullValidLoss",
      "full_valid_mean_token_accuracy": "fullValidMeanTokenAccuracy",
    });
  });

/** @internal */
export type Metrics$Outbound = {
  step?: number | undefined;
  train_loss?: number | undefined;
  train_mean_token_accuracy?: number | undefined;
  valid_loss?: number | undefined;
  valid_mean_token_accuracy?: number | undefined;
  full_valid_loss?: number | undefined;
  full_valid_mean_token_accuracy?: number | undefined;
};

/** @internal */
export const Metrics$outboundSchema: z.ZodType<
  Metrics$Outbound,
  z.ZodTypeDef,
  Metrics
> = z.object({
  step: z.number().optional(),
  trainLoss: z.number().optional(),
  trainMeanTokenAccuracy: z.number().optional(),
  validLoss: z.number().optional(),
  validMeanTokenAccuracy: z.number().optional(),
  fullValidLoss: z.number().optional(),
  fullValidMeanTokenAccuracy: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    trainLoss: "train_loss",
    trainMeanTokenAccuracy: "train_mean_token_accuracy",
    validLoss: "valid_loss",
    validMeanTokenAccuracy: "valid_mean_token_accuracy",
    fullValidLoss: "full_valid_loss",
    fullValidMeanTokenAccuracy: "full_valid_mean_token_accuracy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metrics$ {
  /** @deprecated use `Metrics$inboundSchema` instead. */
  export const inboundSchema = Metrics$inboundSchema;
  /** @deprecated use `Metrics$outboundSchema` instead. */
  export const outboundSchema = Metrics$outboundSchema;
  /** @deprecated use `Metrics$Outbound` instead. */
  export type Outbound = Metrics$Outbound;
}

export function metricsToJSON(metrics: Metrics): string {
  return JSON.stringify(Metrics$outboundSchema.parse(metrics));
}

export function metricsFromJSON(
  jsonString: string,
): SafeParseResult<Metrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metrics' from JSON`,
  );
}

/** @internal */
export const FineTuningJobCheckpointObject$inboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobCheckpointObject
> = z.nativeEnum(FineTuningJobCheckpointObject);

/** @internal */
export const FineTuningJobCheckpointObject$outboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobCheckpointObject
> = FineTuningJobCheckpointObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobCheckpointObject$ {
  /** @deprecated use `FineTuningJobCheckpointObject$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobCheckpointObject$inboundSchema;
  /** @deprecated use `FineTuningJobCheckpointObject$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobCheckpointObject$outboundSchema;
}

/** @internal */
export const FineTuningJobCheckpoint$inboundSchema: z.ZodType<
  FineTuningJobCheckpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.number().int(),
  fine_tuned_model_checkpoint: z.string(),
  step_number: z.number().int(),
  metrics: z.lazy(() => Metrics$inboundSchema),
  fine_tuning_job_id: z.string(),
  object: FineTuningJobCheckpointObject$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "fine_tuned_model_checkpoint": "fineTunedModelCheckpoint",
    "step_number": "stepNumber",
    "fine_tuning_job_id": "fineTuningJobId",
  });
});

/** @internal */
export type FineTuningJobCheckpoint$Outbound = {
  id: string;
  created_at: number;
  fine_tuned_model_checkpoint: string;
  step_number: number;
  metrics: Metrics$Outbound;
  fine_tuning_job_id: string;
  object: string;
};

/** @internal */
export const FineTuningJobCheckpoint$outboundSchema: z.ZodType<
  FineTuningJobCheckpoint$Outbound,
  z.ZodTypeDef,
  FineTuningJobCheckpoint
> = z.object({
  id: z.string(),
  createdAt: z.number().int(),
  fineTunedModelCheckpoint: z.string(),
  stepNumber: z.number().int(),
  metrics: z.lazy(() => Metrics$outboundSchema),
  fineTuningJobId: z.string(),
  object: FineTuningJobCheckpointObject$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    fineTunedModelCheckpoint: "fine_tuned_model_checkpoint",
    stepNumber: "step_number",
    fineTuningJobId: "fine_tuning_job_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobCheckpoint$ {
  /** @deprecated use `FineTuningJobCheckpoint$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobCheckpoint$inboundSchema;
  /** @deprecated use `FineTuningJobCheckpoint$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobCheckpoint$outboundSchema;
  /** @deprecated use `FineTuningJobCheckpoint$Outbound` instead. */
  export type Outbound = FineTuningJobCheckpoint$Outbound;
}

export function fineTuningJobCheckpointToJSON(
  fineTuningJobCheckpoint: FineTuningJobCheckpoint,
): string {
  return JSON.stringify(
    FineTuningJobCheckpoint$outboundSchema.parse(fineTuningJobCheckpoint),
  );
}

export function fineTuningJobCheckpointFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJobCheckpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJobCheckpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJobCheckpoint' from JSON`,
  );
}
