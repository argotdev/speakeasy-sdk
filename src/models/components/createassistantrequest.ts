/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AssistantsApiResponseFormatOption,
  AssistantsApiResponseFormatOption$inboundSchema,
  AssistantsApiResponseFormatOption$Outbound,
  AssistantsApiResponseFormatOption$outboundSchema,
} from "./assistantsapiresponseformatoption.js";
import {
  AssistantToolsCode,
  AssistantToolsCode$inboundSchema,
  AssistantToolsCode$Outbound,
  AssistantToolsCode$outboundSchema,
} from "./assistanttoolscode.js";
import {
  AssistantToolsFileSearch,
  AssistantToolsFileSearch$inboundSchema,
  AssistantToolsFileSearch$Outbound,
  AssistantToolsFileSearch$outboundSchema,
} from "./assistanttoolsfilesearch.js";
import {
  AssistantToolsFunction,
  AssistantToolsFunction$inboundSchema,
  AssistantToolsFunction$Outbound,
  AssistantToolsFunction$outboundSchema,
} from "./assistanttoolsfunction.js";

export const CreateAssistantRequestModel2 = {
  Gpt4o: "gpt-4o",
  Gpt4o20240806: "gpt-4o-2024-08-06",
  Gpt4o20240513: "gpt-4o-2024-05-13",
  Gpt4oMini: "gpt-4o-mini",
  Gpt4oMini20240718: "gpt-4o-mini-2024-07-18",
  Gpt4Turbo: "gpt-4-turbo",
  Gpt4Turbo20240409: "gpt-4-turbo-2024-04-09",
  Gpt40125Preview: "gpt-4-0125-preview",
  Gpt4TurboPreview: "gpt-4-turbo-preview",
  Gpt41106Preview: "gpt-4-1106-preview",
  Gpt4VisionPreview: "gpt-4-vision-preview",
  Gpt4: "gpt-4",
  Gpt40314: "gpt-4-0314",
  Gpt40613: "gpt-4-0613",
  Gpt432k: "gpt-4-32k",
  Gpt432k0314: "gpt-4-32k-0314",
  Gpt432k0613: "gpt-4-32k-0613",
  Gpt35Turbo: "gpt-3.5-turbo",
  Gpt35Turbo16k: "gpt-3.5-turbo-16k",
  Gpt35Turbo0613: "gpt-3.5-turbo-0613",
  Gpt35Turbo1106: "gpt-3.5-turbo-1106",
  Gpt35Turbo0125: "gpt-3.5-turbo-0125",
  Gpt35Turbo16k0613: "gpt-3.5-turbo-16k-0613",
} as const;
export type CreateAssistantRequestModel2 = ClosedEnum<
  typeof CreateAssistantRequestModel2
>;

/**
 * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
 *
 * @remarks
 */
export type CreateAssistantRequestModel = string | CreateAssistantRequestModel2;

export type CreateAssistantRequestTools =
  | AssistantToolsCode
  | AssistantToolsFileSearch
  | AssistantToolsFunction;

export type CreateAssistantRequestCodeInterpreter = {
  /**
   * A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
};

/**
 * Always `static`.
 */
export const CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType =
  {
    Static: "static",
  } as const;
/**
 * Always `static`.
 */
export type CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType =
  ClosedEnum<
    typeof CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType
  >;

export type ChunkingStrategyStatic = {
  /**
   * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
   */
  maxChunkSizeTokens: number;
  /**
   * The number of tokens that overlap between chunks. The default value is `400`.
   *
   * @remarks
   *
   * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
   */
  chunkOverlapTokens: number;
};

export type ChunkingStrategyStaticChunkingStrategy = {
  /**
   * Always `static`.
   */
  type: CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType;
  static: ChunkingStrategyStatic;
};

/**
 * Always `auto`.
 */
export const CreateAssistantRequestChunkingStrategyToolResourcesType = {
  Auto: "auto",
} as const;
/**
 * Always `auto`.
 */
export type CreateAssistantRequestChunkingStrategyToolResourcesType =
  ClosedEnum<typeof CreateAssistantRequestChunkingStrategyToolResourcesType>;

/**
 * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
 */
export type ChunkingStrategyAutoChunkingStrategy = {
  /**
   * Always `auto`.
   */
  type: CreateAssistantRequestChunkingStrategyToolResourcesType;
};

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
 */
export type FileSearchChunkingStrategy =
  | ChunkingStrategyAutoChunkingStrategy
  | ChunkingStrategyStaticChunkingStrategy;

/**
 * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateAssistantRequestFileSearchMetadata = {};

export type FileSearchVectorStores = {
  /**
   * A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
  /**
   * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
   */
  chunkingStrategy?:
    | ChunkingStrategyAutoChunkingStrategy
    | ChunkingStrategyStaticChunkingStrategy
    | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateAssistantRequestFileSearchMetadata | undefined;
};

export type FileSearch2 = {
  /**
   * The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
   *
   * @remarks
   */
  vectorStoreIds?: Array<string> | undefined;
  /**
   * A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.
   *
   * @remarks
   */
  vectorStores: Array<FileSearchVectorStores>;
};

/**
 * Always `static`.
 */
export const CreateAssistantRequestChunkingStrategyType = {
  Static: "static",
} as const;
/**
 * Always `static`.
 */
export type CreateAssistantRequestChunkingStrategyType = ClosedEnum<
  typeof CreateAssistantRequestChunkingStrategyType
>;

export type Static = {
  /**
   * The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
   */
  maxChunkSizeTokens: number;
  /**
   * The number of tokens that overlap between chunks. The default value is `400`.
   *
   * @remarks
   *
   * Note that the overlap must not exceed half of `max_chunk_size_tokens`.
   */
  chunkOverlapTokens: number;
};

export type CreateAssistantRequestChunkingStrategyStaticChunkingStrategy = {
  /**
   * Always `static`.
   */
  type: CreateAssistantRequestChunkingStrategyType;
  static: Static;
};

/**
 * Always `auto`.
 */
export const ChunkingStrategyType = {
  Auto: "auto",
} as const;
/**
 * Always `auto`.
 */
export type ChunkingStrategyType = ClosedEnum<typeof ChunkingStrategyType>;

/**
 * The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
 */
export type AutoChunkingStrategy = {
  /**
   * Always `auto`.
   */
  type: ChunkingStrategyType;
};

/**
 * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
 */
export type CreateAssistantRequestFileSearchChunkingStrategy =
  | AutoChunkingStrategy
  | CreateAssistantRequestChunkingStrategyStaticChunkingStrategy;

/**
 * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type FileSearchMetadata = {};

export type VectorStores = {
  /**
   * A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.
   *
   * @remarks
   */
  fileIds?: Array<string> | undefined;
  /**
   * The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
   */
  chunkingStrategy?:
    | AutoChunkingStrategy
    | CreateAssistantRequestChunkingStrategyStaticChunkingStrategy
    | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: FileSearchMetadata | undefined;
};

export type FileSearch1 = {
  /**
   * The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.
   *
   * @remarks
   */
  vectorStoreIds: Array<string>;
  /**
   * A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.
   *
   * @remarks
   */
  vectorStores?: Array<VectorStores> | undefined;
};

export type CreateAssistantRequestFileSearch = FileSearch1 | FileSearch2;

/**
 * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
 *
 * @remarks
 */
export type CreateAssistantRequestToolResources = {
  codeInterpreter?: CreateAssistantRequestCodeInterpreter | undefined;
  fileSearch?: FileSearch1 | FileSearch2 | undefined;
};

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type CreateAssistantRequestMetadata = {};

export type CreateAssistantRequest = {
  /**
   * ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
   *
   * @remarks
   */
  model: string | CreateAssistantRequestModel2;
  /**
   * The name of the assistant. The maximum length is 256 characters.
   *
   * @remarks
   */
  name?: string | null | undefined;
  /**
   * The description of the assistant. The maximum length is 512 characters.
   *
   * @remarks
   */
  description?: string | null | undefined;
  /**
   * The system instructions that the assistant uses. The maximum length is 256,000 characters.
   *
   * @remarks
   */
  instructions?: string | null | undefined;
  /**
   * A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.
   *
   * @remarks
   */
  tools?:
    | Array<
      AssistantToolsCode | AssistantToolsFileSearch | AssistantToolsFunction
    >
    | undefined;
  /**
   * A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.
   *
   * @remarks
   */
  toolResources?: CreateAssistantRequestToolResources | null | undefined;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata?: CreateAssistantRequestMetadata | null | undefined;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   *
   * @remarks
   */
  temperature?: number | null | undefined;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   *
   * @remarks
   *
   * We generally recommend altering this or temperature but not both.
   */
  topP?: number | null | undefined;
  /**
   * Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4 Turbo](/docs/models/gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.
   *
   * @remarks
   *
   * Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).
   *
   * Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
   */
  responseFormat?: AssistantsApiResponseFormatOption | undefined;
};

/** @internal */
export const CreateAssistantRequestModel2$inboundSchema: z.ZodNativeEnum<
  typeof CreateAssistantRequestModel2
> = z.nativeEnum(CreateAssistantRequestModel2);

/** @internal */
export const CreateAssistantRequestModel2$outboundSchema: z.ZodNativeEnum<
  typeof CreateAssistantRequestModel2
> = CreateAssistantRequestModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestModel2$ {
  /** @deprecated use `CreateAssistantRequestModel2$inboundSchema` instead. */
  export const inboundSchema = CreateAssistantRequestModel2$inboundSchema;
  /** @deprecated use `CreateAssistantRequestModel2$outboundSchema` instead. */
  export const outboundSchema = CreateAssistantRequestModel2$outboundSchema;
}

/** @internal */
export const CreateAssistantRequestModel$inboundSchema: z.ZodType<
  CreateAssistantRequestModel,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateAssistantRequestModel2$inboundSchema]);

/** @internal */
export type CreateAssistantRequestModel$Outbound = string | string;

/** @internal */
export const CreateAssistantRequestModel$outboundSchema: z.ZodType<
  CreateAssistantRequestModel$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestModel
> = z.union([z.string(), CreateAssistantRequestModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestModel$ {
  /** @deprecated use `CreateAssistantRequestModel$inboundSchema` instead. */
  export const inboundSchema = CreateAssistantRequestModel$inboundSchema;
  /** @deprecated use `CreateAssistantRequestModel$outboundSchema` instead. */
  export const outboundSchema = CreateAssistantRequestModel$outboundSchema;
  /** @deprecated use `CreateAssistantRequestModel$Outbound` instead. */
  export type Outbound = CreateAssistantRequestModel$Outbound;
}

/** @internal */
export const CreateAssistantRequestTools$inboundSchema: z.ZodType<
  CreateAssistantRequestTools,
  z.ZodTypeDef,
  unknown
> = z.union([
  AssistantToolsCode$inboundSchema,
  AssistantToolsFileSearch$inboundSchema,
  AssistantToolsFunction$inboundSchema,
]);

/** @internal */
export type CreateAssistantRequestTools$Outbound =
  | AssistantToolsCode$Outbound
  | AssistantToolsFileSearch$Outbound
  | AssistantToolsFunction$Outbound;

/** @internal */
export const CreateAssistantRequestTools$outboundSchema: z.ZodType<
  CreateAssistantRequestTools$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestTools
> = z.union([
  AssistantToolsCode$outboundSchema,
  AssistantToolsFileSearch$outboundSchema,
  AssistantToolsFunction$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestTools$ {
  /** @deprecated use `CreateAssistantRequestTools$inboundSchema` instead. */
  export const inboundSchema = CreateAssistantRequestTools$inboundSchema;
  /** @deprecated use `CreateAssistantRequestTools$outboundSchema` instead. */
  export const outboundSchema = CreateAssistantRequestTools$outboundSchema;
  /** @deprecated use `CreateAssistantRequestTools$Outbound` instead. */
  export type Outbound = CreateAssistantRequestTools$Outbound;
}

/** @internal */
export const CreateAssistantRequestCodeInterpreter$inboundSchema: z.ZodType<
  CreateAssistantRequestCodeInterpreter,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
  });
});

/** @internal */
export type CreateAssistantRequestCodeInterpreter$Outbound = {
  file_ids?: Array<string> | undefined;
};

/** @internal */
export const CreateAssistantRequestCodeInterpreter$outboundSchema: z.ZodType<
  CreateAssistantRequestCodeInterpreter$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestCodeInterpreter
> = z.object({
  fileIds: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestCodeInterpreter$ {
  /** @deprecated use `CreateAssistantRequestCodeInterpreter$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestCodeInterpreter$inboundSchema;
  /** @deprecated use `CreateAssistantRequestCodeInterpreter$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestCodeInterpreter$outboundSchema;
  /** @deprecated use `CreateAssistantRequestCodeInterpreter$Outbound` instead. */
  export type Outbound = CreateAssistantRequestCodeInterpreter$Outbound;
}

/** @internal */
export const CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType
  > = z.nativeEnum(
    CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType,
  );

/** @internal */
export const CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType
  > =
    CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$ {
  /** @deprecated use `CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema;
  /** @deprecated use `CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema;
}

/** @internal */
export const ChunkingStrategyStatic$inboundSchema: z.ZodType<
  ChunkingStrategyStatic,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_chunk_size_tokens: z.number().int(),
  chunk_overlap_tokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "max_chunk_size_tokens": "maxChunkSizeTokens",
    "chunk_overlap_tokens": "chunkOverlapTokens",
  });
});

/** @internal */
export type ChunkingStrategyStatic$Outbound = {
  max_chunk_size_tokens: number;
  chunk_overlap_tokens: number;
};

/** @internal */
export const ChunkingStrategyStatic$outboundSchema: z.ZodType<
  ChunkingStrategyStatic$Outbound,
  z.ZodTypeDef,
  ChunkingStrategyStatic
> = z.object({
  maxChunkSizeTokens: z.number().int(),
  chunkOverlapTokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    maxChunkSizeTokens: "max_chunk_size_tokens",
    chunkOverlapTokens: "chunk_overlap_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChunkingStrategyStatic$ {
  /** @deprecated use `ChunkingStrategyStatic$inboundSchema` instead. */
  export const inboundSchema = ChunkingStrategyStatic$inboundSchema;
  /** @deprecated use `ChunkingStrategyStatic$outboundSchema` instead. */
  export const outboundSchema = ChunkingStrategyStatic$outboundSchema;
  /** @deprecated use `ChunkingStrategyStatic$Outbound` instead. */
  export type Outbound = ChunkingStrategyStatic$Outbound;
}

/** @internal */
export const ChunkingStrategyStaticChunkingStrategy$inboundSchema: z.ZodType<
  ChunkingStrategyStaticChunkingStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$inboundSchema,
  static: z.lazy(() => ChunkingStrategyStatic$inboundSchema),
});

/** @internal */
export type ChunkingStrategyStaticChunkingStrategy$Outbound = {
  type: string;
  static: ChunkingStrategyStatic$Outbound;
};

/** @internal */
export const ChunkingStrategyStaticChunkingStrategy$outboundSchema: z.ZodType<
  ChunkingStrategyStaticChunkingStrategy$Outbound,
  z.ZodTypeDef,
  ChunkingStrategyStaticChunkingStrategy
> = z.object({
  type:
    CreateAssistantRequestChunkingStrategyToolResourcesFileSearchType$outboundSchema,
  static: z.lazy(() => ChunkingStrategyStatic$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChunkingStrategyStaticChunkingStrategy$ {
  /** @deprecated use `ChunkingStrategyStaticChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    ChunkingStrategyStaticChunkingStrategy$inboundSchema;
  /** @deprecated use `ChunkingStrategyStaticChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    ChunkingStrategyStaticChunkingStrategy$outboundSchema;
  /** @deprecated use `ChunkingStrategyStaticChunkingStrategy$Outbound` instead. */
  export type Outbound = ChunkingStrategyStaticChunkingStrategy$Outbound;
}

/** @internal */
export const CreateAssistantRequestChunkingStrategyToolResourcesType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateAssistantRequestChunkingStrategyToolResourcesType
  > = z.nativeEnum(CreateAssistantRequestChunkingStrategyToolResourcesType);

/** @internal */
export const CreateAssistantRequestChunkingStrategyToolResourcesType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateAssistantRequestChunkingStrategyToolResourcesType
  > = CreateAssistantRequestChunkingStrategyToolResourcesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestChunkingStrategyToolResourcesType$ {
  /** @deprecated use `CreateAssistantRequestChunkingStrategyToolResourcesType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestChunkingStrategyToolResourcesType$inboundSchema;
  /** @deprecated use `CreateAssistantRequestChunkingStrategyToolResourcesType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestChunkingStrategyToolResourcesType$outboundSchema;
}

/** @internal */
export const ChunkingStrategyAutoChunkingStrategy$inboundSchema: z.ZodType<
  ChunkingStrategyAutoChunkingStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateAssistantRequestChunkingStrategyToolResourcesType$inboundSchema,
});

/** @internal */
export type ChunkingStrategyAutoChunkingStrategy$Outbound = {
  type: string;
};

/** @internal */
export const ChunkingStrategyAutoChunkingStrategy$outboundSchema: z.ZodType<
  ChunkingStrategyAutoChunkingStrategy$Outbound,
  z.ZodTypeDef,
  ChunkingStrategyAutoChunkingStrategy
> = z.object({
  type: CreateAssistantRequestChunkingStrategyToolResourcesType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChunkingStrategyAutoChunkingStrategy$ {
  /** @deprecated use `ChunkingStrategyAutoChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    ChunkingStrategyAutoChunkingStrategy$inboundSchema;
  /** @deprecated use `ChunkingStrategyAutoChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    ChunkingStrategyAutoChunkingStrategy$outboundSchema;
  /** @deprecated use `ChunkingStrategyAutoChunkingStrategy$Outbound` instead. */
  export type Outbound = ChunkingStrategyAutoChunkingStrategy$Outbound;
}

/** @internal */
export const FileSearchChunkingStrategy$inboundSchema: z.ZodType<
  FileSearchChunkingStrategy,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ChunkingStrategyAutoChunkingStrategy$inboundSchema),
  z.lazy(() => ChunkingStrategyStaticChunkingStrategy$inboundSchema),
]);

/** @internal */
export type FileSearchChunkingStrategy$Outbound =
  | ChunkingStrategyAutoChunkingStrategy$Outbound
  | ChunkingStrategyStaticChunkingStrategy$Outbound;

/** @internal */
export const FileSearchChunkingStrategy$outboundSchema: z.ZodType<
  FileSearchChunkingStrategy$Outbound,
  z.ZodTypeDef,
  FileSearchChunkingStrategy
> = z.union([
  z.lazy(() => ChunkingStrategyAutoChunkingStrategy$outboundSchema),
  z.lazy(() => ChunkingStrategyStaticChunkingStrategy$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearchChunkingStrategy$ {
  /** @deprecated use `FileSearchChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema = FileSearchChunkingStrategy$inboundSchema;
  /** @deprecated use `FileSearchChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema = FileSearchChunkingStrategy$outboundSchema;
  /** @deprecated use `FileSearchChunkingStrategy$Outbound` instead. */
  export type Outbound = FileSearchChunkingStrategy$Outbound;
}

/** @internal */
export const CreateAssistantRequestFileSearchMetadata$inboundSchema: z.ZodType<
  CreateAssistantRequestFileSearchMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateAssistantRequestFileSearchMetadata$Outbound = {};

/** @internal */
export const CreateAssistantRequestFileSearchMetadata$outboundSchema: z.ZodType<
  CreateAssistantRequestFileSearchMetadata$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestFileSearchMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestFileSearchMetadata$ {
  /** @deprecated use `CreateAssistantRequestFileSearchMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestFileSearchMetadata$inboundSchema;
  /** @deprecated use `CreateAssistantRequestFileSearchMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestFileSearchMetadata$outboundSchema;
  /** @deprecated use `CreateAssistantRequestFileSearchMetadata$Outbound` instead. */
  export type Outbound = CreateAssistantRequestFileSearchMetadata$Outbound;
}

/** @internal */
export const FileSearchVectorStores$inboundSchema: z.ZodType<
  FileSearchVectorStores,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
  chunking_strategy: z.union([
    z.lazy(() => ChunkingStrategyAutoChunkingStrategy$inboundSchema),
    z.lazy(() => ChunkingStrategyStaticChunkingStrategy$inboundSchema),
  ]).optional(),
  metadata: z.lazy(() => CreateAssistantRequestFileSearchMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
    "chunking_strategy": "chunkingStrategy",
  });
});

/** @internal */
export type FileSearchVectorStores$Outbound = {
  file_ids?: Array<string> | undefined;
  chunking_strategy?:
    | ChunkingStrategyAutoChunkingStrategy$Outbound
    | ChunkingStrategyStaticChunkingStrategy$Outbound
    | undefined;
  metadata?: CreateAssistantRequestFileSearchMetadata$Outbound | undefined;
};

/** @internal */
export const FileSearchVectorStores$outboundSchema: z.ZodType<
  FileSearchVectorStores$Outbound,
  z.ZodTypeDef,
  FileSearchVectorStores
> = z.object({
  fileIds: z.array(z.string()).optional(),
  chunkingStrategy: z.union([
    z.lazy(() => ChunkingStrategyAutoChunkingStrategy$outboundSchema),
    z.lazy(() => ChunkingStrategyStaticChunkingStrategy$outboundSchema),
  ]).optional(),
  metadata: z.lazy(() =>
    CreateAssistantRequestFileSearchMetadata$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
    chunkingStrategy: "chunking_strategy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearchVectorStores$ {
  /** @deprecated use `FileSearchVectorStores$inboundSchema` instead. */
  export const inboundSchema = FileSearchVectorStores$inboundSchema;
  /** @deprecated use `FileSearchVectorStores$outboundSchema` instead. */
  export const outboundSchema = FileSearchVectorStores$outboundSchema;
  /** @deprecated use `FileSearchVectorStores$Outbound` instead. */
  export type Outbound = FileSearchVectorStores$Outbound;
}

/** @internal */
export const FileSearch2$inboundSchema: z.ZodType<
  FileSearch2,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()).optional(),
  vector_stores: z.array(z.lazy(() => FileSearchVectorStores$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
    "vector_stores": "vectorStores",
  });
});

/** @internal */
export type FileSearch2$Outbound = {
  vector_store_ids?: Array<string> | undefined;
  vector_stores: Array<FileSearchVectorStores$Outbound>;
};

/** @internal */
export const FileSearch2$outboundSchema: z.ZodType<
  FileSearch2$Outbound,
  z.ZodTypeDef,
  FileSearch2
> = z.object({
  vectorStoreIds: z.array(z.string()).optional(),
  vectorStores: z.array(z.lazy(() => FileSearchVectorStores$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
    vectorStores: "vector_stores",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearch2$ {
  /** @deprecated use `FileSearch2$inboundSchema` instead. */
  export const inboundSchema = FileSearch2$inboundSchema;
  /** @deprecated use `FileSearch2$outboundSchema` instead. */
  export const outboundSchema = FileSearch2$outboundSchema;
  /** @deprecated use `FileSearch2$Outbound` instead. */
  export type Outbound = FileSearch2$Outbound;
}

/** @internal */
export const CreateAssistantRequestChunkingStrategyType$inboundSchema:
  z.ZodNativeEnum<typeof CreateAssistantRequestChunkingStrategyType> = z
    .nativeEnum(CreateAssistantRequestChunkingStrategyType);

/** @internal */
export const CreateAssistantRequestChunkingStrategyType$outboundSchema:
  z.ZodNativeEnum<typeof CreateAssistantRequestChunkingStrategyType> =
    CreateAssistantRequestChunkingStrategyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestChunkingStrategyType$ {
  /** @deprecated use `CreateAssistantRequestChunkingStrategyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestChunkingStrategyType$inboundSchema;
  /** @deprecated use `CreateAssistantRequestChunkingStrategyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestChunkingStrategyType$outboundSchema;
}

/** @internal */
export const Static$inboundSchema: z.ZodType<Static, z.ZodTypeDef, unknown> = z
  .object({
    max_chunk_size_tokens: z.number().int(),
    chunk_overlap_tokens: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "max_chunk_size_tokens": "maxChunkSizeTokens",
      "chunk_overlap_tokens": "chunkOverlapTokens",
    });
  });

/** @internal */
export type Static$Outbound = {
  max_chunk_size_tokens: number;
  chunk_overlap_tokens: number;
};

/** @internal */
export const Static$outboundSchema: z.ZodType<
  Static$Outbound,
  z.ZodTypeDef,
  Static
> = z.object({
  maxChunkSizeTokens: z.number().int(),
  chunkOverlapTokens: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    maxChunkSizeTokens: "max_chunk_size_tokens",
    chunkOverlapTokens: "chunk_overlap_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Static$ {
  /** @deprecated use `Static$inboundSchema` instead. */
  export const inboundSchema = Static$inboundSchema;
  /** @deprecated use `Static$outboundSchema` instead. */
  export const outboundSchema = Static$outboundSchema;
  /** @deprecated use `Static$Outbound` instead. */
  export type Outbound = Static$Outbound;
}

/** @internal */
export const CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateAssistantRequestChunkingStrategyStaticChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: CreateAssistantRequestChunkingStrategyType$inboundSchema,
    static: z.lazy(() => Static$inboundSchema),
  });

/** @internal */
export type CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$Outbound =
  {
    type: string;
    static: Static$Outbound;
  };

/** @internal */
export const CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateAssistantRequestChunkingStrategyStaticChunkingStrategy
  > = z.object({
    type: CreateAssistantRequestChunkingStrategyType$outboundSchema,
    static: z.lazy(() => Static$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$ {
  /** @deprecated use `CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$Outbound;
}

/** @internal */
export const ChunkingStrategyType$inboundSchema: z.ZodNativeEnum<
  typeof ChunkingStrategyType
> = z.nativeEnum(ChunkingStrategyType);

/** @internal */
export const ChunkingStrategyType$outboundSchema: z.ZodNativeEnum<
  typeof ChunkingStrategyType
> = ChunkingStrategyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChunkingStrategyType$ {
  /** @deprecated use `ChunkingStrategyType$inboundSchema` instead. */
  export const inboundSchema = ChunkingStrategyType$inboundSchema;
  /** @deprecated use `ChunkingStrategyType$outboundSchema` instead. */
  export const outboundSchema = ChunkingStrategyType$outboundSchema;
}

/** @internal */
export const AutoChunkingStrategy$inboundSchema: z.ZodType<
  AutoChunkingStrategy,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ChunkingStrategyType$inboundSchema,
});

/** @internal */
export type AutoChunkingStrategy$Outbound = {
  type: string;
};

/** @internal */
export const AutoChunkingStrategy$outboundSchema: z.ZodType<
  AutoChunkingStrategy$Outbound,
  z.ZodTypeDef,
  AutoChunkingStrategy
> = z.object({
  type: ChunkingStrategyType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AutoChunkingStrategy$ {
  /** @deprecated use `AutoChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema = AutoChunkingStrategy$inboundSchema;
  /** @deprecated use `AutoChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema = AutoChunkingStrategy$outboundSchema;
  /** @deprecated use `AutoChunkingStrategy$Outbound` instead. */
  export type Outbound = AutoChunkingStrategy$Outbound;
}

/** @internal */
export const CreateAssistantRequestFileSearchChunkingStrategy$inboundSchema:
  z.ZodType<
    CreateAssistantRequestFileSearchChunkingStrategy,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => AutoChunkingStrategy$inboundSchema),
    z.lazy(() =>
      CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$inboundSchema
    ),
  ]);

/** @internal */
export type CreateAssistantRequestFileSearchChunkingStrategy$Outbound =
  | AutoChunkingStrategy$Outbound
  | CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$Outbound;

/** @internal */
export const CreateAssistantRequestFileSearchChunkingStrategy$outboundSchema:
  z.ZodType<
    CreateAssistantRequestFileSearchChunkingStrategy$Outbound,
    z.ZodTypeDef,
    CreateAssistantRequestFileSearchChunkingStrategy
  > = z.union([
    z.lazy(() => AutoChunkingStrategy$outboundSchema),
    z.lazy(() =>
      CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestFileSearchChunkingStrategy$ {
  /** @deprecated use `CreateAssistantRequestFileSearchChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestFileSearchChunkingStrategy$inboundSchema;
  /** @deprecated use `CreateAssistantRequestFileSearchChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestFileSearchChunkingStrategy$outboundSchema;
  /** @deprecated use `CreateAssistantRequestFileSearchChunkingStrategy$Outbound` instead. */
  export type Outbound =
    CreateAssistantRequestFileSearchChunkingStrategy$Outbound;
}

/** @internal */
export const FileSearchMetadata$inboundSchema: z.ZodType<
  FileSearchMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type FileSearchMetadata$Outbound = {};

/** @internal */
export const FileSearchMetadata$outboundSchema: z.ZodType<
  FileSearchMetadata$Outbound,
  z.ZodTypeDef,
  FileSearchMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearchMetadata$ {
  /** @deprecated use `FileSearchMetadata$inboundSchema` instead. */
  export const inboundSchema = FileSearchMetadata$inboundSchema;
  /** @deprecated use `FileSearchMetadata$outboundSchema` instead. */
  export const outboundSchema = FileSearchMetadata$outboundSchema;
  /** @deprecated use `FileSearchMetadata$Outbound` instead. */
  export type Outbound = FileSearchMetadata$Outbound;
}

/** @internal */
export const VectorStores$inboundSchema: z.ZodType<
  VectorStores,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_ids: z.array(z.string()).optional(),
  chunking_strategy: z.union([
    z.lazy(() => AutoChunkingStrategy$inboundSchema),
    z.lazy(() =>
      CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$inboundSchema
    ),
  ]).optional(),
  metadata: z.lazy(() => FileSearchMetadata$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_ids": "fileIds",
    "chunking_strategy": "chunkingStrategy",
  });
});

/** @internal */
export type VectorStores$Outbound = {
  file_ids?: Array<string> | undefined;
  chunking_strategy?:
    | AutoChunkingStrategy$Outbound
    | CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$Outbound
    | undefined;
  metadata?: FileSearchMetadata$Outbound | undefined;
};

/** @internal */
export const VectorStores$outboundSchema: z.ZodType<
  VectorStores$Outbound,
  z.ZodTypeDef,
  VectorStores
> = z.object({
  fileIds: z.array(z.string()).optional(),
  chunkingStrategy: z.union([
    z.lazy(() => AutoChunkingStrategy$outboundSchema),
    z.lazy(() =>
      CreateAssistantRequestChunkingStrategyStaticChunkingStrategy$outboundSchema
    ),
  ]).optional(),
  metadata: z.lazy(() => FileSearchMetadata$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    fileIds: "file_ids",
    chunkingStrategy: "chunking_strategy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStores$ {
  /** @deprecated use `VectorStores$inboundSchema` instead. */
  export const inboundSchema = VectorStores$inboundSchema;
  /** @deprecated use `VectorStores$outboundSchema` instead. */
  export const outboundSchema = VectorStores$outboundSchema;
  /** @deprecated use `VectorStores$Outbound` instead. */
  export type Outbound = VectorStores$Outbound;
}

/** @internal */
export const FileSearch1$inboundSchema: z.ZodType<
  FileSearch1,
  z.ZodTypeDef,
  unknown
> = z.object({
  vector_store_ids: z.array(z.string()),
  vector_stores: z.array(z.lazy(() => VectorStores$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "vector_store_ids": "vectorStoreIds",
    "vector_stores": "vectorStores",
  });
});

/** @internal */
export type FileSearch1$Outbound = {
  vector_store_ids: Array<string>;
  vector_stores?: Array<VectorStores$Outbound> | undefined;
};

/** @internal */
export const FileSearch1$outboundSchema: z.ZodType<
  FileSearch1$Outbound,
  z.ZodTypeDef,
  FileSearch1
> = z.object({
  vectorStoreIds: z.array(z.string()),
  vectorStores: z.array(z.lazy(() => VectorStores$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    vectorStoreIds: "vector_store_ids",
    vectorStores: "vector_stores",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearch1$ {
  /** @deprecated use `FileSearch1$inboundSchema` instead. */
  export const inboundSchema = FileSearch1$inboundSchema;
  /** @deprecated use `FileSearch1$outboundSchema` instead. */
  export const outboundSchema = FileSearch1$outboundSchema;
  /** @deprecated use `FileSearch1$Outbound` instead. */
  export type Outbound = FileSearch1$Outbound;
}

/** @internal */
export const CreateAssistantRequestFileSearch$inboundSchema: z.ZodType<
  CreateAssistantRequestFileSearch,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FileSearch1$inboundSchema),
  z.lazy(() => FileSearch2$inboundSchema),
]);

/** @internal */
export type CreateAssistantRequestFileSearch$Outbound =
  | FileSearch1$Outbound
  | FileSearch2$Outbound;

/** @internal */
export const CreateAssistantRequestFileSearch$outboundSchema: z.ZodType<
  CreateAssistantRequestFileSearch$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestFileSearch
> = z.union([
  z.lazy(() => FileSearch1$outboundSchema),
  z.lazy(() => FileSearch2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestFileSearch$ {
  /** @deprecated use `CreateAssistantRequestFileSearch$inboundSchema` instead. */
  export const inboundSchema = CreateAssistantRequestFileSearch$inboundSchema;
  /** @deprecated use `CreateAssistantRequestFileSearch$outboundSchema` instead. */
  export const outboundSchema = CreateAssistantRequestFileSearch$outboundSchema;
  /** @deprecated use `CreateAssistantRequestFileSearch$Outbound` instead. */
  export type Outbound = CreateAssistantRequestFileSearch$Outbound;
}

/** @internal */
export const CreateAssistantRequestToolResources$inboundSchema: z.ZodType<
  CreateAssistantRequestToolResources,
  z.ZodTypeDef,
  unknown
> = z.object({
  code_interpreter: z.lazy(() =>
    CreateAssistantRequestCodeInterpreter$inboundSchema
  ).optional(),
  file_search: z.union([
    z.lazy(() => FileSearch1$inboundSchema),
    z.lazy(() => FileSearch2$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "code_interpreter": "codeInterpreter",
    "file_search": "fileSearch",
  });
});

/** @internal */
export type CreateAssistantRequestToolResources$Outbound = {
  code_interpreter?: CreateAssistantRequestCodeInterpreter$Outbound | undefined;
  file_search?: FileSearch1$Outbound | FileSearch2$Outbound | undefined;
};

/** @internal */
export const CreateAssistantRequestToolResources$outboundSchema: z.ZodType<
  CreateAssistantRequestToolResources$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestToolResources
> = z.object({
  codeInterpreter: z.lazy(() =>
    CreateAssistantRequestCodeInterpreter$outboundSchema
  ).optional(),
  fileSearch: z.union([
    z.lazy(() => FileSearch1$outboundSchema),
    z.lazy(() => FileSearch2$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    codeInterpreter: "code_interpreter",
    fileSearch: "file_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestToolResources$ {
  /** @deprecated use `CreateAssistantRequestToolResources$inboundSchema` instead. */
  export const inboundSchema =
    CreateAssistantRequestToolResources$inboundSchema;
  /** @deprecated use `CreateAssistantRequestToolResources$outboundSchema` instead. */
  export const outboundSchema =
    CreateAssistantRequestToolResources$outboundSchema;
  /** @deprecated use `CreateAssistantRequestToolResources$Outbound` instead. */
  export type Outbound = CreateAssistantRequestToolResources$Outbound;
}

/** @internal */
export const CreateAssistantRequestMetadata$inboundSchema: z.ZodType<
  CreateAssistantRequestMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateAssistantRequestMetadata$Outbound = {};

/** @internal */
export const CreateAssistantRequestMetadata$outboundSchema: z.ZodType<
  CreateAssistantRequestMetadata$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequestMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequestMetadata$ {
  /** @deprecated use `CreateAssistantRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateAssistantRequestMetadata$inboundSchema;
  /** @deprecated use `CreateAssistantRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = CreateAssistantRequestMetadata$outboundSchema;
  /** @deprecated use `CreateAssistantRequestMetadata$Outbound` instead. */
  export type Outbound = CreateAssistantRequestMetadata$Outbound;
}

/** @internal */
export const CreateAssistantRequest$inboundSchema: z.ZodType<
  CreateAssistantRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.union([z.string(), CreateAssistantRequestModel2$inboundSchema]),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  tools: z.array(
    z.union([
      AssistantToolsCode$inboundSchema,
      AssistantToolsFileSearch$inboundSchema,
      AssistantToolsFunction$inboundSchema,
    ]),
  ).optional(),
  tool_resources: z.nullable(
    z.lazy(() => CreateAssistantRequestToolResources$inboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateAssistantRequestMetadata$inboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  top_p: z.nullable(z.number().default(1)),
  response_format: AssistantsApiResponseFormatOption$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_resources": "toolResources",
    "top_p": "topP",
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CreateAssistantRequest$Outbound = {
  model: string | string;
  name?: string | null | undefined;
  description?: string | null | undefined;
  instructions?: string | null | undefined;
  tools?:
    | Array<
      | AssistantToolsCode$Outbound
      | AssistantToolsFileSearch$Outbound
      | AssistantToolsFunction$Outbound
    >
    | undefined;
  tool_resources?:
    | CreateAssistantRequestToolResources$Outbound
    | null
    | undefined;
  metadata?: CreateAssistantRequestMetadata$Outbound | null | undefined;
  temperature: number | null;
  top_p: number | null;
  response_format?: AssistantsApiResponseFormatOption$Outbound | undefined;
};

/** @internal */
export const CreateAssistantRequest$outboundSchema: z.ZodType<
  CreateAssistantRequest$Outbound,
  z.ZodTypeDef,
  CreateAssistantRequest
> = z.object({
  model: z.union([z.string(), CreateAssistantRequestModel2$outboundSchema]),
  name: z.nullable(z.string()).optional(),
  description: z.nullable(z.string()).optional(),
  instructions: z.nullable(z.string()).optional(),
  tools: z.array(
    z.union([
      AssistantToolsCode$outboundSchema,
      AssistantToolsFileSearch$outboundSchema,
      AssistantToolsFunction$outboundSchema,
    ]),
  ).optional(),
  toolResources: z.nullable(
    z.lazy(() => CreateAssistantRequestToolResources$outboundSchema),
  ).optional(),
  metadata: z.nullable(
    z.lazy(() => CreateAssistantRequestMetadata$outboundSchema),
  ).optional(),
  temperature: z.nullable(z.number().default(1)),
  topP: z.nullable(z.number().default(1)),
  responseFormat: AssistantsApiResponseFormatOption$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    toolResources: "tool_resources",
    topP: "top_p",
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAssistantRequest$ {
  /** @deprecated use `CreateAssistantRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAssistantRequest$inboundSchema;
  /** @deprecated use `CreateAssistantRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAssistantRequest$outboundSchema;
  /** @deprecated use `CreateAssistantRequest$Outbound` instead. */
  export type Outbound = CreateAssistantRequest$Outbound;
}
