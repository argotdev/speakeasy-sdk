/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Level = {
  Info: "info",
  Warn: "warn",
  Error: "error",
} as const;
export type Level = ClosedEnum<typeof Level>;

export const FineTuningJobEventObject = {
  FineTuningJobEvent: "fine_tuning.job.event",
} as const;
export type FineTuningJobEventObject = ClosedEnum<
  typeof FineTuningJobEventObject
>;

/**
 * Fine-tuning job event object
 */
export type FineTuningJobEvent = {
  id: string;
  createdAt: number;
  level: Level;
  message: string;
  object: FineTuningJobEventObject;
};

/** @internal */
export const Level$inboundSchema: z.ZodNativeEnum<typeof Level> = z.nativeEnum(
  Level,
);

/** @internal */
export const Level$outboundSchema: z.ZodNativeEnum<typeof Level> =
  Level$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Level$ {
  /** @deprecated use `Level$inboundSchema` instead. */
  export const inboundSchema = Level$inboundSchema;
  /** @deprecated use `Level$outboundSchema` instead. */
  export const outboundSchema = Level$outboundSchema;
}

/** @internal */
export const FineTuningJobEventObject$inboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobEventObject
> = z.nativeEnum(FineTuningJobEventObject);

/** @internal */
export const FineTuningJobEventObject$outboundSchema: z.ZodNativeEnum<
  typeof FineTuningJobEventObject
> = FineTuningJobEventObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobEventObject$ {
  /** @deprecated use `FineTuningJobEventObject$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobEventObject$inboundSchema;
  /** @deprecated use `FineTuningJobEventObject$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobEventObject$outboundSchema;
}

/** @internal */
export const FineTuningJobEvent$inboundSchema: z.ZodType<
  FineTuningJobEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  created_at: z.number().int(),
  level: Level$inboundSchema,
  message: z.string(),
  object: FineTuningJobEventObject$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
  });
});

/** @internal */
export type FineTuningJobEvent$Outbound = {
  id: string;
  created_at: number;
  level: string;
  message: string;
  object: string;
};

/** @internal */
export const FineTuningJobEvent$outboundSchema: z.ZodType<
  FineTuningJobEvent$Outbound,
  z.ZodTypeDef,
  FineTuningJobEvent
> = z.object({
  id: z.string(),
  createdAt: z.number().int(),
  level: Level$outboundSchema,
  message: z.string(),
  object: FineTuningJobEventObject$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FineTuningJobEvent$ {
  /** @deprecated use `FineTuningJobEvent$inboundSchema` instead. */
  export const inboundSchema = FineTuningJobEvent$inboundSchema;
  /** @deprecated use `FineTuningJobEvent$outboundSchema` instead. */
  export const outboundSchema = FineTuningJobEvent$outboundSchema;
  /** @deprecated use `FineTuningJobEvent$Outbound` instead. */
  export type Outbound = FineTuningJobEvent$Outbound;
}

export function fineTuningJobEventToJSON(
  fineTuningJobEvent: FineTuningJobEvent,
): string {
  return JSON.stringify(
    FineTuningJobEvent$outboundSchema.parse(fineTuningJobEvent),
  );
}

export function fineTuningJobEventFromJSON(
  jsonString: string,
): SafeParseResult<FineTuningJobEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FineTuningJobEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FineTuningJobEvent' from JSON`,
  );
}
