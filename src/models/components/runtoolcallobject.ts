/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The type of tool call the output is required for. For now, this is always `function`.
 */
export const RunToolCallObjectType = {
  Function: "function",
} as const;
/**
 * The type of tool call the output is required for. For now, this is always `function`.
 */
export type RunToolCallObjectType = ClosedEnum<typeof RunToolCallObjectType>;

/**
 * The function definition.
 */
export type RunToolCallObjectFunction = {
  /**
   * The name of the function.
   */
  name: string;
  /**
   * The arguments that the model expects you to pass to the function.
   */
  arguments: string;
};

/**
 * Tool call objects
 */
export type RunToolCallObject = {
  /**
   * The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
   */
  id: string;
  /**
   * The type of tool call the output is required for. For now, this is always `function`.
   */
  type: RunToolCallObjectType;
  /**
   * The function definition.
   */
  function: RunToolCallObjectFunction;
};

/** @internal */
export const RunToolCallObjectType$inboundSchema: z.ZodNativeEnum<
  typeof RunToolCallObjectType
> = z.nativeEnum(RunToolCallObjectType);

/** @internal */
export const RunToolCallObjectType$outboundSchema: z.ZodNativeEnum<
  typeof RunToolCallObjectType
> = RunToolCallObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunToolCallObjectType$ {
  /** @deprecated use `RunToolCallObjectType$inboundSchema` instead. */
  export const inboundSchema = RunToolCallObjectType$inboundSchema;
  /** @deprecated use `RunToolCallObjectType$outboundSchema` instead. */
  export const outboundSchema = RunToolCallObjectType$outboundSchema;
}

/** @internal */
export const RunToolCallObjectFunction$inboundSchema: z.ZodType<
  RunToolCallObjectFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type RunToolCallObjectFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const RunToolCallObjectFunction$outboundSchema: z.ZodType<
  RunToolCallObjectFunction$Outbound,
  z.ZodTypeDef,
  RunToolCallObjectFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunToolCallObjectFunction$ {
  /** @deprecated use `RunToolCallObjectFunction$inboundSchema` instead. */
  export const inboundSchema = RunToolCallObjectFunction$inboundSchema;
  /** @deprecated use `RunToolCallObjectFunction$outboundSchema` instead. */
  export const outboundSchema = RunToolCallObjectFunction$outboundSchema;
  /** @deprecated use `RunToolCallObjectFunction$Outbound` instead. */
  export type Outbound = RunToolCallObjectFunction$Outbound;
}

/** @internal */
export const RunToolCallObject$inboundSchema: z.ZodType<
  RunToolCallObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: RunToolCallObjectType$inboundSchema,
  function: z.lazy(() => RunToolCallObjectFunction$inboundSchema),
});

/** @internal */
export type RunToolCallObject$Outbound = {
  id: string;
  type: string;
  function: RunToolCallObjectFunction$Outbound;
};

/** @internal */
export const RunToolCallObject$outboundSchema: z.ZodType<
  RunToolCallObject$Outbound,
  z.ZodTypeDef,
  RunToolCallObject
> = z.object({
  id: z.string(),
  type: RunToolCallObjectType$outboundSchema,
  function: z.lazy(() => RunToolCallObjectFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RunToolCallObject$ {
  /** @deprecated use `RunToolCallObject$inboundSchema` instead. */
  export const inboundSchema = RunToolCallObject$inboundSchema;
  /** @deprecated use `RunToolCallObject$outboundSchema` instead. */
  export const outboundSchema = RunToolCallObject$outboundSchema;
  /** @deprecated use `RunToolCallObject$Outbound` instead. */
  export type Outbound = RunToolCallObject$Outbound;
}
