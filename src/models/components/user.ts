/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The object type, which is always `organization.user`
 */
export const UserObject = {
  OrganizationUser: "organization.user",
} as const;
/**
 * The object type, which is always `organization.user`
 */
export type UserObject = ClosedEnum<typeof UserObject>;

/**
 * `owner` or `reader`
 */
export const UserRole = {
  Owner: "owner",
  Reader: "reader",
} as const;
/**
 * `owner` or `reader`
 */
export type UserRole = ClosedEnum<typeof UserRole>;

/**
 * Represents an individual `user` within an organization.
 */
export type User = {
  /**
   * The object type, which is always `organization.user`
   */
  object: UserObject;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The name of the user
   */
  name: string;
  /**
   * The email address of the user
   */
  email: string;
  /**
   * `owner` or `reader`
   */
  role: UserRole;
  /**
   * The Unix timestamp (in seconds) of when the user was added.
   */
  addedAt: number;
};

/** @internal */
export const UserObject$inboundSchema: z.ZodNativeEnum<typeof UserObject> = z
  .nativeEnum(UserObject);

/** @internal */
export const UserObject$outboundSchema: z.ZodNativeEnum<typeof UserObject> =
  UserObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserObject$ {
  /** @deprecated use `UserObject$inboundSchema` instead. */
  export const inboundSchema = UserObject$inboundSchema;
  /** @deprecated use `UserObject$outboundSchema` instead. */
  export const outboundSchema = UserObject$outboundSchema;
}

/** @internal */
export const UserRole$inboundSchema: z.ZodNativeEnum<typeof UserRole> = z
  .nativeEnum(UserRole);

/** @internal */
export const UserRole$outboundSchema: z.ZodNativeEnum<typeof UserRole> =
  UserRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserRole$ {
  /** @deprecated use `UserRole$inboundSchema` instead. */
  export const inboundSchema = UserRole$inboundSchema;
  /** @deprecated use `UserRole$outboundSchema` instead. */
  export const outboundSchema = UserRole$outboundSchema;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    object: UserObject$inboundSchema,
    id: z.string(),
    name: z.string(),
    email: z.string(),
    role: UserRole$inboundSchema,
    added_at: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "added_at": "addedAt",
    });
  });

/** @internal */
export type User$Outbound = {
  object: string;
  id: string;
  name: string;
  email: string;
  role: string;
  added_at: number;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    object: UserObject$outboundSchema,
    id: z.string(),
    name: z.string(),
    email: z.string(),
    role: UserRole$outboundSchema,
    addedAt: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      addedAt: "added_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}
