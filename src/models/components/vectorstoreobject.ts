/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VectorStoreExpirationAfter,
  VectorStoreExpirationAfter$inboundSchema,
  VectorStoreExpirationAfter$Outbound,
  VectorStoreExpirationAfter$outboundSchema,
} from "./vectorstoreexpirationafter.js";

/**
 * The object type, which is always `vector_store`.
 */
export const VectorStoreObjectObject = {
  VectorStore: "vector_store",
} as const;
/**
 * The object type, which is always `vector_store`.
 */
export type VectorStoreObjectObject = ClosedEnum<
  typeof VectorStoreObjectObject
>;

export type FileCounts = {
  /**
   * The number of files that are currently being processed.
   */
  inProgress: number;
  /**
   * The number of files that have been successfully processed.
   */
  completed: number;
  /**
   * The number of files that have failed to process.
   */
  failed: number;
  /**
   * The number of files that were cancelled.
   */
  cancelled: number;
  /**
   * The total number of files.
   */
  total: number;
};

/**
 * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
 */
export const VectorStoreObjectStatus = {
  Expired: "expired",
  InProgress: "in_progress",
  Completed: "completed",
} as const;
/**
 * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
 */
export type VectorStoreObjectStatus = ClosedEnum<
  typeof VectorStoreObjectStatus
>;

/**
 * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
 *
 * @remarks
 */
export type VectorStoreObjectMetadata = {};

/**
 * A vector store is a collection of processed files can be used by the `file_search` tool.
 */
export type VectorStoreObject = {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `vector_store`.
   */
  object: VectorStoreObjectObject;
  /**
   * The Unix timestamp (in seconds) for when the vector store was created.
   */
  createdAt: number;
  /**
   * The name of the vector store.
   */
  name: string;
  /**
   * The total number of bytes used by the files in the vector store.
   */
  usageBytes: number;
  fileCounts: FileCounts;
  /**
   * The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
   */
  status: VectorStoreObjectStatus;
  /**
   * The expiration policy for a vector store.
   */
  expiresAfter?: VectorStoreExpirationAfter | undefined;
  /**
   * The Unix timestamp (in seconds) for when the vector store will expire.
   */
  expiresAt?: number | null | undefined;
  /**
   * The Unix timestamp (in seconds) for when the vector store was last active.
   */
  lastActiveAt: number | null;
  /**
   * Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.
   *
   * @remarks
   */
  metadata: VectorStoreObjectMetadata | null;
};

/** @internal */
export const VectorStoreObjectObject$inboundSchema: z.ZodNativeEnum<
  typeof VectorStoreObjectObject
> = z.nativeEnum(VectorStoreObjectObject);

/** @internal */
export const VectorStoreObjectObject$outboundSchema: z.ZodNativeEnum<
  typeof VectorStoreObjectObject
> = VectorStoreObjectObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreObjectObject$ {
  /** @deprecated use `VectorStoreObjectObject$inboundSchema` instead. */
  export const inboundSchema = VectorStoreObjectObject$inboundSchema;
  /** @deprecated use `VectorStoreObjectObject$outboundSchema` instead. */
  export const outboundSchema = VectorStoreObjectObject$outboundSchema;
}

/** @internal */
export const FileCounts$inboundSchema: z.ZodType<
  FileCounts,
  z.ZodTypeDef,
  unknown
> = z.object({
  in_progress: z.number().int(),
  completed: z.number().int(),
  failed: z.number().int(),
  cancelled: z.number().int(),
  total: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "in_progress": "inProgress",
  });
});

/** @internal */
export type FileCounts$Outbound = {
  in_progress: number;
  completed: number;
  failed: number;
  cancelled: number;
  total: number;
};

/** @internal */
export const FileCounts$outboundSchema: z.ZodType<
  FileCounts$Outbound,
  z.ZodTypeDef,
  FileCounts
> = z.object({
  inProgress: z.number().int(),
  completed: z.number().int(),
  failed: z.number().int(),
  cancelled: z.number().int(),
  total: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    inProgress: "in_progress",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileCounts$ {
  /** @deprecated use `FileCounts$inboundSchema` instead. */
  export const inboundSchema = FileCounts$inboundSchema;
  /** @deprecated use `FileCounts$outboundSchema` instead. */
  export const outboundSchema = FileCounts$outboundSchema;
  /** @deprecated use `FileCounts$Outbound` instead. */
  export type Outbound = FileCounts$Outbound;
}

export function fileCountsToJSON(fileCounts: FileCounts): string {
  return JSON.stringify(FileCounts$outboundSchema.parse(fileCounts));
}

export function fileCountsFromJSON(
  jsonString: string,
): SafeParseResult<FileCounts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileCounts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileCounts' from JSON`,
  );
}

/** @internal */
export const VectorStoreObjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof VectorStoreObjectStatus
> = z.nativeEnum(VectorStoreObjectStatus);

/** @internal */
export const VectorStoreObjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof VectorStoreObjectStatus
> = VectorStoreObjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreObjectStatus$ {
  /** @deprecated use `VectorStoreObjectStatus$inboundSchema` instead. */
  export const inboundSchema = VectorStoreObjectStatus$inboundSchema;
  /** @deprecated use `VectorStoreObjectStatus$outboundSchema` instead. */
  export const outboundSchema = VectorStoreObjectStatus$outboundSchema;
}

/** @internal */
export const VectorStoreObjectMetadata$inboundSchema: z.ZodType<
  VectorStoreObjectMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type VectorStoreObjectMetadata$Outbound = {};

/** @internal */
export const VectorStoreObjectMetadata$outboundSchema: z.ZodType<
  VectorStoreObjectMetadata$Outbound,
  z.ZodTypeDef,
  VectorStoreObjectMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreObjectMetadata$ {
  /** @deprecated use `VectorStoreObjectMetadata$inboundSchema` instead. */
  export const inboundSchema = VectorStoreObjectMetadata$inboundSchema;
  /** @deprecated use `VectorStoreObjectMetadata$outboundSchema` instead. */
  export const outboundSchema = VectorStoreObjectMetadata$outboundSchema;
  /** @deprecated use `VectorStoreObjectMetadata$Outbound` instead. */
  export type Outbound = VectorStoreObjectMetadata$Outbound;
}

export function vectorStoreObjectMetadataToJSON(
  vectorStoreObjectMetadata: VectorStoreObjectMetadata,
): string {
  return JSON.stringify(
    VectorStoreObjectMetadata$outboundSchema.parse(vectorStoreObjectMetadata),
  );
}

export function vectorStoreObjectMetadataFromJSON(
  jsonString: string,
): SafeParseResult<VectorStoreObjectMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VectorStoreObjectMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VectorStoreObjectMetadata' from JSON`,
  );
}

/** @internal */
export const VectorStoreObject$inboundSchema: z.ZodType<
  VectorStoreObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: VectorStoreObjectObject$inboundSchema,
  created_at: z.number().int(),
  name: z.string(),
  usage_bytes: z.number().int(),
  file_counts: z.lazy(() => FileCounts$inboundSchema),
  status: VectorStoreObjectStatus$inboundSchema,
  expires_after: VectorStoreExpirationAfter$inboundSchema.optional(),
  expires_at: z.nullable(z.number().int()).optional(),
  last_active_at: z.nullable(z.number().int()),
  metadata: z.nullable(z.lazy(() => VectorStoreObjectMetadata$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "created_at": "createdAt",
    "usage_bytes": "usageBytes",
    "file_counts": "fileCounts",
    "expires_after": "expiresAfter",
    "expires_at": "expiresAt",
    "last_active_at": "lastActiveAt",
  });
});

/** @internal */
export type VectorStoreObject$Outbound = {
  id: string;
  object: string;
  created_at: number;
  name: string;
  usage_bytes: number;
  file_counts: FileCounts$Outbound;
  status: string;
  expires_after?: VectorStoreExpirationAfter$Outbound | undefined;
  expires_at?: number | null | undefined;
  last_active_at: number | null;
  metadata: VectorStoreObjectMetadata$Outbound | null;
};

/** @internal */
export const VectorStoreObject$outboundSchema: z.ZodType<
  VectorStoreObject$Outbound,
  z.ZodTypeDef,
  VectorStoreObject
> = z.object({
  id: z.string(),
  object: VectorStoreObjectObject$outboundSchema,
  createdAt: z.number().int(),
  name: z.string(),
  usageBytes: z.number().int(),
  fileCounts: z.lazy(() => FileCounts$outboundSchema),
  status: VectorStoreObjectStatus$outboundSchema,
  expiresAfter: VectorStoreExpirationAfter$outboundSchema.optional(),
  expiresAt: z.nullable(z.number().int()).optional(),
  lastActiveAt: z.nullable(z.number().int()),
  metadata: z.nullable(z.lazy(() => VectorStoreObjectMetadata$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    createdAt: "created_at",
    usageBytes: "usage_bytes",
    fileCounts: "file_counts",
    expiresAfter: "expires_after",
    expiresAt: "expires_at",
    lastActiveAt: "last_active_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreObject$ {
  /** @deprecated use `VectorStoreObject$inboundSchema` instead. */
  export const inboundSchema = VectorStoreObject$inboundSchema;
  /** @deprecated use `VectorStoreObject$outboundSchema` instead. */
  export const outboundSchema = VectorStoreObject$outboundSchema;
  /** @deprecated use `VectorStoreObject$Outbound` instead. */
  export type Outbound = VectorStoreObject$Outbound;
}

export function vectorStoreObjectToJSON(
  vectorStoreObject: VectorStoreObject,
): string {
  return JSON.stringify(
    VectorStoreObject$outboundSchema.parse(vectorStoreObject),
  );
}

export function vectorStoreObjectFromJSON(
  jsonString: string,
): SafeParseResult<VectorStoreObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VectorStoreObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VectorStoreObject' from JSON`,
  );
}
