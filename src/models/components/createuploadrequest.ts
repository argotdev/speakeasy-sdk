/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The intended purpose of the uploaded file.
 *
 * @remarks
 *
 * See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
 */
export const CreateUploadRequestPurpose = {
  Assistants: "assistants",
  Batch: "batch",
  FineTune: "fine-tune",
  Vision: "vision",
} as const;
/**
 * The intended purpose of the uploaded file.
 *
 * @remarks
 *
 * See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
 */
export type CreateUploadRequestPurpose = ClosedEnum<
  typeof CreateUploadRequestPurpose
>;

export type CreateUploadRequest = {
  /**
   * The name of the file to upload.
   *
   * @remarks
   */
  filename: string;
  /**
   * The intended purpose of the uploaded file.
   *
   * @remarks
   *
   * See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).
   */
  purpose: CreateUploadRequestPurpose;
  /**
   * The number of bytes in the file you are uploading.
   *
   * @remarks
   */
  bytes: number;
  /**
   * The MIME type of the file.
   *
   * @remarks
   *
   * This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.
   */
  mimeType: string;
};

/** @internal */
export const CreateUploadRequestPurpose$inboundSchema: z.ZodNativeEnum<
  typeof CreateUploadRequestPurpose
> = z.nativeEnum(CreateUploadRequestPurpose);

/** @internal */
export const CreateUploadRequestPurpose$outboundSchema: z.ZodNativeEnum<
  typeof CreateUploadRequestPurpose
> = CreateUploadRequestPurpose$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadRequestPurpose$ {
  /** @deprecated use `CreateUploadRequestPurpose$inboundSchema` instead. */
  export const inboundSchema = CreateUploadRequestPurpose$inboundSchema;
  /** @deprecated use `CreateUploadRequestPurpose$outboundSchema` instead. */
  export const outboundSchema = CreateUploadRequestPurpose$outboundSchema;
}

/** @internal */
export const CreateUploadRequest$inboundSchema: z.ZodType<
  CreateUploadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filename: z.string(),
  purpose: CreateUploadRequestPurpose$inboundSchema,
  bytes: z.number().int(),
  mime_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "mime_type": "mimeType",
  });
});

/** @internal */
export type CreateUploadRequest$Outbound = {
  filename: string;
  purpose: string;
  bytes: number;
  mime_type: string;
};

/** @internal */
export const CreateUploadRequest$outboundSchema: z.ZodType<
  CreateUploadRequest$Outbound,
  z.ZodTypeDef,
  CreateUploadRequest
> = z.object({
  filename: z.string(),
  purpose: CreateUploadRequestPurpose$outboundSchema,
  bytes: z.number().int(),
  mimeType: z.string(),
}).transform((v) => {
  return remap$(v, {
    mimeType: "mime_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUploadRequest$ {
  /** @deprecated use `CreateUploadRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUploadRequest$inboundSchema;
  /** @deprecated use `CreateUploadRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUploadRequest$outboundSchema;
  /** @deprecated use `CreateUploadRequest$Outbound` instead. */
  export type Outbound = CreateUploadRequest$Outbound;
}
