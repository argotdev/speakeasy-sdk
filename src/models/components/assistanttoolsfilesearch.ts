/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FileSearchRankingOptions,
  FileSearchRankingOptions$inboundSchema,
  FileSearchRankingOptions$Outbound,
  FileSearchRankingOptions$outboundSchema,
} from "./filesearchrankingoptions.js";

/**
 * The type of tool being defined: `file_search`
 */
export const AssistantToolsFileSearchType = {
  FileSearch: "file_search",
} as const;
/**
 * The type of tool being defined: `file_search`
 */
export type AssistantToolsFileSearchType = ClosedEnum<
  typeof AssistantToolsFileSearchType
>;

/**
 * Overrides for the file search tool.
 */
export type FileSearch = {
  /**
   * The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.
   *
   * @remarks
   *
   * Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.
   */
  maxNumResults?: number | undefined;
  /**
   * The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.
   *
   * @remarks
   *
   * See the [file search tool documentation](/docs/assistants/tools/file-search/customizing-file-search-settings) for more information.
   */
  rankingOptions?: FileSearchRankingOptions | undefined;
};

export type AssistantToolsFileSearch = {
  /**
   * The type of tool being defined: `file_search`
   */
  type: AssistantToolsFileSearchType;
  /**
   * Overrides for the file search tool.
   */
  fileSearch?: FileSearch | undefined;
};

/** @internal */
export const AssistantToolsFileSearchType$inboundSchema: z.ZodNativeEnum<
  typeof AssistantToolsFileSearchType
> = z.nativeEnum(AssistantToolsFileSearchType);

/** @internal */
export const AssistantToolsFileSearchType$outboundSchema: z.ZodNativeEnum<
  typeof AssistantToolsFileSearchType
> = AssistantToolsFileSearchType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantToolsFileSearchType$ {
  /** @deprecated use `AssistantToolsFileSearchType$inboundSchema` instead. */
  export const inboundSchema = AssistantToolsFileSearchType$inboundSchema;
  /** @deprecated use `AssistantToolsFileSearchType$outboundSchema` instead. */
  export const outboundSchema = AssistantToolsFileSearchType$outboundSchema;
}

/** @internal */
export const FileSearch$inboundSchema: z.ZodType<
  FileSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  max_num_results: z.number().int().optional(),
  ranking_options: FileSearchRankingOptions$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "max_num_results": "maxNumResults",
    "ranking_options": "rankingOptions",
  });
});

/** @internal */
export type FileSearch$Outbound = {
  max_num_results?: number | undefined;
  ranking_options?: FileSearchRankingOptions$Outbound | undefined;
};

/** @internal */
export const FileSearch$outboundSchema: z.ZodType<
  FileSearch$Outbound,
  z.ZodTypeDef,
  FileSearch
> = z.object({
  maxNumResults: z.number().int().optional(),
  rankingOptions: FileSearchRankingOptions$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    maxNumResults: "max_num_results",
    rankingOptions: "ranking_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileSearch$ {
  /** @deprecated use `FileSearch$inboundSchema` instead. */
  export const inboundSchema = FileSearch$inboundSchema;
  /** @deprecated use `FileSearch$outboundSchema` instead. */
  export const outboundSchema = FileSearch$outboundSchema;
  /** @deprecated use `FileSearch$Outbound` instead. */
  export type Outbound = FileSearch$Outbound;
}

export function fileSearchToJSON(fileSearch: FileSearch): string {
  return JSON.stringify(FileSearch$outboundSchema.parse(fileSearch));
}

export function fileSearchFromJSON(
  jsonString: string,
): SafeParseResult<FileSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FileSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FileSearch' from JSON`,
  );
}

/** @internal */
export const AssistantToolsFileSearch$inboundSchema: z.ZodType<
  AssistantToolsFileSearch,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AssistantToolsFileSearchType$inboundSchema,
  file_search: z.lazy(() => FileSearch$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "file_search": "fileSearch",
  });
});

/** @internal */
export type AssistantToolsFileSearch$Outbound = {
  type: string;
  file_search?: FileSearch$Outbound | undefined;
};

/** @internal */
export const AssistantToolsFileSearch$outboundSchema: z.ZodType<
  AssistantToolsFileSearch$Outbound,
  z.ZodTypeDef,
  AssistantToolsFileSearch
> = z.object({
  type: AssistantToolsFileSearchType$outboundSchema,
  fileSearch: z.lazy(() => FileSearch$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    fileSearch: "file_search",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssistantToolsFileSearch$ {
  /** @deprecated use `AssistantToolsFileSearch$inboundSchema` instead. */
  export const inboundSchema = AssistantToolsFileSearch$inboundSchema;
  /** @deprecated use `AssistantToolsFileSearch$outboundSchema` instead. */
  export const outboundSchema = AssistantToolsFileSearch$outboundSchema;
  /** @deprecated use `AssistantToolsFileSearch$Outbound` instead. */
  export type Outbound = AssistantToolsFileSearch$Outbound;
}

export function assistantToolsFileSearchToJSON(
  assistantToolsFileSearch: AssistantToolsFileSearch,
): string {
  return JSON.stringify(
    AssistantToolsFileSearch$outboundSchema.parse(assistantToolsFileSearch),
  );
}

export function assistantToolsFileSearchFromJSON(
  jsonString: string,
): SafeParseResult<AssistantToolsFileSearch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssistantToolsFileSearch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssistantToolsFileSearch' from JSON`,
  );
}
