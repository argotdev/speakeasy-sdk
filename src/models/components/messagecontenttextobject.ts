/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MessageContentTextAnnotationsFileCitationObject,
  MessageContentTextAnnotationsFileCitationObject$inboundSchema,
  MessageContentTextAnnotationsFileCitationObject$Outbound,
  MessageContentTextAnnotationsFileCitationObject$outboundSchema,
} from "./messagecontenttextannotationsfilecitationobject.js";
import {
  MessageContentTextAnnotationsFilePathObject,
  MessageContentTextAnnotationsFilePathObject$inboundSchema,
  MessageContentTextAnnotationsFilePathObject$Outbound,
  MessageContentTextAnnotationsFilePathObject$outboundSchema,
} from "./messagecontenttextannotationsfilepathobject.js";

/**
 * Always `text`.
 */
export const MessageContentTextObjectType = {
  Text: "text",
} as const;
/**
 * Always `text`.
 */
export type MessageContentTextObjectType = ClosedEnum<
  typeof MessageContentTextObjectType
>;

export type Annotations =
  | MessageContentTextAnnotationsFileCitationObject
  | MessageContentTextAnnotationsFilePathObject;

export type Text = {
  /**
   * The data that makes up the text.
   */
  value: string;
  annotations: Array<
    | MessageContentTextAnnotationsFileCitationObject
    | MessageContentTextAnnotationsFilePathObject
  >;
};

/**
 * The text content that is part of a message.
 */
export type MessageContentTextObject = {
  /**
   * Always `text`.
   */
  type: MessageContentTextObjectType;
  text: Text;
};

/** @internal */
export const MessageContentTextObjectType$inboundSchema: z.ZodNativeEnum<
  typeof MessageContentTextObjectType
> = z.nativeEnum(MessageContentTextObjectType);

/** @internal */
export const MessageContentTextObjectType$outboundSchema: z.ZodNativeEnum<
  typeof MessageContentTextObjectType
> = MessageContentTextObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentTextObjectType$ {
  /** @deprecated use `MessageContentTextObjectType$inboundSchema` instead. */
  export const inboundSchema = MessageContentTextObjectType$inboundSchema;
  /** @deprecated use `MessageContentTextObjectType$outboundSchema` instead. */
  export const outboundSchema = MessageContentTextObjectType$outboundSchema;
}

/** @internal */
export const Annotations$inboundSchema: z.ZodType<
  Annotations,
  z.ZodTypeDef,
  unknown
> = z.union([
  MessageContentTextAnnotationsFileCitationObject$inboundSchema,
  MessageContentTextAnnotationsFilePathObject$inboundSchema,
]);

/** @internal */
export type Annotations$Outbound =
  | MessageContentTextAnnotationsFileCitationObject$Outbound
  | MessageContentTextAnnotationsFilePathObject$Outbound;

/** @internal */
export const Annotations$outboundSchema: z.ZodType<
  Annotations$Outbound,
  z.ZodTypeDef,
  Annotations
> = z.union([
  MessageContentTextAnnotationsFileCitationObject$outboundSchema,
  MessageContentTextAnnotationsFilePathObject$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Annotations$ {
  /** @deprecated use `Annotations$inboundSchema` instead. */
  export const inboundSchema = Annotations$inboundSchema;
  /** @deprecated use `Annotations$outboundSchema` instead. */
  export const outboundSchema = Annotations$outboundSchema;
  /** @deprecated use `Annotations$Outbound` instead. */
  export type Outbound = Annotations$Outbound;
}

export function annotationsToJSON(annotations: Annotations): string {
  return JSON.stringify(Annotations$outboundSchema.parse(annotations));
}

export function annotationsFromJSON(
  jsonString: string,
): SafeParseResult<Annotations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Annotations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Annotations' from JSON`,
  );
}

/** @internal */
export const Text$inboundSchema: z.ZodType<Text, z.ZodTypeDef, unknown> = z
  .object({
    value: z.string(),
    annotations: z.array(
      z.union([
        MessageContentTextAnnotationsFileCitationObject$inboundSchema,
        MessageContentTextAnnotationsFilePathObject$inboundSchema,
      ]),
    ),
  });

/** @internal */
export type Text$Outbound = {
  value: string;
  annotations: Array<
    | MessageContentTextAnnotationsFileCitationObject$Outbound
    | MessageContentTextAnnotationsFilePathObject$Outbound
  >;
};

/** @internal */
export const Text$outboundSchema: z.ZodType<Text$Outbound, z.ZodTypeDef, Text> =
  z.object({
    value: z.string(),
    annotations: z.array(
      z.union([
        MessageContentTextAnnotationsFileCitationObject$outboundSchema,
        MessageContentTextAnnotationsFilePathObject$outboundSchema,
      ]),
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Text$ {
  /** @deprecated use `Text$inboundSchema` instead. */
  export const inboundSchema = Text$inboundSchema;
  /** @deprecated use `Text$outboundSchema` instead. */
  export const outboundSchema = Text$outboundSchema;
  /** @deprecated use `Text$Outbound` instead. */
  export type Outbound = Text$Outbound;
}

export function textToJSON(text: Text): string {
  return JSON.stringify(Text$outboundSchema.parse(text));
}

export function textFromJSON(
  jsonString: string,
): SafeParseResult<Text, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Text$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Text' from JSON`,
  );
}

/** @internal */
export const MessageContentTextObject$inboundSchema: z.ZodType<
  MessageContentTextObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: MessageContentTextObjectType$inboundSchema,
  text: z.lazy(() => Text$inboundSchema),
});

/** @internal */
export type MessageContentTextObject$Outbound = {
  type: string;
  text: Text$Outbound;
};

/** @internal */
export const MessageContentTextObject$outboundSchema: z.ZodType<
  MessageContentTextObject$Outbound,
  z.ZodTypeDef,
  MessageContentTextObject
> = z.object({
  type: MessageContentTextObjectType$outboundSchema,
  text: z.lazy(() => Text$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentTextObject$ {
  /** @deprecated use `MessageContentTextObject$inboundSchema` instead. */
  export const inboundSchema = MessageContentTextObject$inboundSchema;
  /** @deprecated use `MessageContentTextObject$outboundSchema` instead. */
  export const outboundSchema = MessageContentTextObject$outboundSchema;
  /** @deprecated use `MessageContentTextObject$Outbound` instead. */
  export type Outbound = MessageContentTextObject$Outbound;
}

export function messageContentTextObjectToJSON(
  messageContentTextObject: MessageContentTextObject,
): string {
  return JSON.stringify(
    MessageContentTextObject$outboundSchema.parse(messageContentTextObject),
  );
}

export function messageContentTextObjectFromJSON(
  jsonString: string,
): SafeParseResult<MessageContentTextObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MessageContentTextObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MessageContentTextObject' from JSON`,
  );
}
