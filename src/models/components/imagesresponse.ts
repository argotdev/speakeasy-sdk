/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Image,
  Image$inboundSchema,
  Image$Outbound,
  Image$outboundSchema,
} from "./image.js";

export type ImagesResponse = {
  created: number;
  data: Array<Image>;
};

/** @internal */
export const ImagesResponse$inboundSchema: z.ZodType<
  ImagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.number().int(),
  data: z.array(Image$inboundSchema),
});

/** @internal */
export type ImagesResponse$Outbound = {
  created: number;
  data: Array<Image$Outbound>;
};

/** @internal */
export const ImagesResponse$outboundSchema: z.ZodType<
  ImagesResponse$Outbound,
  z.ZodTypeDef,
  ImagesResponse
> = z.object({
  created: z.number().int(),
  data: z.array(Image$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImagesResponse$ {
  /** @deprecated use `ImagesResponse$inboundSchema` instead. */
  export const inboundSchema = ImagesResponse$inboundSchema;
  /** @deprecated use `ImagesResponse$outboundSchema` instead. */
  export const outboundSchema = ImagesResponse$outboundSchema;
  /** @deprecated use `ImagesResponse$Outbound` instead. */
  export type Outbound = ImagesResponse$Outbound;
}

export function imagesResponseToJSON(imagesResponse: ImagesResponse): string {
  return JSON.stringify(ImagesResponse$outboundSchema.parse(imagesResponse));
}

export function imagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ImagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImagesResponse' from JSON`,
  );
}
