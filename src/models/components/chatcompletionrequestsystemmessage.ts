/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChatCompletionRequestSystemMessageContentPart,
  ChatCompletionRequestSystemMessageContentPart$inboundSchema,
  ChatCompletionRequestSystemMessageContentPart$Outbound,
  ChatCompletionRequestSystemMessageContentPart$outboundSchema,
} from "./chatcompletionrequestsystemmessagecontentpart.js";

/**
 * The contents of the system message.
 */
export type Content =
  | string
  | Array<ChatCompletionRequestSystemMessageContentPart>;

/**
 * The role of the messages author, in this case `system`.
 */
export const Role = {
  System: "system",
} as const;
/**
 * The role of the messages author, in this case `system`.
 */
export type Role = ClosedEnum<typeof Role>;

export type ChatCompletionRequestSystemMessage = {
  /**
   * The contents of the system message.
   */
  content: string | Array<ChatCompletionRequestSystemMessageContentPart>;
  /**
   * The role of the messages author, in this case `system`.
   */
  role: Role;
  /**
   * An optional name for the participant. Provides the model information to differentiate between participants of the same role.
   */
  name?: string | undefined;
};

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.union([
    z.string(),
    z.array(ChatCompletionRequestSystemMessageContentPart$inboundSchema),
  ]);

/** @internal */
export type Content$Outbound =
  | string
  | Array<ChatCompletionRequestSystemMessageContentPart$Outbound>;

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.union([
  z.string(),
  z.array(ChatCompletionRequestSystemMessageContentPart$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

export function contentToJSON(content: Content): string {
  return JSON.stringify(Content$outboundSchema.parse(content));
}

export function contentFromJSON(
  jsonString: string,
): SafeParseResult<Content, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content' from JSON`,
  );
}

/** @internal */
export const Role$inboundSchema: z.ZodNativeEnum<typeof Role> = z.nativeEnum(
  Role,
);

/** @internal */
export const Role$outboundSchema: z.ZodNativeEnum<typeof Role> =
  Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Role$ {
  /** @deprecated use `Role$inboundSchema` instead. */
  export const inboundSchema = Role$inboundSchema;
  /** @deprecated use `Role$outboundSchema` instead. */
  export const outboundSchema = Role$outboundSchema;
}

/** @internal */
export const ChatCompletionRequestSystemMessage$inboundSchema: z.ZodType<
  ChatCompletionRequestSystemMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionRequestSystemMessageContentPart$inboundSchema),
  ]),
  role: Role$inboundSchema,
  name: z.string().optional(),
});

/** @internal */
export type ChatCompletionRequestSystemMessage$Outbound = {
  content:
    | string
    | Array<ChatCompletionRequestSystemMessageContentPart$Outbound>;
  role: string;
  name?: string | undefined;
};

/** @internal */
export const ChatCompletionRequestSystemMessage$outboundSchema: z.ZodType<
  ChatCompletionRequestSystemMessage$Outbound,
  z.ZodTypeDef,
  ChatCompletionRequestSystemMessage
> = z.object({
  content: z.union([
    z.string(),
    z.array(ChatCompletionRequestSystemMessageContentPart$outboundSchema),
  ]),
  role: Role$outboundSchema,
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChatCompletionRequestSystemMessage$ {
  /** @deprecated use `ChatCompletionRequestSystemMessage$inboundSchema` instead. */
  export const inboundSchema = ChatCompletionRequestSystemMessage$inboundSchema;
  /** @deprecated use `ChatCompletionRequestSystemMessage$outboundSchema` instead. */
  export const outboundSchema =
    ChatCompletionRequestSystemMessage$outboundSchema;
  /** @deprecated use `ChatCompletionRequestSystemMessage$Outbound` instead. */
  export type Outbound = ChatCompletionRequestSystemMessage$Outbound;
}

export function chatCompletionRequestSystemMessageToJSON(
  chatCompletionRequestSystemMessage: ChatCompletionRequestSystemMessage,
): string {
  return JSON.stringify(
    ChatCompletionRequestSystemMessage$outboundSchema.parse(
      chatCompletionRequestSystemMessage,
    ),
  );
}

export function chatCompletionRequestSystemMessageFromJSON(
  jsonString: string,
): SafeParseResult<ChatCompletionRequestSystemMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ChatCompletionRequestSystemMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChatCompletionRequestSystemMessage' from JSON`,
  );
}
