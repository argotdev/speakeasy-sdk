/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateImageEditRequestImage = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export type Mask = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

export const CreateImageEditRequestModel2 = {
  DallE2: "dall-e-2",
} as const;
export type CreateImageEditRequestModel2 = ClosedEnum<
  typeof CreateImageEditRequestModel2
>;

/**
 * The model to use for image generation. Only `dall-e-2` is supported at this time.
 */
export type CreateImageEditRequestModel = string | CreateImageEditRequestModel2;

/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export const CreateImageEditRequestSize = {
  TwoHundredAndFiftySixx256: "256x256",
  FiveHundredAndTwelvex512: "512x512",
  OneThousandAndTwentyFourx1024: "1024x1024",
} as const;
/**
 * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
 */
export type CreateImageEditRequestSize = ClosedEnum<
  typeof CreateImageEditRequestSize
>;

/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 */
export const CreateImageEditRequestResponseFormat = {
  Url: "url",
  B64Json: "b64_json",
} as const;
/**
 * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
 */
export type CreateImageEditRequestResponseFormat = ClosedEnum<
  typeof CreateImageEditRequestResponseFormat
>;

export type CreateImageEditRequest = {
  /**
   * The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
   */
  image: CreateImageEditRequestImage | Blob;
  /**
   * A text description of the desired image(s). The maximum length is 1000 characters.
   */
  prompt: string;
  /**
   * An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
   */
  mask?: Mask | Blob | undefined;
  /**
   * The model to use for image generation. Only `dall-e-2` is supported at this time.
   */
  model?: string | CreateImageEditRequestModel2 | null | undefined;
  /**
   * The number of images to generate. Must be between 1 and 10.
   */
  n?: number | null | undefined;
  /**
   * The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
   */
  responseFormat?: CreateImageEditRequestResponseFormat | null | undefined;
  /**
   * The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
   */
  size?: CreateImageEditRequestSize | null | undefined;
  /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
   *
   * @remarks
   */
  user?: string | undefined;
};

/** @internal */
export const CreateImageEditRequestImage$inboundSchema: z.ZodType<
  CreateImageEditRequestImage,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type CreateImageEditRequestImage$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const CreateImageEditRequestImage$outboundSchema: z.ZodType<
  CreateImageEditRequestImage$Outbound,
  z.ZodTypeDef,
  CreateImageEditRequestImage
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageEditRequestImage$ {
  /** @deprecated use `CreateImageEditRequestImage$inboundSchema` instead. */
  export const inboundSchema = CreateImageEditRequestImage$inboundSchema;
  /** @deprecated use `CreateImageEditRequestImage$outboundSchema` instead. */
  export const outboundSchema = CreateImageEditRequestImage$outboundSchema;
  /** @deprecated use `CreateImageEditRequestImage$Outbound` instead. */
  export type Outbound = CreateImageEditRequestImage$Outbound;
}

export function createImageEditRequestImageToJSON(
  createImageEditRequestImage: CreateImageEditRequestImage,
): string {
  return JSON.stringify(
    CreateImageEditRequestImage$outboundSchema.parse(
      createImageEditRequestImage,
    ),
  );
}

export function createImageEditRequestImageFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageEditRequestImage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageEditRequestImage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageEditRequestImage' from JSON`,
  );
}

/** @internal */
export const Mask$inboundSchema: z.ZodType<Mask, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type Mask$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const Mask$outboundSchema: z.ZodType<Mask$Outbound, z.ZodTypeDef, Mask> =
  z.object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mask$ {
  /** @deprecated use `Mask$inboundSchema` instead. */
  export const inboundSchema = Mask$inboundSchema;
  /** @deprecated use `Mask$outboundSchema` instead. */
  export const outboundSchema = Mask$outboundSchema;
  /** @deprecated use `Mask$Outbound` instead. */
  export type Outbound = Mask$Outbound;
}

export function maskToJSON(mask: Mask): string {
  return JSON.stringify(Mask$outboundSchema.parse(mask));
}

export function maskFromJSON(
  jsonString: string,
): SafeParseResult<Mask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mask' from JSON`,
  );
}

/** @internal */
export const CreateImageEditRequestModel2$inboundSchema: z.ZodNativeEnum<
  typeof CreateImageEditRequestModel2
> = z.nativeEnum(CreateImageEditRequestModel2);

/** @internal */
export const CreateImageEditRequestModel2$outboundSchema: z.ZodNativeEnum<
  typeof CreateImageEditRequestModel2
> = CreateImageEditRequestModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageEditRequestModel2$ {
  /** @deprecated use `CreateImageEditRequestModel2$inboundSchema` instead. */
  export const inboundSchema = CreateImageEditRequestModel2$inboundSchema;
  /** @deprecated use `CreateImageEditRequestModel2$outboundSchema` instead. */
  export const outboundSchema = CreateImageEditRequestModel2$outboundSchema;
}

/** @internal */
export const CreateImageEditRequestModel$inboundSchema: z.ZodType<
  CreateImageEditRequestModel,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateImageEditRequestModel2$inboundSchema]);

/** @internal */
export type CreateImageEditRequestModel$Outbound = string | string;

/** @internal */
export const CreateImageEditRequestModel$outboundSchema: z.ZodType<
  CreateImageEditRequestModel$Outbound,
  z.ZodTypeDef,
  CreateImageEditRequestModel
> = z.union([z.string(), CreateImageEditRequestModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageEditRequestModel$ {
  /** @deprecated use `CreateImageEditRequestModel$inboundSchema` instead. */
  export const inboundSchema = CreateImageEditRequestModel$inboundSchema;
  /** @deprecated use `CreateImageEditRequestModel$outboundSchema` instead. */
  export const outboundSchema = CreateImageEditRequestModel$outboundSchema;
  /** @deprecated use `CreateImageEditRequestModel$Outbound` instead. */
  export type Outbound = CreateImageEditRequestModel$Outbound;
}

export function createImageEditRequestModelToJSON(
  createImageEditRequestModel: CreateImageEditRequestModel,
): string {
  return JSON.stringify(
    CreateImageEditRequestModel$outboundSchema.parse(
      createImageEditRequestModel,
    ),
  );
}

export function createImageEditRequestModelFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageEditRequestModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageEditRequestModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageEditRequestModel' from JSON`,
  );
}

/** @internal */
export const CreateImageEditRequestSize$inboundSchema: z.ZodNativeEnum<
  typeof CreateImageEditRequestSize
> = z.nativeEnum(CreateImageEditRequestSize);

/** @internal */
export const CreateImageEditRequestSize$outboundSchema: z.ZodNativeEnum<
  typeof CreateImageEditRequestSize
> = CreateImageEditRequestSize$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageEditRequestSize$ {
  /** @deprecated use `CreateImageEditRequestSize$inboundSchema` instead. */
  export const inboundSchema = CreateImageEditRequestSize$inboundSchema;
  /** @deprecated use `CreateImageEditRequestSize$outboundSchema` instead. */
  export const outboundSchema = CreateImageEditRequestSize$outboundSchema;
}

/** @internal */
export const CreateImageEditRequestResponseFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreateImageEditRequestResponseFormat> = z.nativeEnum(
    CreateImageEditRequestResponseFormat,
  );

/** @internal */
export const CreateImageEditRequestResponseFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreateImageEditRequestResponseFormat> =
    CreateImageEditRequestResponseFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageEditRequestResponseFormat$ {
  /** @deprecated use `CreateImageEditRequestResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreateImageEditRequestResponseFormat$inboundSchema;
  /** @deprecated use `CreateImageEditRequestResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreateImageEditRequestResponseFormat$outboundSchema;
}

/** @internal */
export const CreateImageEditRequest$inboundSchema: z.ZodType<
  CreateImageEditRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.lazy(() => CreateImageEditRequestImage$inboundSchema),
  prompt: z.string(),
  mask: z.lazy(() => Mask$inboundSchema).optional(),
  model: z.nullable(
    z.union([z.string(), CreateImageEditRequestModel2$inboundSchema]),
  ).optional(),
  n: z.nullable(z.number().int().default(1)),
  response_format: z.nullable(
    CreateImageEditRequestResponseFormat$inboundSchema.default("url"),
  ),
  size: z.nullable(
    CreateImageEditRequestSize$inboundSchema.default("1024x1024"),
  ),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "response_format": "responseFormat",
  });
});

/** @internal */
export type CreateImageEditRequest$Outbound = {
  image: CreateImageEditRequestImage$Outbound | Blob;
  prompt: string;
  mask?: Mask$Outbound | Blob | undefined;
  model?: string | string | null | undefined;
  n: number | null;
  response_format: string | null;
  size: string | null;
  user?: string | undefined;
};

/** @internal */
export const CreateImageEditRequest$outboundSchema: z.ZodType<
  CreateImageEditRequest$Outbound,
  z.ZodTypeDef,
  CreateImageEditRequest
> = z.object({
  image: z.lazy(() => CreateImageEditRequestImage$outboundSchema).or(
    blobLikeSchema,
  ),
  prompt: z.string(),
  mask: z.lazy(() => Mask$outboundSchema).or(blobLikeSchema).optional(),
  model: z.nullable(
    z.union([z.string(), CreateImageEditRequestModel2$outboundSchema]),
  ).optional(),
  n: z.nullable(z.number().int().default(1)),
  responseFormat: z.nullable(
    CreateImageEditRequestResponseFormat$outboundSchema.default("url"),
  ),
  size: z.nullable(
    CreateImageEditRequestSize$outboundSchema.default("1024x1024"),
  ),
  user: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    responseFormat: "response_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateImageEditRequest$ {
  /** @deprecated use `CreateImageEditRequest$inboundSchema` instead. */
  export const inboundSchema = CreateImageEditRequest$inboundSchema;
  /** @deprecated use `CreateImageEditRequest$outboundSchema` instead. */
  export const outboundSchema = CreateImageEditRequest$outboundSchema;
  /** @deprecated use `CreateImageEditRequest$Outbound` instead. */
  export type Outbound = CreateImageEditRequest$Outbound;
}

export function createImageEditRequestToJSON(
  createImageEditRequest: CreateImageEditRequest,
): string {
  return JSON.stringify(
    CreateImageEditRequest$outboundSchema.parse(createImageEditRequest),
  );
}

export function createImageEditRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateImageEditRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateImageEditRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateImageEditRequest' from JSON`,
  );
}
