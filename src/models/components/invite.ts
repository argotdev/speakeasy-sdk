/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The object type, which is always `organization.invite`
 */
export const InviteObject = {
  OrganizationInvite: "organization.invite",
} as const;
/**
 * The object type, which is always `organization.invite`
 */
export type InviteObject = ClosedEnum<typeof InviteObject>;

/**
 * `owner` or `reader`
 */
export const InviteRole = {
  Owner: "owner",
  Reader: "reader",
} as const;
/**
 * `owner` or `reader`
 */
export type InviteRole = ClosedEnum<typeof InviteRole>;

/**
 * `accepted`,`expired`, or `pending`
 */
export const InviteStatus = {
  Accepted: "accepted",
  Expired: "expired",
  Pending: "pending",
} as const;
/**
 * `accepted`,`expired`, or `pending`
 */
export type InviteStatus = ClosedEnum<typeof InviteStatus>;

/**
 * Represents an individual `invite` to the organization.
 */
export type Invite = {
  /**
   * The object type, which is always `organization.invite`
   */
  object: InviteObject;
  /**
   * The identifier, which can be referenced in API endpoints
   */
  id: string;
  /**
   * The email address of the individual to whom the invite was sent
   */
  email: string;
  /**
   * `owner` or `reader`
   */
  role: InviteRole;
  /**
   * `accepted`,`expired`, or `pending`
   */
  status: InviteStatus;
  /**
   * The Unix timestamp (in seconds) of when the invite was sent.
   */
  invitedAt: number;
  /**
   * The Unix timestamp (in seconds) of when the invite expires.
   */
  expiresAt: number;
  /**
   * The Unix timestamp (in seconds) of when the invite was accepted.
   */
  acceptedAt?: number | undefined;
};

/** @internal */
export const InviteObject$inboundSchema: z.ZodNativeEnum<typeof InviteObject> =
  z.nativeEnum(InviteObject);

/** @internal */
export const InviteObject$outboundSchema: z.ZodNativeEnum<typeof InviteObject> =
  InviteObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteObject$ {
  /** @deprecated use `InviteObject$inboundSchema` instead. */
  export const inboundSchema = InviteObject$inboundSchema;
  /** @deprecated use `InviteObject$outboundSchema` instead. */
  export const outboundSchema = InviteObject$outboundSchema;
}

/** @internal */
export const InviteRole$inboundSchema: z.ZodNativeEnum<typeof InviteRole> = z
  .nativeEnum(InviteRole);

/** @internal */
export const InviteRole$outboundSchema: z.ZodNativeEnum<typeof InviteRole> =
  InviteRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteRole$ {
  /** @deprecated use `InviteRole$inboundSchema` instead. */
  export const inboundSchema = InviteRole$inboundSchema;
  /** @deprecated use `InviteRole$outboundSchema` instead. */
  export const outboundSchema = InviteRole$outboundSchema;
}

/** @internal */
export const InviteStatus$inboundSchema: z.ZodNativeEnum<typeof InviteStatus> =
  z.nativeEnum(InviteStatus);

/** @internal */
export const InviteStatus$outboundSchema: z.ZodNativeEnum<typeof InviteStatus> =
  InviteStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InviteStatus$ {
  /** @deprecated use `InviteStatus$inboundSchema` instead. */
  export const inboundSchema = InviteStatus$inboundSchema;
  /** @deprecated use `InviteStatus$outboundSchema` instead. */
  export const outboundSchema = InviteStatus$outboundSchema;
}

/** @internal */
export const Invite$inboundSchema: z.ZodType<Invite, z.ZodTypeDef, unknown> = z
  .object({
    object: InviteObject$inboundSchema,
    id: z.string(),
    email: z.string(),
    role: InviteRole$inboundSchema,
    status: InviteStatus$inboundSchema,
    invited_at: z.number().int(),
    expires_at: z.number().int(),
    accepted_at: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "invited_at": "invitedAt",
      "expires_at": "expiresAt",
      "accepted_at": "acceptedAt",
    });
  });

/** @internal */
export type Invite$Outbound = {
  object: string;
  id: string;
  email: string;
  role: string;
  status: string;
  invited_at: number;
  expires_at: number;
  accepted_at?: number | undefined;
};

/** @internal */
export const Invite$outboundSchema: z.ZodType<
  Invite$Outbound,
  z.ZodTypeDef,
  Invite
> = z.object({
  object: InviteObject$outboundSchema,
  id: z.string(),
  email: z.string(),
  role: InviteRole$outboundSchema,
  status: InviteStatus$outboundSchema,
  invitedAt: z.number().int(),
  expiresAt: z.number().int(),
  acceptedAt: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    invitedAt: "invited_at",
    expiresAt: "expires_at",
    acceptedAt: "accepted_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Invite$ {
  /** @deprecated use `Invite$inboundSchema` instead. */
  export const inboundSchema = Invite$inboundSchema;
  /** @deprecated use `Invite$outboundSchema` instead. */
  export const outboundSchema = Invite$outboundSchema;
  /** @deprecated use `Invite$Outbound` instead. */
  export type Outbound = Invite$Outbound;
}

export function inviteToJSON(invite: Invite): string {
  return JSON.stringify(Invite$outboundSchema.parse(invite));
}

export function inviteFromJSON(
  jsonString: string,
): SafeParseResult<Invite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Invite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Invite' from JSON`,
  );
}
