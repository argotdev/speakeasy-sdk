/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The object type, which is always "embedding".
 */
export const EmbeddingObject = {
  Embedding: "embedding",
} as const;
/**
 * The object type, which is always "embedding".
 */
export type EmbeddingObject = ClosedEnum<typeof EmbeddingObject>;

/**
 * Represents an embedding vector returned by embedding endpoint.
 *
 * @remarks
 */
export type Embedding = {
  /**
   * The index of the embedding in the list of embeddings.
   */
  index: number;
  /**
   * The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).
   *
   * @remarks
   */
  embedding: Array<number>;
  /**
   * The object type, which is always "embedding".
   */
  object: EmbeddingObject;
};

/** @internal */
export const EmbeddingObject$inboundSchema: z.ZodNativeEnum<
  typeof EmbeddingObject
> = z.nativeEnum(EmbeddingObject);

/** @internal */
export const EmbeddingObject$outboundSchema: z.ZodNativeEnum<
  typeof EmbeddingObject
> = EmbeddingObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmbeddingObject$ {
  /** @deprecated use `EmbeddingObject$inboundSchema` instead. */
  export const inboundSchema = EmbeddingObject$inboundSchema;
  /** @deprecated use `EmbeddingObject$outboundSchema` instead. */
  export const outboundSchema = EmbeddingObject$outboundSchema;
}

/** @internal */
export const Embedding$inboundSchema: z.ZodType<
  Embedding,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int(),
  embedding: z.array(z.number()),
  object: EmbeddingObject$inboundSchema,
});

/** @internal */
export type Embedding$Outbound = {
  index: number;
  embedding: Array<number>;
  object: string;
};

/** @internal */
export const Embedding$outboundSchema: z.ZodType<
  Embedding$Outbound,
  z.ZodTypeDef,
  Embedding
> = z.object({
  index: z.number().int(),
  embedding: z.array(z.number()),
  object: EmbeddingObject$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Embedding$ {
  /** @deprecated use `Embedding$inboundSchema` instead. */
  export const inboundSchema = Embedding$inboundSchema;
  /** @deprecated use `Embedding$outboundSchema` instead. */
  export const outboundSchema = Embedding$outboundSchema;
  /** @deprecated use `Embedding$Outbound` instead. */
  export type Outbound = Embedding$Outbound;
}

export function embeddingToJSON(embedding: Embedding): string {
  return JSON.stringify(Embedding$outboundSchema.parse(embedding));
}

export function embeddingFromJSON(
  jsonString: string,
): SafeParseResult<Embedding, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Embedding$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Embedding' from JSON`,
  );
}
