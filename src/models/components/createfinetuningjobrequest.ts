/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateFineTuningJobRequestModel2 = {
  Babbage002: "babbage-002",
  Davinci002: "davinci-002",
  Gpt35Turbo: "gpt-3.5-turbo",
  Gpt4oMini: "gpt-4o-mini",
} as const;
export type CreateFineTuningJobRequestModel2 = ClosedEnum<
  typeof CreateFineTuningJobRequestModel2
>;

/**
 * The name of the model to fine-tune. You can select one of the
 *
 * @remarks
 * [supported models](/docs/guides/fine-tuning/which-models-can-be-fine-tuned).
 */
export type CreateFineTuningJobRequestModel =
  | string
  | CreateFineTuningJobRequestModel2;

export const BatchSize1 = {
  Auto: "auto",
} as const;
export type BatchSize1 = ClosedEnum<typeof BatchSize1>;

/**
 * Number of examples in each batch. A larger batch size means that model parameters
 *
 * @remarks
 * are updated less frequently, but with lower variance.
 */
export type BatchSize = BatchSize1 | number;

export const LearningRateMultiplier1 = {
  Auto: "auto",
} as const;
export type LearningRateMultiplier1 = ClosedEnum<
  typeof LearningRateMultiplier1
>;

/**
 * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
 *
 * @remarks
 * overfitting.
 */
export type LearningRateMultiplier = LearningRateMultiplier1 | number;

export const NEpochs1 = {
  Auto: "auto",
} as const;
export type NEpochs1 = ClosedEnum<typeof NEpochs1>;

/**
 * The number of epochs to train the model for. An epoch refers to one full cycle
 *
 * @remarks
 * through the training dataset.
 */
export type NEpochs = NEpochs1 | number;

/**
 * The hyperparameters used for the fine-tuning job.
 */
export type Hyperparameters = {
  /**
   * Number of examples in each batch. A larger batch size means that model parameters
   *
   * @remarks
   * are updated less frequently, but with lower variance.
   */
  batchSize?: BatchSize1 | number | undefined;
  /**
   * Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
   *
   * @remarks
   * overfitting.
   */
  learningRateMultiplier?: LearningRateMultiplier1 | number | undefined;
  /**
   * The number of epochs to train the model for. An epoch refers to one full cycle
   *
   * @remarks
   * through the training dataset.
   */
  nEpochs?: NEpochs1 | number | undefined;
};

export const Type1 = {
  Wandb: "wandb",
} as const;
export type Type1 = ClosedEnum<typeof Type1>;

/**
 * The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
 *
 * @remarks
 */
export type CreateFineTuningJobRequestType = Type1;

/**
 * The settings for your integration with Weights and Biases. This payload specifies the project that
 *
 * @remarks
 * metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
 * to your run, and set a default entity (team, username, etc) to be associated with your run.
 */
export type CreateFineTuningJobRequestWandb = {
  /**
   * The name of the project that the new run will be created under.
   *
   * @remarks
   */
  project: string;
  /**
   * A display name to set for the run. If not set, we will use the Job ID as the name.
   *
   * @remarks
   */
  name?: string | null | undefined;
  /**
   * The entity to use for the run. This allows you to set the team or username of the WandB user that you would
   *
   * @remarks
   * like associated with the run. If not set, the default entity for the registered WandB API key is used.
   */
  entity?: string | null | undefined;
  /**
   * A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some
   *
   * @remarks
   * default tags are generated by OpenAI: "openai/finetune", "openai/{base-model}", "openai/{ftjob-abcdef}".
   */
  tags?: Array<string> | undefined;
};

export type Integrations = {
  /**
   * The type of integration to enable. Currently, only "wandb" (Weights and Biases) is supported.
   *
   * @remarks
   */
  type: Type1;
  /**
   * The settings for your integration with Weights and Biases. This payload specifies the project that
   *
   * @remarks
   * metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags
   * to your run, and set a default entity (team, username, etc) to be associated with your run.
   */
  wandb: CreateFineTuningJobRequestWandb;
};

export type CreateFineTuningJobRequest = {
  /**
   * The name of the model to fine-tune. You can select one of the
   *
   * @remarks
   * [supported models](/docs/guides/fine-tuning/which-models-can-be-fine-tuned).
   */
  model: string | CreateFineTuningJobRequestModel2;
  /**
   * The ID of an uploaded file that contains training data.
   *
   * @remarks
   *
   * See [upload file](/docs/api-reference/files/create) for how to upload a file.
   *
   * Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
   *
   * The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) format.
   *
   * See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
   */
  trainingFile: string;
  /**
   * The hyperparameters used for the fine-tuning job.
   */
  hyperparameters?: Hyperparameters | undefined;
  /**
   * A string of up to 64 characters that will be added to your fine-tuned model name.
   *
   * @remarks
   *
   * For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.
   */
  suffix?: string | null | undefined;
  /**
   * The ID of an uploaded file that contains validation data.
   *
   * @remarks
   *
   * If you provide this file, the data is used to generate validation
   * metrics periodically during fine-tuning. These metrics can be viewed in
   * the fine-tuning results file.
   * The same data should not be present in both train and validation files.
   *
   * Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
   *
   * See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
   */
  validationFile?: string | null | undefined;
  /**
   * A list of integrations to enable for your fine-tuning job.
   */
  integrations?: Array<Integrations> | null | undefined;
  /**
   * The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.
   *
   * @remarks
   * If a seed is not specified, one will be generated for you.
   */
  seed?: number | null | undefined;
};

/** @internal */
export const CreateFineTuningJobRequestModel2$inboundSchema: z.ZodNativeEnum<
  typeof CreateFineTuningJobRequestModel2
> = z.nativeEnum(CreateFineTuningJobRequestModel2);

/** @internal */
export const CreateFineTuningJobRequestModel2$outboundSchema: z.ZodNativeEnum<
  typeof CreateFineTuningJobRequestModel2
> = CreateFineTuningJobRequestModel2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFineTuningJobRequestModel2$ {
  /** @deprecated use `CreateFineTuningJobRequestModel2$inboundSchema` instead. */
  export const inboundSchema = CreateFineTuningJobRequestModel2$inboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestModel2$outboundSchema` instead. */
  export const outboundSchema = CreateFineTuningJobRequestModel2$outboundSchema;
}

/** @internal */
export const CreateFineTuningJobRequestModel$inboundSchema: z.ZodType<
  CreateFineTuningJobRequestModel,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), CreateFineTuningJobRequestModel2$inboundSchema]);

/** @internal */
export type CreateFineTuningJobRequestModel$Outbound = string | string;

/** @internal */
export const CreateFineTuningJobRequestModel$outboundSchema: z.ZodType<
  CreateFineTuningJobRequestModel$Outbound,
  z.ZodTypeDef,
  CreateFineTuningJobRequestModel
> = z.union([z.string(), CreateFineTuningJobRequestModel2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFineTuningJobRequestModel$ {
  /** @deprecated use `CreateFineTuningJobRequestModel$inboundSchema` instead. */
  export const inboundSchema = CreateFineTuningJobRequestModel$inboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestModel$outboundSchema` instead. */
  export const outboundSchema = CreateFineTuningJobRequestModel$outboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestModel$Outbound` instead. */
  export type Outbound = CreateFineTuningJobRequestModel$Outbound;
}

export function createFineTuningJobRequestModelToJSON(
  createFineTuningJobRequestModel: CreateFineTuningJobRequestModel,
): string {
  return JSON.stringify(
    CreateFineTuningJobRequestModel$outboundSchema.parse(
      createFineTuningJobRequestModel,
    ),
  );
}

export function createFineTuningJobRequestModelFromJSON(
  jsonString: string,
): SafeParseResult<CreateFineTuningJobRequestModel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFineTuningJobRequestModel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFineTuningJobRequestModel' from JSON`,
  );
}

/** @internal */
export const BatchSize1$inboundSchema: z.ZodNativeEnum<typeof BatchSize1> = z
  .nativeEnum(BatchSize1);

/** @internal */
export const BatchSize1$outboundSchema: z.ZodNativeEnum<typeof BatchSize1> =
  BatchSize1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchSize1$ {
  /** @deprecated use `BatchSize1$inboundSchema` instead. */
  export const inboundSchema = BatchSize1$inboundSchema;
  /** @deprecated use `BatchSize1$outboundSchema` instead. */
  export const outboundSchema = BatchSize1$outboundSchema;
}

/** @internal */
export const BatchSize$inboundSchema: z.ZodType<
  BatchSize,
  z.ZodTypeDef,
  unknown
> = z.union([BatchSize1$inboundSchema, z.number().int()]);

/** @internal */
export type BatchSize$Outbound = string | number;

/** @internal */
export const BatchSize$outboundSchema: z.ZodType<
  BatchSize$Outbound,
  z.ZodTypeDef,
  BatchSize
> = z.union([BatchSize1$outboundSchema, z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchSize$ {
  /** @deprecated use `BatchSize$inboundSchema` instead. */
  export const inboundSchema = BatchSize$inboundSchema;
  /** @deprecated use `BatchSize$outboundSchema` instead. */
  export const outboundSchema = BatchSize$outboundSchema;
  /** @deprecated use `BatchSize$Outbound` instead. */
  export type Outbound = BatchSize$Outbound;
}

export function batchSizeToJSON(batchSize: BatchSize): string {
  return JSON.stringify(BatchSize$outboundSchema.parse(batchSize));
}

export function batchSizeFromJSON(
  jsonString: string,
): SafeParseResult<BatchSize, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchSize$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchSize' from JSON`,
  );
}

/** @internal */
export const LearningRateMultiplier1$inboundSchema: z.ZodNativeEnum<
  typeof LearningRateMultiplier1
> = z.nativeEnum(LearningRateMultiplier1);

/** @internal */
export const LearningRateMultiplier1$outboundSchema: z.ZodNativeEnum<
  typeof LearningRateMultiplier1
> = LearningRateMultiplier1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningRateMultiplier1$ {
  /** @deprecated use `LearningRateMultiplier1$inboundSchema` instead. */
  export const inboundSchema = LearningRateMultiplier1$inboundSchema;
  /** @deprecated use `LearningRateMultiplier1$outboundSchema` instead. */
  export const outboundSchema = LearningRateMultiplier1$outboundSchema;
}

/** @internal */
export const LearningRateMultiplier$inboundSchema: z.ZodType<
  LearningRateMultiplier,
  z.ZodTypeDef,
  unknown
> = z.union([LearningRateMultiplier1$inboundSchema, z.number()]);

/** @internal */
export type LearningRateMultiplier$Outbound = string | number;

/** @internal */
export const LearningRateMultiplier$outboundSchema: z.ZodType<
  LearningRateMultiplier$Outbound,
  z.ZodTypeDef,
  LearningRateMultiplier
> = z.union([LearningRateMultiplier1$outboundSchema, z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LearningRateMultiplier$ {
  /** @deprecated use `LearningRateMultiplier$inboundSchema` instead. */
  export const inboundSchema = LearningRateMultiplier$inboundSchema;
  /** @deprecated use `LearningRateMultiplier$outboundSchema` instead. */
  export const outboundSchema = LearningRateMultiplier$outboundSchema;
  /** @deprecated use `LearningRateMultiplier$Outbound` instead. */
  export type Outbound = LearningRateMultiplier$Outbound;
}

export function learningRateMultiplierToJSON(
  learningRateMultiplier: LearningRateMultiplier,
): string {
  return JSON.stringify(
    LearningRateMultiplier$outboundSchema.parse(learningRateMultiplier),
  );
}

export function learningRateMultiplierFromJSON(
  jsonString: string,
): SafeParseResult<LearningRateMultiplier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LearningRateMultiplier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LearningRateMultiplier' from JSON`,
  );
}

/** @internal */
export const NEpochs1$inboundSchema: z.ZodNativeEnum<typeof NEpochs1> = z
  .nativeEnum(NEpochs1);

/** @internal */
export const NEpochs1$outboundSchema: z.ZodNativeEnum<typeof NEpochs1> =
  NEpochs1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NEpochs1$ {
  /** @deprecated use `NEpochs1$inboundSchema` instead. */
  export const inboundSchema = NEpochs1$inboundSchema;
  /** @deprecated use `NEpochs1$outboundSchema` instead. */
  export const outboundSchema = NEpochs1$outboundSchema;
}

/** @internal */
export const NEpochs$inboundSchema: z.ZodType<NEpochs, z.ZodTypeDef, unknown> =
  z.union([NEpochs1$inboundSchema, z.number().int()]);

/** @internal */
export type NEpochs$Outbound = string | number;

/** @internal */
export const NEpochs$outboundSchema: z.ZodType<
  NEpochs$Outbound,
  z.ZodTypeDef,
  NEpochs
> = z.union([NEpochs1$outboundSchema, z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NEpochs$ {
  /** @deprecated use `NEpochs$inboundSchema` instead. */
  export const inboundSchema = NEpochs$inboundSchema;
  /** @deprecated use `NEpochs$outboundSchema` instead. */
  export const outboundSchema = NEpochs$outboundSchema;
  /** @deprecated use `NEpochs$Outbound` instead. */
  export type Outbound = NEpochs$Outbound;
}

export function nEpochsToJSON(nEpochs: NEpochs): string {
  return JSON.stringify(NEpochs$outboundSchema.parse(nEpochs));
}

export function nEpochsFromJSON(
  jsonString: string,
): SafeParseResult<NEpochs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NEpochs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NEpochs' from JSON`,
  );
}

/** @internal */
export const Hyperparameters$inboundSchema: z.ZodType<
  Hyperparameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch_size: z.union([BatchSize1$inboundSchema, z.number().int()]).optional(),
  learning_rate_multiplier: z.union([
    LearningRateMultiplier1$inboundSchema,
    z.number(),
  ]).optional(),
  n_epochs: z.union([NEpochs1$inboundSchema, z.number().int()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "batch_size": "batchSize",
    "learning_rate_multiplier": "learningRateMultiplier",
    "n_epochs": "nEpochs",
  });
});

/** @internal */
export type Hyperparameters$Outbound = {
  batch_size?: string | number | undefined;
  learning_rate_multiplier?: string | number | undefined;
  n_epochs?: string | number | undefined;
};

/** @internal */
export const Hyperparameters$outboundSchema: z.ZodType<
  Hyperparameters$Outbound,
  z.ZodTypeDef,
  Hyperparameters
> = z.object({
  batchSize: z.union([BatchSize1$outboundSchema, z.number().int()]).optional(),
  learningRateMultiplier: z.union([
    LearningRateMultiplier1$outboundSchema,
    z.number(),
  ]).optional(),
  nEpochs: z.union([NEpochs1$outboundSchema, z.number().int()]).optional(),
}).transform((v) => {
  return remap$(v, {
    batchSize: "batch_size",
    learningRateMultiplier: "learning_rate_multiplier",
    nEpochs: "n_epochs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Hyperparameters$ {
  /** @deprecated use `Hyperparameters$inboundSchema` instead. */
  export const inboundSchema = Hyperparameters$inboundSchema;
  /** @deprecated use `Hyperparameters$outboundSchema` instead. */
  export const outboundSchema = Hyperparameters$outboundSchema;
  /** @deprecated use `Hyperparameters$Outbound` instead. */
  export type Outbound = Hyperparameters$Outbound;
}

export function hyperparametersToJSON(
  hyperparameters: Hyperparameters,
): string {
  return JSON.stringify(Hyperparameters$outboundSchema.parse(hyperparameters));
}

export function hyperparametersFromJSON(
  jsonString: string,
): SafeParseResult<Hyperparameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Hyperparameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Hyperparameters' from JSON`,
  );
}

/** @internal */
export const Type1$inboundSchema: z.ZodNativeEnum<typeof Type1> = z.nativeEnum(
  Type1,
);

/** @internal */
export const Type1$outboundSchema: z.ZodNativeEnum<typeof Type1> =
  Type1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type1$ {
  /** @deprecated use `Type1$inboundSchema` instead. */
  export const inboundSchema = Type1$inboundSchema;
  /** @deprecated use `Type1$outboundSchema` instead. */
  export const outboundSchema = Type1$outboundSchema;
}

/** @internal */
export const CreateFineTuningJobRequestType$inboundSchema: z.ZodType<
  CreateFineTuningJobRequestType,
  z.ZodTypeDef,
  unknown
> = Type1$inboundSchema;

/** @internal */
export type CreateFineTuningJobRequestType$Outbound = string;

/** @internal */
export const CreateFineTuningJobRequestType$outboundSchema: z.ZodType<
  CreateFineTuningJobRequestType$Outbound,
  z.ZodTypeDef,
  CreateFineTuningJobRequestType
> = Type1$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFineTuningJobRequestType$ {
  /** @deprecated use `CreateFineTuningJobRequestType$inboundSchema` instead. */
  export const inboundSchema = CreateFineTuningJobRequestType$inboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestType$outboundSchema` instead. */
  export const outboundSchema = CreateFineTuningJobRequestType$outboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestType$Outbound` instead. */
  export type Outbound = CreateFineTuningJobRequestType$Outbound;
}

export function createFineTuningJobRequestTypeToJSON(
  createFineTuningJobRequestType: CreateFineTuningJobRequestType,
): string {
  return JSON.stringify(
    CreateFineTuningJobRequestType$outboundSchema.parse(
      createFineTuningJobRequestType,
    ),
  );
}

export function createFineTuningJobRequestTypeFromJSON(
  jsonString: string,
): SafeParseResult<CreateFineTuningJobRequestType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFineTuningJobRequestType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFineTuningJobRequestType' from JSON`,
  );
}

/** @internal */
export const CreateFineTuningJobRequestWandb$inboundSchema: z.ZodType<
  CreateFineTuningJobRequestWandb,
  z.ZodTypeDef,
  unknown
> = z.object({
  project: z.string(),
  name: z.nullable(z.string()).optional(),
  entity: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
});

/** @internal */
export type CreateFineTuningJobRequestWandb$Outbound = {
  project: string;
  name?: string | null | undefined;
  entity?: string | null | undefined;
  tags?: Array<string> | undefined;
};

/** @internal */
export const CreateFineTuningJobRequestWandb$outboundSchema: z.ZodType<
  CreateFineTuningJobRequestWandb$Outbound,
  z.ZodTypeDef,
  CreateFineTuningJobRequestWandb
> = z.object({
  project: z.string(),
  name: z.nullable(z.string()).optional(),
  entity: z.nullable(z.string()).optional(),
  tags: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFineTuningJobRequestWandb$ {
  /** @deprecated use `CreateFineTuningJobRequestWandb$inboundSchema` instead. */
  export const inboundSchema = CreateFineTuningJobRequestWandb$inboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestWandb$outboundSchema` instead. */
  export const outboundSchema = CreateFineTuningJobRequestWandb$outboundSchema;
  /** @deprecated use `CreateFineTuningJobRequestWandb$Outbound` instead. */
  export type Outbound = CreateFineTuningJobRequestWandb$Outbound;
}

export function createFineTuningJobRequestWandbToJSON(
  createFineTuningJobRequestWandb: CreateFineTuningJobRequestWandb,
): string {
  return JSON.stringify(
    CreateFineTuningJobRequestWandb$outboundSchema.parse(
      createFineTuningJobRequestWandb,
    ),
  );
}

export function createFineTuningJobRequestWandbFromJSON(
  jsonString: string,
): SafeParseResult<CreateFineTuningJobRequestWandb, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFineTuningJobRequestWandb$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFineTuningJobRequestWandb' from JSON`,
  );
}

/** @internal */
export const Integrations$inboundSchema: z.ZodType<
  Integrations,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: Type1$inboundSchema,
  wandb: z.lazy(() => CreateFineTuningJobRequestWandb$inboundSchema),
});

/** @internal */
export type Integrations$Outbound = {
  type: string;
  wandb: CreateFineTuningJobRequestWandb$Outbound;
};

/** @internal */
export const Integrations$outboundSchema: z.ZodType<
  Integrations$Outbound,
  z.ZodTypeDef,
  Integrations
> = z.object({
  type: Type1$outboundSchema,
  wandb: z.lazy(() => CreateFineTuningJobRequestWandb$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Integrations$ {
  /** @deprecated use `Integrations$inboundSchema` instead. */
  export const inboundSchema = Integrations$inboundSchema;
  /** @deprecated use `Integrations$outboundSchema` instead. */
  export const outboundSchema = Integrations$outboundSchema;
  /** @deprecated use `Integrations$Outbound` instead. */
  export type Outbound = Integrations$Outbound;
}

export function integrationsToJSON(integrations: Integrations): string {
  return JSON.stringify(Integrations$outboundSchema.parse(integrations));
}

export function integrationsFromJSON(
  jsonString: string,
): SafeParseResult<Integrations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Integrations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Integrations' from JSON`,
  );
}

/** @internal */
export const CreateFineTuningJobRequest$inboundSchema: z.ZodType<
  CreateFineTuningJobRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.union([z.string(), CreateFineTuningJobRequestModel2$inboundSchema]),
  training_file: z.string(),
  hyperparameters: z.lazy(() => Hyperparameters$inboundSchema).optional(),
  suffix: z.nullable(z.string()).default(null),
  validation_file: z.nullable(z.string()).optional(),
  integrations: z.nullable(z.array(z.lazy(() => Integrations$inboundSchema)))
    .optional(),
  seed: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "training_file": "trainingFile",
    "validation_file": "validationFile",
  });
});

/** @internal */
export type CreateFineTuningJobRequest$Outbound = {
  model: string | string;
  training_file: string;
  hyperparameters?: Hyperparameters$Outbound | undefined;
  suffix: string | null;
  validation_file?: string | null | undefined;
  integrations?: Array<Integrations$Outbound> | null | undefined;
  seed?: number | null | undefined;
};

/** @internal */
export const CreateFineTuningJobRequest$outboundSchema: z.ZodType<
  CreateFineTuningJobRequest$Outbound,
  z.ZodTypeDef,
  CreateFineTuningJobRequest
> = z.object({
  model: z.union([z.string(), CreateFineTuningJobRequestModel2$outboundSchema]),
  trainingFile: z.string(),
  hyperparameters: z.lazy(() => Hyperparameters$outboundSchema).optional(),
  suffix: z.nullable(z.string()).default(null),
  validationFile: z.nullable(z.string()).optional(),
  integrations: z.nullable(z.array(z.lazy(() => Integrations$outboundSchema)))
    .optional(),
  seed: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    trainingFile: "training_file",
    validationFile: "validation_file",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFineTuningJobRequest$ {
  /** @deprecated use `CreateFineTuningJobRequest$inboundSchema` instead. */
  export const inboundSchema = CreateFineTuningJobRequest$inboundSchema;
  /** @deprecated use `CreateFineTuningJobRequest$outboundSchema` instead. */
  export const outboundSchema = CreateFineTuningJobRequest$outboundSchema;
  /** @deprecated use `CreateFineTuningJobRequest$Outbound` instead. */
  export type Outbound = CreateFineTuningJobRequest$Outbound;
}

export function createFineTuningJobRequestToJSON(
  createFineTuningJobRequest: CreateFineTuningJobRequest,
): string {
  return JSON.stringify(
    CreateFineTuningJobRequest$outboundSchema.parse(createFineTuningJobRequest),
  );
}

export function createFineTuningJobRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateFineTuningJobRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateFineTuningJobRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateFineTuningJobRequest' from JSON`,
  );
}
