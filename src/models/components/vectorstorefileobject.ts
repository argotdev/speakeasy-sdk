/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OtherChunkingStrategyResponseParam,
  OtherChunkingStrategyResponseParam$inboundSchema,
  OtherChunkingStrategyResponseParam$Outbound,
  OtherChunkingStrategyResponseParam$outboundSchema,
} from "./otherchunkingstrategyresponseparam.js";
import {
  StaticChunkingStrategyResponseParam,
  StaticChunkingStrategyResponseParam$inboundSchema,
  StaticChunkingStrategyResponseParam$Outbound,
  StaticChunkingStrategyResponseParam$outboundSchema,
} from "./staticchunkingstrategyresponseparam.js";

/**
 * The object type, which is always `vector_store.file`.
 */
export const VectorStoreFileObjectObject = {
  VectorStoreFile: "vector_store.file",
} as const;
/**
 * The object type, which is always `vector_store.file`.
 */
export type VectorStoreFileObjectObject = ClosedEnum<
  typeof VectorStoreFileObjectObject
>;

/**
 * The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
 */
export const VectorStoreFileObjectStatus = {
  InProgress: "in_progress",
  Completed: "completed",
  Cancelled: "cancelled",
  Failed: "failed",
} as const;
/**
 * The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
 */
export type VectorStoreFileObjectStatus = ClosedEnum<
  typeof VectorStoreFileObjectStatus
>;

/**
 * One of `server_error` or `rate_limit_exceeded`.
 */
export const VectorStoreFileObjectCode = {
  ServerError: "server_error",
  UnsupportedFile: "unsupported_file",
  InvalidFile: "invalid_file",
} as const;
/**
 * One of `server_error` or `rate_limit_exceeded`.
 */
export type VectorStoreFileObjectCode = ClosedEnum<
  typeof VectorStoreFileObjectCode
>;

/**
 * The last error associated with this vector store file. Will be `null` if there are no errors.
 */
export type VectorStoreFileObjectLastError = {
  /**
   * One of `server_error` or `rate_limit_exceeded`.
   */
  code: VectorStoreFileObjectCode;
  /**
   * A human-readable description of the error.
   */
  message: string;
};

/**
 * The strategy used to chunk the file.
 */
export type VectorStoreFileObjectChunkingStrategy =
  | OtherChunkingStrategyResponseParam
  | StaticChunkingStrategyResponseParam;

/**
 * A list of files attached to a vector store.
 */
export type VectorStoreFileObject = {
  /**
   * The identifier, which can be referenced in API endpoints.
   */
  id: string;
  /**
   * The object type, which is always `vector_store.file`.
   */
  object: VectorStoreFileObjectObject;
  /**
   * The total vector store usage in bytes. Note that this may be different from the original file size.
   */
  usageBytes: number;
  /**
   * The Unix timestamp (in seconds) for when the vector store file was created.
   */
  createdAt: number;
  /**
   * The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
   */
  vectorStoreId: string;
  /**
   * The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
   */
  status: VectorStoreFileObjectStatus;
  /**
   * The last error associated with this vector store file. Will be `null` if there are no errors.
   */
  lastError: VectorStoreFileObjectLastError | null;
  /**
   * The strategy used to chunk the file.
   */
  chunkingStrategy?:
    | OtherChunkingStrategyResponseParam
    | StaticChunkingStrategyResponseParam
    | undefined;
};

/** @internal */
export const VectorStoreFileObjectObject$inboundSchema: z.ZodNativeEnum<
  typeof VectorStoreFileObjectObject
> = z.nativeEnum(VectorStoreFileObjectObject);

/** @internal */
export const VectorStoreFileObjectObject$outboundSchema: z.ZodNativeEnum<
  typeof VectorStoreFileObjectObject
> = VectorStoreFileObjectObject$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreFileObjectObject$ {
  /** @deprecated use `VectorStoreFileObjectObject$inboundSchema` instead. */
  export const inboundSchema = VectorStoreFileObjectObject$inboundSchema;
  /** @deprecated use `VectorStoreFileObjectObject$outboundSchema` instead. */
  export const outboundSchema = VectorStoreFileObjectObject$outboundSchema;
}

/** @internal */
export const VectorStoreFileObjectStatus$inboundSchema: z.ZodNativeEnum<
  typeof VectorStoreFileObjectStatus
> = z.nativeEnum(VectorStoreFileObjectStatus);

/** @internal */
export const VectorStoreFileObjectStatus$outboundSchema: z.ZodNativeEnum<
  typeof VectorStoreFileObjectStatus
> = VectorStoreFileObjectStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreFileObjectStatus$ {
  /** @deprecated use `VectorStoreFileObjectStatus$inboundSchema` instead. */
  export const inboundSchema = VectorStoreFileObjectStatus$inboundSchema;
  /** @deprecated use `VectorStoreFileObjectStatus$outboundSchema` instead. */
  export const outboundSchema = VectorStoreFileObjectStatus$outboundSchema;
}

/** @internal */
export const VectorStoreFileObjectCode$inboundSchema: z.ZodNativeEnum<
  typeof VectorStoreFileObjectCode
> = z.nativeEnum(VectorStoreFileObjectCode);

/** @internal */
export const VectorStoreFileObjectCode$outboundSchema: z.ZodNativeEnum<
  typeof VectorStoreFileObjectCode
> = VectorStoreFileObjectCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreFileObjectCode$ {
  /** @deprecated use `VectorStoreFileObjectCode$inboundSchema` instead. */
  export const inboundSchema = VectorStoreFileObjectCode$inboundSchema;
  /** @deprecated use `VectorStoreFileObjectCode$outboundSchema` instead. */
  export const outboundSchema = VectorStoreFileObjectCode$outboundSchema;
}

/** @internal */
export const VectorStoreFileObjectLastError$inboundSchema: z.ZodType<
  VectorStoreFileObjectLastError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: VectorStoreFileObjectCode$inboundSchema,
  message: z.string(),
});

/** @internal */
export type VectorStoreFileObjectLastError$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const VectorStoreFileObjectLastError$outboundSchema: z.ZodType<
  VectorStoreFileObjectLastError$Outbound,
  z.ZodTypeDef,
  VectorStoreFileObjectLastError
> = z.object({
  code: VectorStoreFileObjectCode$outboundSchema,
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreFileObjectLastError$ {
  /** @deprecated use `VectorStoreFileObjectLastError$inboundSchema` instead. */
  export const inboundSchema = VectorStoreFileObjectLastError$inboundSchema;
  /** @deprecated use `VectorStoreFileObjectLastError$outboundSchema` instead. */
  export const outboundSchema = VectorStoreFileObjectLastError$outboundSchema;
  /** @deprecated use `VectorStoreFileObjectLastError$Outbound` instead. */
  export type Outbound = VectorStoreFileObjectLastError$Outbound;
}

export function vectorStoreFileObjectLastErrorToJSON(
  vectorStoreFileObjectLastError: VectorStoreFileObjectLastError,
): string {
  return JSON.stringify(
    VectorStoreFileObjectLastError$outboundSchema.parse(
      vectorStoreFileObjectLastError,
    ),
  );
}

export function vectorStoreFileObjectLastErrorFromJSON(
  jsonString: string,
): SafeParseResult<VectorStoreFileObjectLastError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VectorStoreFileObjectLastError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VectorStoreFileObjectLastError' from JSON`,
  );
}

/** @internal */
export const VectorStoreFileObjectChunkingStrategy$inboundSchema: z.ZodType<
  VectorStoreFileObjectChunkingStrategy,
  z.ZodTypeDef,
  unknown
> = z.union([
  OtherChunkingStrategyResponseParam$inboundSchema,
  StaticChunkingStrategyResponseParam$inboundSchema,
]);

/** @internal */
export type VectorStoreFileObjectChunkingStrategy$Outbound =
  | OtherChunkingStrategyResponseParam$Outbound
  | StaticChunkingStrategyResponseParam$Outbound;

/** @internal */
export const VectorStoreFileObjectChunkingStrategy$outboundSchema: z.ZodType<
  VectorStoreFileObjectChunkingStrategy$Outbound,
  z.ZodTypeDef,
  VectorStoreFileObjectChunkingStrategy
> = z.union([
  OtherChunkingStrategyResponseParam$outboundSchema,
  StaticChunkingStrategyResponseParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreFileObjectChunkingStrategy$ {
  /** @deprecated use `VectorStoreFileObjectChunkingStrategy$inboundSchema` instead. */
  export const inboundSchema =
    VectorStoreFileObjectChunkingStrategy$inboundSchema;
  /** @deprecated use `VectorStoreFileObjectChunkingStrategy$outboundSchema` instead. */
  export const outboundSchema =
    VectorStoreFileObjectChunkingStrategy$outboundSchema;
  /** @deprecated use `VectorStoreFileObjectChunkingStrategy$Outbound` instead. */
  export type Outbound = VectorStoreFileObjectChunkingStrategy$Outbound;
}

export function vectorStoreFileObjectChunkingStrategyToJSON(
  vectorStoreFileObjectChunkingStrategy: VectorStoreFileObjectChunkingStrategy,
): string {
  return JSON.stringify(
    VectorStoreFileObjectChunkingStrategy$outboundSchema.parse(
      vectorStoreFileObjectChunkingStrategy,
    ),
  );
}

export function vectorStoreFileObjectChunkingStrategyFromJSON(
  jsonString: string,
): SafeParseResult<VectorStoreFileObjectChunkingStrategy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      VectorStoreFileObjectChunkingStrategy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VectorStoreFileObjectChunkingStrategy' from JSON`,
  );
}

/** @internal */
export const VectorStoreFileObject$inboundSchema: z.ZodType<
  VectorStoreFileObject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  object: VectorStoreFileObjectObject$inboundSchema,
  usage_bytes: z.number().int(),
  created_at: z.number().int(),
  vector_store_id: z.string(),
  status: VectorStoreFileObjectStatus$inboundSchema,
  last_error: z.nullable(
    z.lazy(() => VectorStoreFileObjectLastError$inboundSchema),
  ),
  chunking_strategy: z.union([
    OtherChunkingStrategyResponseParam$inboundSchema,
    StaticChunkingStrategyResponseParam$inboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "usage_bytes": "usageBytes",
    "created_at": "createdAt",
    "vector_store_id": "vectorStoreId",
    "last_error": "lastError",
    "chunking_strategy": "chunkingStrategy",
  });
});

/** @internal */
export type VectorStoreFileObject$Outbound = {
  id: string;
  object: string;
  usage_bytes: number;
  created_at: number;
  vector_store_id: string;
  status: string;
  last_error: VectorStoreFileObjectLastError$Outbound | null;
  chunking_strategy?:
    | OtherChunkingStrategyResponseParam$Outbound
    | StaticChunkingStrategyResponseParam$Outbound
    | undefined;
};

/** @internal */
export const VectorStoreFileObject$outboundSchema: z.ZodType<
  VectorStoreFileObject$Outbound,
  z.ZodTypeDef,
  VectorStoreFileObject
> = z.object({
  id: z.string(),
  object: VectorStoreFileObjectObject$outboundSchema,
  usageBytes: z.number().int(),
  createdAt: z.number().int(),
  vectorStoreId: z.string(),
  status: VectorStoreFileObjectStatus$outboundSchema,
  lastError: z.nullable(
    z.lazy(() => VectorStoreFileObjectLastError$outboundSchema),
  ),
  chunkingStrategy: z.union([
    OtherChunkingStrategyResponseParam$outboundSchema,
    StaticChunkingStrategyResponseParam$outboundSchema,
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    usageBytes: "usage_bytes",
    createdAt: "created_at",
    vectorStoreId: "vector_store_id",
    lastError: "last_error",
    chunkingStrategy: "chunking_strategy",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorStoreFileObject$ {
  /** @deprecated use `VectorStoreFileObject$inboundSchema` instead. */
  export const inboundSchema = VectorStoreFileObject$inboundSchema;
  /** @deprecated use `VectorStoreFileObject$outboundSchema` instead. */
  export const outboundSchema = VectorStoreFileObject$outboundSchema;
  /** @deprecated use `VectorStoreFileObject$Outbound` instead. */
  export type Outbound = VectorStoreFileObject$Outbound;
}

export function vectorStoreFileObjectToJSON(
  vectorStoreFileObject: VectorStoreFileObject,
): string {
  return JSON.stringify(
    VectorStoreFileObject$outboundSchema.parse(vectorStoreFileObject),
  );
}

export function vectorStoreFileObjectFromJSON(
  jsonString: string,
): SafeParseResult<VectorStoreFileObject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VectorStoreFileObject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VectorStoreFileObject' from JSON`,
  );
}
