/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import {
  AuditLogActorApiKey,
  AuditLogActorApiKey$inboundSchema,
  AuditLogActorApiKey$Outbound,
  AuditLogActorApiKey$outboundSchema,
} from "./auditlogactorapikey.js";
import {
  AuditLogActorSession,
  AuditLogActorSession$inboundSchema,
  AuditLogActorSession$Outbound,
  AuditLogActorSession$outboundSchema,
} from "./auditlogactorsession.js";

/**
 * The type of actor. Is either `session` or `api_key`.
 */
export const AuditLogActorType = {
  Session: "session",
  ApiKey: "api_key",
} as const;
/**
 * The type of actor. Is either `session` or `api_key`.
 */
export type AuditLogActorType = ClosedEnum<typeof AuditLogActorType>;

/**
 * The actor who performed the audit logged action.
 */
export type AuditLogActor = {
  /**
   * The type of actor. Is either `session` or `api_key`.
   */
  type?: AuditLogActorType | undefined;
  /**
   * The session in which the audit logged action was performed.
   */
  session?: AuditLogActorSession | undefined;
  /**
   * The API Key used to perform the audit logged action.
   */
  apiKey?: AuditLogActorApiKey | undefined;
};

/** @internal */
export const AuditLogActorType$inboundSchema: z.ZodNativeEnum<
  typeof AuditLogActorType
> = z.nativeEnum(AuditLogActorType);

/** @internal */
export const AuditLogActorType$outboundSchema: z.ZodNativeEnum<
  typeof AuditLogActorType
> = AuditLogActorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogActorType$ {
  /** @deprecated use `AuditLogActorType$inboundSchema` instead. */
  export const inboundSchema = AuditLogActorType$inboundSchema;
  /** @deprecated use `AuditLogActorType$outboundSchema` instead. */
  export const outboundSchema = AuditLogActorType$outboundSchema;
}

/** @internal */
export const AuditLogActor$inboundSchema: z.ZodType<
  AuditLogActor,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: AuditLogActorType$inboundSchema.optional(),
  session: AuditLogActorSession$inboundSchema.optional(),
  api_key: AuditLogActorApiKey$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "api_key": "apiKey",
  });
});

/** @internal */
export type AuditLogActor$Outbound = {
  type?: string | undefined;
  session?: AuditLogActorSession$Outbound | undefined;
  api_key?: AuditLogActorApiKey$Outbound | undefined;
};

/** @internal */
export const AuditLogActor$outboundSchema: z.ZodType<
  AuditLogActor$Outbound,
  z.ZodTypeDef,
  AuditLogActor
> = z.object({
  type: AuditLogActorType$outboundSchema.optional(),
  session: AuditLogActorSession$outboundSchema.optional(),
  apiKey: AuditLogActorApiKey$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    apiKey: "api_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuditLogActor$ {
  /** @deprecated use `AuditLogActor$inboundSchema` instead. */
  export const inboundSchema = AuditLogActor$inboundSchema;
  /** @deprecated use `AuditLogActor$outboundSchema` instead. */
  export const outboundSchema = AuditLogActor$outboundSchema;
  /** @deprecated use `AuditLogActor$Outbound` instead. */
  export type Outbound = AuditLogActor$Outbound;
}
