/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The type of response format being defined: `json_schema`
 */
export const ResponseFormatJsonSchemaType = {
  JsonSchema: "json_schema",
} as const;
/**
 * The type of response format being defined: `json_schema`
 */
export type ResponseFormatJsonSchemaType = ClosedEnum<
  typeof ResponseFormatJsonSchemaType
>;

export type JsonSchema = {
  /**
   * A description of what the response format is for, used by the model to determine how to respond in the format.
   */
  description?: string | undefined;
  /**
   * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * The schema for the response format, described as a JSON Schema object.
   */
  schema?: { [k: string]: any } | undefined;
  /**
   * Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
   */
  strict?: boolean | null | undefined;
};

export type ResponseFormatJsonSchema = {
  /**
   * The type of response format being defined: `json_schema`
   */
  type: ResponseFormatJsonSchemaType;
  jsonSchema: JsonSchema;
};

/** @internal */
export const ResponseFormatJsonSchemaType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatJsonSchemaType
> = z.nativeEnum(ResponseFormatJsonSchemaType);

/** @internal */
export const ResponseFormatJsonSchemaType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseFormatJsonSchemaType
> = ResponseFormatJsonSchemaType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonSchemaType$ {
  /** @deprecated use `ResponseFormatJsonSchemaType$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonSchemaType$inboundSchema;
  /** @deprecated use `ResponseFormatJsonSchemaType$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonSchemaType$outboundSchema;
}

/** @internal */
export const JsonSchema$inboundSchema: z.ZodType<
  JsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  name: z.string(),
  schema: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/** @internal */
export type JsonSchema$Outbound = {
  description?: string | undefined;
  name: string;
  schema?: { [k: string]: any } | undefined;
  strict: boolean | null;
};

/** @internal */
export const JsonSchema$outboundSchema: z.ZodType<
  JsonSchema$Outbound,
  z.ZodTypeDef,
  JsonSchema
> = z.object({
  description: z.string().optional(),
  name: z.string(),
  schema: z.record(z.any()).optional(),
  strict: z.nullable(z.boolean().default(false)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JsonSchema$ {
  /** @deprecated use `JsonSchema$inboundSchema` instead. */
  export const inboundSchema = JsonSchema$inboundSchema;
  /** @deprecated use `JsonSchema$outboundSchema` instead. */
  export const outboundSchema = JsonSchema$outboundSchema;
  /** @deprecated use `JsonSchema$Outbound` instead. */
  export type Outbound = JsonSchema$Outbound;
}

/** @internal */
export const ResponseFormatJsonSchema$inboundSchema: z.ZodType<
  ResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseFormatJsonSchemaType$inboundSchema,
  json_schema: z.lazy(() => JsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type ResponseFormatJsonSchema$Outbound = {
  type: string;
  json_schema: JsonSchema$Outbound;
};

/** @internal */
export const ResponseFormatJsonSchema$outboundSchema: z.ZodType<
  ResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  ResponseFormatJsonSchema
> = z.object({
  type: ResponseFormatJsonSchemaType$outboundSchema,
  jsonSchema: z.lazy(() => JsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseFormatJsonSchema$ {
  /** @deprecated use `ResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema = ResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema = ResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `ResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = ResponseFormatJsonSchema$Outbound;
}
