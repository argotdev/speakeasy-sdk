/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Always `file_citation`.
 */
export const MessageContentTextAnnotationsFileCitationObjectType = {
  FileCitation: "file_citation",
} as const;
/**
 * Always `file_citation`.
 */
export type MessageContentTextAnnotationsFileCitationObjectType = ClosedEnum<
  typeof MessageContentTextAnnotationsFileCitationObjectType
>;

export type FileCitation = {
  /**
   * The ID of the specific File the citation is from.
   */
  fileId: string;
};

/**
 * A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
 */
export type MessageContentTextAnnotationsFileCitationObject = {
  /**
   * Always `file_citation`.
   */
  type: MessageContentTextAnnotationsFileCitationObjectType;
  /**
   * The text in the message content that needs to be replaced.
   */
  text: string;
  fileCitation: FileCitation;
  startIndex: number;
  endIndex: number;
};

/** @internal */
export const MessageContentTextAnnotationsFileCitationObjectType$inboundSchema:
  z.ZodNativeEnum<typeof MessageContentTextAnnotationsFileCitationObjectType> =
    z.nativeEnum(MessageContentTextAnnotationsFileCitationObjectType);

/** @internal */
export const MessageContentTextAnnotationsFileCitationObjectType$outboundSchema:
  z.ZodNativeEnum<typeof MessageContentTextAnnotationsFileCitationObjectType> =
    MessageContentTextAnnotationsFileCitationObjectType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentTextAnnotationsFileCitationObjectType$ {
  /** @deprecated use `MessageContentTextAnnotationsFileCitationObjectType$inboundSchema` instead. */
  export const inboundSchema =
    MessageContentTextAnnotationsFileCitationObjectType$inboundSchema;
  /** @deprecated use `MessageContentTextAnnotationsFileCitationObjectType$outboundSchema` instead. */
  export const outboundSchema =
    MessageContentTextAnnotationsFileCitationObjectType$outboundSchema;
}

/** @internal */
export const FileCitation$inboundSchema: z.ZodType<
  FileCitation,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
  });
});

/** @internal */
export type FileCitation$Outbound = {
  file_id: string;
};

/** @internal */
export const FileCitation$outboundSchema: z.ZodType<
  FileCitation$Outbound,
  z.ZodTypeDef,
  FileCitation
> = z.object({
  fileId: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FileCitation$ {
  /** @deprecated use `FileCitation$inboundSchema` instead. */
  export const inboundSchema = FileCitation$inboundSchema;
  /** @deprecated use `FileCitation$outboundSchema` instead. */
  export const outboundSchema = FileCitation$outboundSchema;
  /** @deprecated use `FileCitation$Outbound` instead. */
  export type Outbound = FileCitation$Outbound;
}

/** @internal */
export const MessageContentTextAnnotationsFileCitationObject$inboundSchema:
  z.ZodType<
    MessageContentTextAnnotationsFileCitationObject,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: MessageContentTextAnnotationsFileCitationObjectType$inboundSchema,
    text: z.string(),
    file_citation: z.lazy(() => FileCitation$inboundSchema),
    start_index: z.number().int(),
    end_index: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      "file_citation": "fileCitation",
      "start_index": "startIndex",
      "end_index": "endIndex",
    });
  });

/** @internal */
export type MessageContentTextAnnotationsFileCitationObject$Outbound = {
  type: string;
  text: string;
  file_citation: FileCitation$Outbound;
  start_index: number;
  end_index: number;
};

/** @internal */
export const MessageContentTextAnnotationsFileCitationObject$outboundSchema:
  z.ZodType<
    MessageContentTextAnnotationsFileCitationObject$Outbound,
    z.ZodTypeDef,
    MessageContentTextAnnotationsFileCitationObject
  > = z.object({
    type: MessageContentTextAnnotationsFileCitationObjectType$outboundSchema,
    text: z.string(),
    fileCitation: z.lazy(() => FileCitation$outboundSchema),
    startIndex: z.number().int(),
    endIndex: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      fileCitation: "file_citation",
      startIndex: "start_index",
      endIndex: "end_index",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageContentTextAnnotationsFileCitationObject$ {
  /** @deprecated use `MessageContentTextAnnotationsFileCitationObject$inboundSchema` instead. */
  export const inboundSchema =
    MessageContentTextAnnotationsFileCitationObject$inboundSchema;
  /** @deprecated use `MessageContentTextAnnotationsFileCitationObject$outboundSchema` instead. */
  export const outboundSchema =
    MessageContentTextAnnotationsFileCitationObject$outboundSchema;
  /** @deprecated use `MessageContentTextAnnotationsFileCitationObject$Outbound` instead. */
  export type Outbound =
    MessageContentTextAnnotationsFileCitationObject$Outbound;
}
