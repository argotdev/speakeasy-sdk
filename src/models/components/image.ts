/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents the url or the content of an image generated by the OpenAI API.
 */
export type Image = {
  /**
   * The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
   */
  b64Json?: string | undefined;
  /**
   * The URL of the generated image, if `response_format` is `url` (default).
   */
  url?: string | undefined;
  /**
   * The prompt that was used to generate the image, if there was any revision to the prompt.
   */
  revisedPrompt?: string | undefined;
};

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .object({
    b64_json: z.string().optional(),
    url: z.string().optional(),
    revised_prompt: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "b64_json": "b64Json",
      "revised_prompt": "revisedPrompt",
    });
  });

/** @internal */
export type Image$Outbound = {
  b64_json?: string | undefined;
  url?: string | undefined;
  revised_prompt?: string | undefined;
};

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.object({
  b64Json: z.string().optional(),
  url: z.string().optional(),
  revisedPrompt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    b64Json: "b64_json",
    revisedPrompt: "revised_prompt",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

export function imageToJSON(image: Image): string {
  return JSON.stringify(Image$outboundSchema.parse(image));
}

export function imageFromJSON(
  jsonString: string,
): SafeParseResult<Image, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Image$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Image' from JSON`,
  );
}
