/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ToolOutputs = {
  /**
   * The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
   */
  toolCallId?: string | undefined;
  /**
   * The output of the tool call to be submitted to continue the run.
   */
  output?: string | undefined;
};

export type SubmitToolOutputsRunRequest = {
  /**
   * A list of tools for which the outputs are being submitted.
   */
  toolOutputs: Array<ToolOutputs>;
  /**
   * If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.
   *
   * @remarks
   */
  stream?: boolean | null | undefined;
};

/** @internal */
export const ToolOutputs$inboundSchema: z.ZodType<
  ToolOutputs,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_call_id: z.string().optional(),
  output: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_call_id": "toolCallId",
  });
});

/** @internal */
export type ToolOutputs$Outbound = {
  tool_call_id?: string | undefined;
  output?: string | undefined;
};

/** @internal */
export const ToolOutputs$outboundSchema: z.ZodType<
  ToolOutputs$Outbound,
  z.ZodTypeDef,
  ToolOutputs
> = z.object({
  toolCallId: z.string().optional(),
  output: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCallId: "tool_call_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToolOutputs$ {
  /** @deprecated use `ToolOutputs$inboundSchema` instead. */
  export const inboundSchema = ToolOutputs$inboundSchema;
  /** @deprecated use `ToolOutputs$outboundSchema` instead. */
  export const outboundSchema = ToolOutputs$outboundSchema;
  /** @deprecated use `ToolOutputs$Outbound` instead. */
  export type Outbound = ToolOutputs$Outbound;
}

export function toolOutputsToJSON(toolOutputs: ToolOutputs): string {
  return JSON.stringify(ToolOutputs$outboundSchema.parse(toolOutputs));
}

export function toolOutputsFromJSON(
  jsonString: string,
): SafeParseResult<ToolOutputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToolOutputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToolOutputs' from JSON`,
  );
}

/** @internal */
export const SubmitToolOutputsRunRequest$inboundSchema: z.ZodType<
  SubmitToolOutputsRunRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tool_outputs: z.array(z.lazy(() => ToolOutputs$inboundSchema)),
  stream: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_outputs": "toolOutputs",
  });
});

/** @internal */
export type SubmitToolOutputsRunRequest$Outbound = {
  tool_outputs: Array<ToolOutputs$Outbound>;
  stream?: boolean | null | undefined;
};

/** @internal */
export const SubmitToolOutputsRunRequest$outboundSchema: z.ZodType<
  SubmitToolOutputsRunRequest$Outbound,
  z.ZodTypeDef,
  SubmitToolOutputsRunRequest
> = z.object({
  toolOutputs: z.array(z.lazy(() => ToolOutputs$outboundSchema)),
  stream: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    toolOutputs: "tool_outputs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubmitToolOutputsRunRequest$ {
  /** @deprecated use `SubmitToolOutputsRunRequest$inboundSchema` instead. */
  export const inboundSchema = SubmitToolOutputsRunRequest$inboundSchema;
  /** @deprecated use `SubmitToolOutputsRunRequest$outboundSchema` instead. */
  export const outboundSchema = SubmitToolOutputsRunRequest$outboundSchema;
  /** @deprecated use `SubmitToolOutputsRunRequest$Outbound` instead. */
  export type Outbound = SubmitToolOutputsRunRequest$Outbound;
}

export function submitToolOutputsRunRequestToJSON(
  submitToolOutputsRunRequest: SubmitToolOutputsRunRequest,
): string {
  return JSON.stringify(
    SubmitToolOutputsRunRequest$outboundSchema.parse(
      submitToolOutputsRunRequest,
    ),
  );
}

export function submitToolOutputsRunRequestFromJSON(
  jsonString: string,
): SafeParseResult<SubmitToolOutputsRunRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubmitToolOutputsRunRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubmitToolOutputsRunRequest' from JSON`,
  );
}
